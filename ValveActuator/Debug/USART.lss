
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003006  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000244  00800060  00003006  0000309a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000018e  008002a4  008002a4  000032de  2**0
                  ALLOC
  3 .stab         000034bc  00000000  00000000  000032e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020a0  00000000  00000000  0000679c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__vector_13>
      38:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 33       	cpi	r26, 0x32	; 50
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c7 14 	call	0x298e	; 0x298e <main>
      8a:	0c 94 01 18 	jmp	0x3002	; 0x3002 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <searchFor>:
//}



uint8 *  searchFor (uint8 *array, uint8* string,uint8 size )
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	2b 97       	sbiw	r28, 0x0b	; 11
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	9e 83       	std	Y+6, r25	; 0x06
      a8:	8d 83       	std	Y+5, r24	; 0x05
      aa:	78 87       	std	Y+8, r23	; 0x08
      ac:	6f 83       	std	Y+7, r22	; 0x07
      ae:	49 87       	std	Y+9, r20	; 0x09
	 uint16 i=0,j=0;
      b0:	1c 82       	std	Y+4, r1	; 0x04
      b2:	1b 82       	std	Y+3, r1	; 0x03
      b4:	1a 82       	std	Y+2, r1	; 0x02
      b6:	19 82       	std	Y+1, r1	; 0x01
	 static uint8 arr[10];

for ( i =0;array[i]!='!';i++)
      b8:	1c 82       	std	Y+4, r1	; 0x04
      ba:	1b 82       	std	Y+3, r1	; 0x03
      bc:	5c c0       	rjmp	.+184    	; 0x176 <searchFor+0xe4>
{

	if ( string[j]== array[i])
      be:	2f 81       	ldd	r18, Y+7	; 0x07
      c0:	38 85       	ldd	r19, Y+8	; 0x08
      c2:	89 81       	ldd	r24, Y+1	; 0x01
      c4:	9a 81       	ldd	r25, Y+2	; 0x02
      c6:	f9 01       	movw	r30, r18
      c8:	e8 0f       	add	r30, r24
      ca:	f9 1f       	adc	r31, r25
      cc:	40 81       	ld	r20, Z
      ce:	2d 81       	ldd	r18, Y+5	; 0x05
      d0:	3e 81       	ldd	r19, Y+6	; 0x06
      d2:	8b 81       	ldd	r24, Y+3	; 0x03
      d4:	9c 81       	ldd	r25, Y+4	; 0x04
      d6:	f9 01       	movw	r30, r18
      d8:	e8 0f       	add	r30, r24
      da:	f9 1f       	adc	r31, r25
      dc:	80 81       	ld	r24, Z
      de:	48 17       	cp	r20, r24
      e0:	09 f0       	breq	.+2      	; 0xe4 <searchFor+0x52>
      e2:	44 c0       	rjmp	.+136    	; 0x16c <searchFor+0xda>
	{
		if ( string[j+1]=='\0')
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	9a 81       	ldd	r25, Y+2	; 0x02
      e8:	9c 01       	movw	r18, r24
      ea:	2f 5f       	subi	r18, 0xFF	; 255
      ec:	3f 4f       	sbci	r19, 0xFF	; 255
      ee:	8f 81       	ldd	r24, Y+7	; 0x07
      f0:	98 85       	ldd	r25, Y+8	; 0x08
      f2:	fc 01       	movw	r30, r24
      f4:	e2 0f       	add	r30, r18
      f6:	f3 1f       	adc	r31, r19
      f8:	80 81       	ld	r24, Z
      fa:	88 23       	and	r24, r24
      fc:	91 f5       	brne	.+100    	; 0x162 <searchFor+0xd0>
		{
			for (j=0;j<size;j++)
      fe:	1a 82       	std	Y+2, r1	; 0x02
     100:	19 82       	std	Y+1, r1	; 0x01
     102:	1a c0       	rjmp	.+52     	; 0x138 <searchFor+0xa6>
			{
				arr[j]=array[i+1+j];
     104:	49 81       	ldd	r20, Y+1	; 0x01
     106:	5a 81       	ldd	r21, Y+2	; 0x02
     108:	2b 81       	ldd	r18, Y+3	; 0x03
     10a:	3c 81       	ldd	r19, Y+4	; 0x04
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	9a 81       	ldd	r25, Y+2	; 0x02
     110:	82 0f       	add	r24, r18
     112:	93 1f       	adc	r25, r19
     114:	9c 01       	movw	r18, r24
     116:	2f 5f       	subi	r18, 0xFF	; 255
     118:	3f 4f       	sbci	r19, 0xFF	; 255
     11a:	8d 81       	ldd	r24, Y+5	; 0x05
     11c:	9e 81       	ldd	r25, Y+6	; 0x06
     11e:	fc 01       	movw	r30, r24
     120:	e2 0f       	add	r30, r18
     122:	f3 1f       	adc	r31, r19
     124:	80 81       	ld	r24, Z
     126:	fa 01       	movw	r30, r20
     128:	ec 55       	subi	r30, 0x5C	; 92
     12a:	fd 4f       	sbci	r31, 0xFD	; 253
     12c:	80 83       	st	Z, r24

	if ( string[j]== array[i])
	{
		if ( string[j+1]=='\0')
		{
			for (j=0;j<size;j++)
     12e:	89 81       	ldd	r24, Y+1	; 0x01
     130:	9a 81       	ldd	r25, Y+2	; 0x02
     132:	01 96       	adiw	r24, 0x01	; 1
     134:	9a 83       	std	Y+2, r25	; 0x02
     136:	89 83       	std	Y+1, r24	; 0x01
     138:	89 85       	ldd	r24, Y+9	; 0x09
     13a:	28 2f       	mov	r18, r24
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	9a 81       	ldd	r25, Y+2	; 0x02
     142:	82 17       	cp	r24, r18
     144:	93 07       	cpc	r25, r19
     146:	f0 f2       	brcs	.-68     	; 0x104 <searchFor+0x72>
			{
				arr[j]=array[i+1+j];
			}

			arr[j]='\0';
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	9a 81       	ldd	r25, Y+2	; 0x02
     14c:	fc 01       	movw	r30, r24
     14e:	ec 55       	subi	r30, 0x5C	; 92
     150:	fd 4f       	sbci	r31, 0xFD	; 253
     152:	10 82       	st	Z, r1
			j=0;
     154:	1a 82       	std	Y+2, r1	; 0x02
     156:	19 82       	std	Y+1, r1	; 0x01

			return arr;
     158:	84 ea       	ldi	r24, 0xA4	; 164
     15a:	92 e0       	ldi	r25, 0x02	; 2
     15c:	9b 87       	std	Y+11, r25	; 0x0b
     15e:	8a 87       	std	Y+10, r24	; 0x0a
     160:	17 c0       	rjmp	.+46     	; 0x190 <searchFor+0xfe>
		}
		j++;
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	9a 81       	ldd	r25, Y+2	; 0x02
     166:	01 96       	adiw	r24, 0x01	; 1
     168:	9a 83       	std	Y+2, r25	; 0x02
     16a:	89 83       	std	Y+1, r24	; 0x01
uint8 *  searchFor (uint8 *array, uint8* string,uint8 size )
{
	 uint16 i=0,j=0;
	 static uint8 arr[10];

for ( i =0;array[i]!='!';i++)
     16c:	8b 81       	ldd	r24, Y+3	; 0x03
     16e:	9c 81       	ldd	r25, Y+4	; 0x04
     170:	01 96       	adiw	r24, 0x01	; 1
     172:	9c 83       	std	Y+4, r25	; 0x04
     174:	8b 83       	std	Y+3, r24	; 0x03
     176:	2d 81       	ldd	r18, Y+5	; 0x05
     178:	3e 81       	ldd	r19, Y+6	; 0x06
     17a:	8b 81       	ldd	r24, Y+3	; 0x03
     17c:	9c 81       	ldd	r25, Y+4	; 0x04
     17e:	f9 01       	movw	r30, r18
     180:	e8 0f       	add	r30, r24
     182:	f9 1f       	adc	r31, r25
     184:	80 81       	ld	r24, Z
     186:	81 32       	cpi	r24, 0x21	; 33
     188:	09 f0       	breq	.+2      	; 0x18c <searchFor+0xfa>
     18a:	99 cf       	rjmp	.-206    	; 0xbe <searchFor+0x2c>
		j++;

	}

}
return 0;
     18c:	1b 86       	std	Y+11, r1	; 0x0b
     18e:	1a 86       	std	Y+10, r1	; 0x0a
     190:	8a 85       	ldd	r24, Y+10	; 0x0a
     192:	9b 85       	ldd	r25, Y+11	; 0x0b


}
     194:	2b 96       	adiw	r28, 0x0b	; 11
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	cd bf       	out	0x3d, r28	; 61
     1a0:	cf 91       	pop	r28
     1a2:	df 91       	pop	r29
     1a4:	08 95       	ret

000001a6 <copyString>:

void copyString ( uint8 * string , uint8 * stringToCopy )
{
     1a6:	df 93       	push	r29
     1a8:	cf 93       	push	r28
     1aa:	00 d0       	rcall	.+0      	; 0x1ac <copyString+0x6>
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <copyString+0x8>
     1ae:	00 d0       	rcall	.+0      	; 0x1b0 <copyString+0xa>
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	9c 83       	std	Y+4, r25	; 0x04
     1b6:	8b 83       	std	Y+3, r24	; 0x03
     1b8:	7e 83       	std	Y+6, r23	; 0x06
     1ba:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t i,j;

	for ( j =0; string[j] != '\0' ; j++ )
     1bc:	19 82       	std	Y+1, r1	; 0x01
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <copyString+0x20>
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	8f 5f       	subi	r24, 0xFF	; 255
     1c4:	89 83       	std	Y+1, r24	; 0x01
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	28 2f       	mov	r18, r24
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	fc 01       	movw	r30, r24
     1d2:	e2 0f       	add	r30, r18
     1d4:	f3 1f       	adc	r31, r19
     1d6:	80 81       	ld	r24, Z
     1d8:	88 23       	and	r24, r24
     1da:	91 f7       	brne	.-28     	; 0x1c0 <copyString+0x1a>
	{}
	for (  i =0; stringToCopy[i] != '\0' ;i++)
     1dc:	1a 82       	std	Y+2, r1	; 0x02
     1de:	1b c0       	rjmp	.+54     	; 0x216 <copyString+0x70>
	{
		string[i+j] = stringToCopy[i];
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	28 2f       	mov	r18, r24
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	88 2f       	mov	r24, r24
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	82 0f       	add	r24, r18
     1ee:	93 1f       	adc	r25, r19
     1f0:	9c 01       	movw	r18, r24
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	9c 81       	ldd	r25, Y+4	; 0x04
     1f6:	dc 01       	movw	r26, r24
     1f8:	a2 0f       	add	r26, r18
     1fa:	b3 1f       	adc	r27, r19
     1fc:	8a 81       	ldd	r24, Y+2	; 0x02
     1fe:	28 2f       	mov	r18, r24
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	9e 81       	ldd	r25, Y+6	; 0x06
     206:	fc 01       	movw	r30, r24
     208:	e2 0f       	add	r30, r18
     20a:	f3 1f       	adc	r31, r19
     20c:	80 81       	ld	r24, Z
     20e:	8c 93       	st	X, r24
{
	uint8_t i,j;

	for ( j =0; string[j] != '\0' ; j++ )
	{}
	for (  i =0; stringToCopy[i] != '\0' ;i++)
     210:	8a 81       	ldd	r24, Y+2	; 0x02
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	8a 83       	std	Y+2, r24	; 0x02
     216:	8a 81       	ldd	r24, Y+2	; 0x02
     218:	28 2f       	mov	r18, r24
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	8d 81       	ldd	r24, Y+5	; 0x05
     21e:	9e 81       	ldd	r25, Y+6	; 0x06
     220:	fc 01       	movw	r30, r24
     222:	e2 0f       	add	r30, r18
     224:	f3 1f       	adc	r31, r19
     226:	80 81       	ld	r24, Z
     228:	88 23       	and	r24, r24
     22a:	d1 f6       	brne	.-76     	; 0x1e0 <copyString+0x3a>
	{
		string[i+j] = stringToCopy[i];
	}
	string[i+j] = '\0';
     22c:	8a 81       	ldd	r24, Y+2	; 0x02
     22e:	28 2f       	mov	r18, r24
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	88 2f       	mov	r24, r24
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	9c 01       	movw	r18, r24
     23e:	8b 81       	ldd	r24, Y+3	; 0x03
     240:	9c 81       	ldd	r25, Y+4	; 0x04
     242:	fc 01       	movw	r30, r24
     244:	e2 0f       	add	r30, r18
     246:	f3 1f       	adc	r31, r19
     248:	10 82       	st	Z, r1
}
     24a:	26 96       	adiw	r28, 0x06	; 6
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	cf 91       	pop	r28
     258:	df 91       	pop	r29
     25a:	08 95       	ret

0000025c <strToInt>:

uint16 strToInt ( uint8 * str )
{
     25c:	df 93       	push	r29
     25e:	cf 93       	push	r28
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	28 97       	sbiw	r28, 0x08	; 8
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	98 87       	std	Y+8, r25	; 0x08
     272:	8f 83       	std	Y+7, r24	; 0x07
	uint8 i=0,j=0;
     274:	1e 82       	std	Y+6, r1	; 0x06
     276:	1d 82       	std	Y+5, r1	; 0x05
	uint16 num=0;
     278:	1c 82       	std	Y+4, r1	; 0x04
     27a:	1b 82       	std	Y+3, r1	; 0x03
	for (i=0;str[i]!='\"';i++);
     27c:	1e 82       	std	Y+6, r1	; 0x06
     27e:	03 c0       	rjmp	.+6      	; 0x286 <strToInt+0x2a>
     280:	8e 81       	ldd	r24, Y+6	; 0x06
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	8e 83       	std	Y+6, r24	; 0x06
     286:	8e 81       	ldd	r24, Y+6	; 0x06
     288:	28 2f       	mov	r18, r24
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	8f 81       	ldd	r24, Y+7	; 0x07
     28e:	98 85       	ldd	r25, Y+8	; 0x08
     290:	fc 01       	movw	r30, r24
     292:	e2 0f       	add	r30, r18
     294:	f3 1f       	adc	r31, r19
     296:	80 81       	ld	r24, Z
     298:	82 32       	cpi	r24, 0x22	; 34
     29a:	91 f7       	brne	.-28     	; 0x280 <strToInt+0x24>

	uint16 weight =1;
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	89 83       	std	Y+1, r24	; 0x01
	for (j=1;j<i;j++)
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	8d 83       	std	Y+5, r24	; 0x05
     2a8:	11 c0       	rjmp	.+34     	; 0x2cc <strToInt+0x70>
	{
		weight *=10;
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	9a 81       	ldd	r25, Y+2	; 0x02
     2ae:	9c 01       	movw	r18, r24
     2b0:	22 0f       	add	r18, r18
     2b2:	33 1f       	adc	r19, r19
     2b4:	c9 01       	movw	r24, r18
     2b6:	88 0f       	add	r24, r24
     2b8:	99 1f       	adc	r25, r25
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	82 0f       	add	r24, r18
     2c0:	93 1f       	adc	r25, r19
     2c2:	9a 83       	std	Y+2, r25	; 0x02
     2c4:	89 83       	std	Y+1, r24	; 0x01
	uint8 i=0,j=0;
	uint16 num=0;
	for (i=0;str[i]!='\"';i++);

	uint16 weight =1;
	for (j=1;j<i;j++)
     2c6:	8d 81       	ldd	r24, Y+5	; 0x05
     2c8:	8f 5f       	subi	r24, 0xFF	; 255
     2ca:	8d 83       	std	Y+5, r24	; 0x05
     2cc:	9d 81       	ldd	r25, Y+5	; 0x05
     2ce:	8e 81       	ldd	r24, Y+6	; 0x06
     2d0:	98 17       	cp	r25, r24
     2d2:	58 f3       	brcs	.-42     	; 0x2aa <strToInt+0x4e>
	{
		weight *=10;
	}

	for ( j=0;j<(i-1);j++)
     2d4:	1d 82       	std	Y+5, r1	; 0x05
     2d6:	2a c0       	rjmp	.+84     	; 0x32c <strToInt+0xd0>
	{
	num += (str[j]-48)*weight;
     2d8:	8d 81       	ldd	r24, Y+5	; 0x05
     2da:	28 2f       	mov	r18, r24
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	8f 81       	ldd	r24, Y+7	; 0x07
     2e0:	98 85       	ldd	r25, Y+8	; 0x08
     2e2:	fc 01       	movw	r30, r24
     2e4:	e2 0f       	add	r30, r18
     2e6:	f3 1f       	adc	r31, r19
     2e8:	80 81       	ld	r24, Z
     2ea:	88 2f       	mov	r24, r24
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	c0 97       	sbiw	r24, 0x30	; 48
     2f0:	9c 01       	movw	r18, r24
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	9a 81       	ldd	r25, Y+2	; 0x02
     2f6:	a9 01       	movw	r20, r18
     2f8:	48 9f       	mul	r20, r24
     2fa:	90 01       	movw	r18, r0
     2fc:	49 9f       	mul	r20, r25
     2fe:	30 0d       	add	r19, r0
     300:	58 9f       	mul	r21, r24
     302:	30 0d       	add	r19, r0
     304:	11 24       	eor	r1, r1
     306:	8b 81       	ldd	r24, Y+3	; 0x03
     308:	9c 81       	ldd	r25, Y+4	; 0x04
     30a:	82 0f       	add	r24, r18
     30c:	93 1f       	adc	r25, r19
     30e:	9c 83       	std	Y+4, r25	; 0x04
     310:	8b 83       	std	Y+3, r24	; 0x03
	weight /=10;
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	9a 81       	ldd	r25, Y+2	; 0x02
     316:	2a e0       	ldi	r18, 0x0A	; 10
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	b9 01       	movw	r22, r18
     31c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__udivmodhi4>
     320:	cb 01       	movw	r24, r22
     322:	9a 83       	std	Y+2, r25	; 0x02
     324:	89 83       	std	Y+1, r24	; 0x01
	for (j=1;j<i;j++)
	{
		weight *=10;
	}

	for ( j=0;j<(i-1);j++)
     326:	8d 81       	ldd	r24, Y+5	; 0x05
     328:	8f 5f       	subi	r24, 0xFF	; 255
     32a:	8d 83       	std	Y+5, r24	; 0x05
     32c:	8d 81       	ldd	r24, Y+5	; 0x05
     32e:	28 2f       	mov	r18, r24
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	8e 81       	ldd	r24, Y+6	; 0x06
     334:	88 2f       	mov	r24, r24
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	28 17       	cp	r18, r24
     33c:	39 07       	cpc	r19, r25
     33e:	64 f2       	brlt	.-104    	; 0x2d8 <strToInt+0x7c>
	{
	num += (str[j]-48)*weight;
	weight /=10;
	}
	num+=(str[j]-48);
     340:	8d 81       	ldd	r24, Y+5	; 0x05
     342:	28 2f       	mov	r18, r24
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	8f 81       	ldd	r24, Y+7	; 0x07
     348:	98 85       	ldd	r25, Y+8	; 0x08
     34a:	fc 01       	movw	r30, r24
     34c:	e2 0f       	add	r30, r18
     34e:	f3 1f       	adc	r31, r19
     350:	80 81       	ld	r24, Z
     352:	28 2f       	mov	r18, r24
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	8b 81       	ldd	r24, Y+3	; 0x03
     358:	9c 81       	ldd	r25, Y+4	; 0x04
     35a:	82 0f       	add	r24, r18
     35c:	93 1f       	adc	r25, r19
     35e:	c0 97       	sbiw	r24, 0x30	; 48
     360:	9c 83       	std	Y+4, r25	; 0x04
     362:	8b 83       	std	Y+3, r24	; 0x03

	return num;
     364:	8b 81       	ldd	r24, Y+3	; 0x03
     366:	9c 81       	ldd	r25, Y+4	; 0x04
}
     368:	28 96       	adiw	r28, 0x08	; 8
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
     374:	cf 91       	pop	r28
     376:	df 91       	pop	r29
     378:	08 95       	ret

0000037a <APP_TASK>:
	 GetIrrigationPeriod,
	 CheckIrrigationPeriod

 };
void APP_TASK()
{
     37a:	df 93       	push	r29
     37c:	cf 93       	push	r28
     37e:	00 d0       	rcall	.+0      	; 0x380 <APP_TASK+0x6>
     380:	00 d0       	rcall	.+0      	; 0x382 <APP_TASK+0x8>
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinDir(8,1);
     386:	88 e0       	ldi	r24, 0x08	; 8
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	0e 94 13 03 	call	0x626	; 0x626 <DIO_vidSetPinDir>
uint8 * buffer;
	static uint8 AppState =0;
	switch ( AppState )
     38e:	80 91 b3 02 	lds	r24, 0x02B3
     392:	28 2f       	mov	r18, r24
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	3c 83       	std	Y+4, r19	; 0x04
     398:	2b 83       	std	Y+3, r18	; 0x03
     39a:	8b 81       	ldd	r24, Y+3	; 0x03
     39c:	9c 81       	ldd	r25, Y+4	; 0x04
     39e:	82 30       	cpi	r24, 0x02	; 2
     3a0:	91 05       	cpc	r25, r1
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <APP_TASK+0x2c>
     3a4:	42 c0       	rjmp	.+132    	; 0x42a <APP_TASK+0xb0>
     3a6:	2b 81       	ldd	r18, Y+3	; 0x03
     3a8:	3c 81       	ldd	r19, Y+4	; 0x04
     3aa:	23 30       	cpi	r18, 0x03	; 3
     3ac:	31 05       	cpc	r19, r1
     3ae:	54 f4       	brge	.+20     	; 0x3c4 <APP_TASK+0x4a>
     3b0:	8b 81       	ldd	r24, Y+3	; 0x03
     3b2:	9c 81       	ldd	r25, Y+4	; 0x04
     3b4:	00 97       	sbiw	r24, 0x00	; 0
     3b6:	c9 f0       	breq	.+50     	; 0x3ea <APP_TASK+0x70>
     3b8:	2b 81       	ldd	r18, Y+3	; 0x03
     3ba:	3c 81       	ldd	r19, Y+4	; 0x04
     3bc:	21 30       	cpi	r18, 0x01	; 1
     3be:	31 05       	cpc	r19, r1
     3c0:	e9 f0       	breq	.+58     	; 0x3fc <APP_TASK+0x82>
     3c2:	c1 c0       	rjmp	.+386    	; 0x546 <APP_TASK+0x1cc>
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	84 30       	cpi	r24, 0x04	; 4
     3ca:	91 05       	cpc	r25, r1
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <APP_TASK+0x56>
     3ce:	77 c0       	rjmp	.+238    	; 0x4be <APP_TASK+0x144>
     3d0:	2b 81       	ldd	r18, Y+3	; 0x03
     3d2:	3c 81       	ldd	r19, Y+4	; 0x04
     3d4:	24 30       	cpi	r18, 0x04	; 4
     3d6:	31 05       	cpc	r19, r1
     3d8:	0c f4       	brge	.+2      	; 0x3dc <APP_TASK+0x62>
     3da:	4d c0       	rjmp	.+154    	; 0x476 <APP_TASK+0xfc>
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	9c 81       	ldd	r25, Y+4	; 0x04
     3e0:	85 30       	cpi	r24, 0x05	; 5
     3e2:	91 05       	cpc	r25, r1
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <APP_TASK+0x6e>
     3e6:	82 c0       	rjmp	.+260    	; 0x4ec <APP_TASK+0x172>
     3e8:	ae c0       	rjmp	.+348    	; 0x546 <APP_TASK+0x1cc>
	{

	case UpdateFromServer:
		if (  ESP8266_Example() )
     3ea:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <ESP8266_Example>
     3ee:	88 23       	and	r24, r24
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <APP_TASK+0x7a>
     3f2:	a9 c0       	rjmp	.+338    	; 0x546 <APP_TASK+0x1cc>
			AppState=GetDataId;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 b3 02 	sts	0x02B3, r24
     3fa:	a5 c0       	rjmp	.+330    	; 0x546 <APP_TASK+0x1cc>
	break;
	case GetDataId:
		ServerData[0]=0;
     3fc:	10 92 42 03 	sts	0x0342, r1
		buffer = searchFor( URxArray ,(uint8 *)"id\":\"",10);
     400:	85 e5       	ldi	r24, 0x55	; 85
     402:	93 e0       	ldi	r25, 0x03	; 3
     404:	20 e6       	ldi	r18, 0x60	; 96
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	b9 01       	movw	r22, r18
     40a:	4a e0       	ldi	r20, 0x0A	; 10
     40c:	0e 94 49 00 	call	0x92	; 0x92 <searchFor>
     410:	9a 83       	std	Y+2, r25	; 0x02
     412:	89 83       	std	Y+1, r24	; 0x01
		copyString(ServerData,buffer);
     414:	82 e4       	ldi	r24, 0x42	; 66
     416:	93 e0       	ldi	r25, 0x03	; 3
     418:	29 81       	ldd	r18, Y+1	; 0x01
     41a:	3a 81       	ldd	r19, Y+2	; 0x02
     41c:	b9 01       	movw	r22, r18
     41e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <copyString>
		AppState=CheckIfIDIsNew;
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	80 93 b3 02 	sts	0x02B3, r24
     428:	8e c0       	rjmp	.+284    	; 0x546 <APP_TASK+0x1cc>
	break;
	case CheckIfIDIsNew:

		id = strToInt(ServerData);
     42a:	82 e4       	ldi	r24, 0x42	; 66
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 2e 01 	call	0x25c	; 0x25c <strToInt>
     432:	90 93 af 02 	sts	0x02AF, r25
     436:	80 93 ae 02 	sts	0x02AE, r24

		if ( id > lastId )
     43a:	20 91 ae 02 	lds	r18, 0x02AE
     43e:	30 91 af 02 	lds	r19, 0x02AF
     442:	80 91 3f 03 	lds	r24, 0x033F
     446:	90 91 40 03 	lds	r25, 0x0340
     44a:	82 17       	cp	r24, r18
     44c:	93 07       	cpc	r25, r19
     44e:	60 f4       	brcc	.+24     	; 0x468 <APP_TASK+0xee>
		{

			lastId = id;
     450:	80 91 ae 02 	lds	r24, 0x02AE
     454:	90 91 af 02 	lds	r25, 0x02AF
     458:	90 93 40 03 	sts	0x0340, r25
     45c:	80 93 3f 03 	sts	0x033F, r24

			AppState=GetValveValue;
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	80 93 b3 02 	sts	0x02B3, r24
     466:	6f c0       	rjmp	.+222    	; 0x546 <APP_TASK+0x1cc>
		}else
		{
//
			DIO_vidWritePin(10 ,1);
     468:	8a e0       	ldi	r24, 0x0A	; 10
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	0e 94 28 05 	call	0xa50	; 0xa50 <DIO_vidWritePin>
			AppState=UpdateFromServer;
     470:	10 92 b3 02 	sts	0x02B3, r1
     474:	68 c0       	rjmp	.+208    	; 0x546 <APP_TASK+0x1cc>
		}
		break;
	case GetValveValue:
		DIO_vidSetPortDir(0,0xff);
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	6f ef       	ldi	r22, 0xFF	; 255
     47a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_vidSetPortDir>
		DIO_vidWritePort(0,lastId);
     47e:	80 91 3f 03 	lds	r24, 0x033F
     482:	90 91 40 03 	lds	r25, 0x0340
     486:	98 2f       	mov	r25, r24
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	69 2f       	mov	r22, r25
     48c:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_vidWritePort>
		ServerData[0]=0;
     490:	10 92 42 03 	sts	0x0342, r1
		buffer = searchFor(URxArray ,(uint8 *)"Valve\":\"",10);
     494:	85 e5       	ldi	r24, 0x55	; 85
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	26 e6       	ldi	r18, 0x66	; 102
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	b9 01       	movw	r22, r18
     49e:	4a e0       	ldi	r20, 0x0A	; 10
     4a0:	0e 94 49 00 	call	0x92	; 0x92 <searchFor>
     4a4:	9a 83       	std	Y+2, r25	; 0x02
     4a6:	89 83       	std	Y+1, r24	; 0x01
		copyString( ServerData,buffer);
     4a8:	82 e4       	ldi	r24, 0x42	; 66
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	29 81       	ldd	r18, Y+1	; 0x01
     4ae:	3a 81       	ldd	r19, Y+2	; 0x02
     4b0:	b9 01       	movw	r22, r18
     4b2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <copyString>
		AppState=CheckValveValue;
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	80 93 b3 02 	sts	0x02B3, r24
     4bc:	44 c0       	rjmp	.+136    	; 0x546 <APP_TASK+0x1cc>
		break;
	case CheckValveValue:

		if( ServerData[1]=='N')
     4be:	80 91 43 03 	lds	r24, 0x0343
     4c2:	8e 34       	cpi	r24, 0x4E	; 78
     4c4:	41 f4       	brne	.+16     	; 0x4d6 <APP_TASK+0x15c>
		{

			DIO_vidWritePin(8,1);
     4c6:	88 e0       	ldi	r24, 0x08	; 8
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	0e 94 28 05 	call	0xa50	; 0xa50 <DIO_vidWritePin>
			AppState=GetIrrigationPeriod;
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	80 93 b3 02 	sts	0x02B3, r24
     4d4:	38 c0       	rjmp	.+112    	; 0x546 <APP_TASK+0x1cc>
		}
		else
		{

			ValveCounter =0;
     4d6:	10 92 b1 02 	sts	0x02B1, r1
     4da:	10 92 b0 02 	sts	0x02B0, r1
			DIO_vidWritePin(8,0);
     4de:	88 e0       	ldi	r24, 0x08	; 8
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	0e 94 28 05 	call	0xa50	; 0xa50 <DIO_vidWritePin>
			AppState=UpdateFromServer;
     4e6:	10 92 b3 02 	sts	0x02B3, r1
     4ea:	2d c0       	rjmp	.+90     	; 0x546 <APP_TASK+0x1cc>
		}
		break;
	case GetIrrigationPeriod:
		ServerData[0]=0;
     4ec:	10 92 42 03 	sts	0x0342, r1
		buffer = searchFor(URxArray ,(uint8 *)"Period\":\"",10);
     4f0:	85 e5       	ldi	r24, 0x55	; 85
     4f2:	93 e0       	ldi	r25, 0x03	; 3
     4f4:	2f e6       	ldi	r18, 0x6F	; 111
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	b9 01       	movw	r22, r18
     4fa:	4a e0       	ldi	r20, 0x0A	; 10
     4fc:	0e 94 49 00 	call	0x92	; 0x92 <searchFor>
     500:	9a 83       	std	Y+2, r25	; 0x02
     502:	89 83       	std	Y+1, r24	; 0x01
		copyString( ServerData, buffer);
     504:	82 e4       	ldi	r24, 0x42	; 66
     506:	93 e0       	ldi	r25, 0x03	; 3
     508:	29 81       	ldd	r18, Y+1	; 0x01
     50a:	3a 81       	ldd	r19, Y+2	; 0x02
     50c:	b9 01       	movw	r22, r18
     50e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <copyString>
		ValveCounter = strToInt(ServerData);
     512:	82 e4       	ldi	r24, 0x42	; 66
     514:	93 e0       	ldi	r25, 0x03	; 3
     516:	0e 94 2e 01 	call	0x25c	; 0x25c <strToInt>
     51a:	90 93 b1 02 	sts	0x02B1, r25
     51e:	80 93 b0 02 	sts	0x02B0, r24
		counter=0;
     522:	10 92 2d 03 	sts	0x032D, r1
     526:	10 92 2e 03 	sts	0x032E, r1
     52a:	10 92 2f 03 	sts	0x032F, r1
     52e:	10 92 30 03 	sts	0x0330, r1
		SCounter=0;
     532:	10 92 31 03 	sts	0x0331, r1
     536:	10 92 32 03 	sts	0x0332, r1
     53a:	10 92 33 03 	sts	0x0333, r1
     53e:	10 92 34 03 	sts	0x0334, r1
		AppState=UpdateFromServer;
     542:	10 92 b3 02 	sts	0x02B3, r1
	default :break;

		break;
	}

}
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	cf 91       	pop	r28
     550:	df 91       	pop	r29
     552:	08 95       	ret

00000554 <IrrigationPeriodTask>:

void IrrigationPeriodTask ()
{
     554:	df 93       	push	r29
     556:	cf 93       	push	r28
     558:	00 d0       	rcall	.+0      	; 0x55a <IrrigationPeriodTask+0x6>
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
	static uint8 periodTask =CheckIrrigationPeriod;
switch ( periodTask )
     55e:	80 91 5b 01 	lds	r24, 0x015B
     562:	28 2f       	mov	r18, r24
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	3a 83       	std	Y+2, r19	; 0x02
     568:	29 83       	std	Y+1, r18	; 0x01
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	9a 81       	ldd	r25, Y+2	; 0x02
     56e:	00 97       	sbiw	r24, 0x00	; 0
     570:	09 f4       	brne	.+2      	; 0x574 <IrrigationPeriodTask+0x20>
     572:	44 c0       	rjmp	.+136    	; 0x5fc <IrrigationPeriodTask+0xa8>
     574:	29 81       	ldd	r18, Y+1	; 0x01
     576:	3a 81       	ldd	r19, Y+2	; 0x02
     578:	26 30       	cpi	r18, 0x06	; 6
     57a:	31 05       	cpc	r19, r1
     57c:	09 f0       	breq	.+2      	; 0x580 <IrrigationPeriodTask+0x2c>
     57e:	47 c0       	rjmp	.+142    	; 0x60e <IrrigationPeriodTask+0xba>
{
case CheckIrrigationPeriod:

	DIO_vidSetPortDir(2,0xff);
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	6f ef       	ldi	r22, 0xFF	; 255
     584:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_vidSetPortDir>
			DIO_vidWritePort(2,ValveCounter);
     588:	80 91 b0 02 	lds	r24, 0x02B0
     58c:	90 91 b1 02 	lds	r25, 0x02B1
     590:	98 2f       	mov	r25, r24
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	69 2f       	mov	r22, r25
     596:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_vidWritePort>
	if ( ValveCounter > 0)
     59a:	80 91 b0 02 	lds	r24, 0x02B0
     59e:	90 91 b1 02 	lds	r25, 0x02B1
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	11 f1       	breq	.+68     	; 0x5ea <IrrigationPeriodTask+0x96>
	{

		DIO_vidWritePin(8,1);
     5a6:	88 e0       	ldi	r24, 0x08	; 8
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	0e 94 28 05 	call	0xa50	; 0xa50 <DIO_vidWritePin>
		IrrigationFlag=1;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	80 93 b2 02 	sts	0x02B2, r24
		if ( SCounter >ValveCounter)
     5b4:	80 91 b0 02 	lds	r24, 0x02B0
     5b8:	90 91 b1 02 	lds	r25, 0x02B1
     5bc:	9c 01       	movw	r18, r24
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	80 91 31 03 	lds	r24, 0x0331
     5c6:	90 91 32 03 	lds	r25, 0x0332
     5ca:	a0 91 33 03 	lds	r26, 0x0333
     5ce:	b0 91 34 03 	lds	r27, 0x0334
     5d2:	28 17       	cp	r18, r24
     5d4:	39 07       	cpc	r19, r25
     5d6:	4a 07       	cpc	r20, r26
     5d8:	5b 07       	cpc	r21, r27
     5da:	c8 f4       	brcc	.+50     	; 0x60e <IrrigationPeriodTask+0xba>
		{
			IrrigationFlag=0;
     5dc:	10 92 b2 02 	sts	0x02B2, r1
			DIO_vidWritePin(8,0);
     5e0:	88 e0       	ldi	r24, 0x08	; 8
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	0e 94 28 05 	call	0xa50	; 0xa50 <DIO_vidWritePin>
     5e8:	12 c0       	rjmp	.+36     	; 0x60e <IrrigationPeriodTask+0xba>
		}

	}else
	{
		IrrigationFlag=0;
     5ea:	10 92 b2 02 	sts	0x02B2, r1
		DIO_vidWritePin(8,0);
     5ee:	88 e0       	ldi	r24, 0x08	; 8
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	0e 94 28 05 	call	0xa50	; 0xa50 <DIO_vidWritePin>
		periodTask= Wait;
     5f6:	10 92 5b 01 	sts	0x015B, r1
     5fa:	09 c0       	rjmp	.+18     	; 0x60e <IrrigationPeriodTask+0xba>
	}
		break;
case Wait:
	if ( ValveCounter > 0)
     5fc:	80 91 b0 02 	lds	r24, 0x02B0
     600:	90 91 b1 02 	lds	r25, 0x02B1
     604:	00 97       	sbiw	r24, 0x00	; 0
     606:	19 f0       	breq	.+6      	; 0x60e <IrrigationPeriodTask+0xba>
		periodTask= CheckIrrigationPeriod;
     608:	86 e0       	ldi	r24, 0x06	; 6
     60a:	80 93 5b 01 	sts	0x015B, r24
	break;

}
}
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	cf 91       	pop	r28
     614:	df 91       	pop	r29
     616:	08 95       	ret

00000618 <DIO_vidInit>:
 */


#include "DIO.h"

void DIO_vidInit(){}
     618:	df 93       	push	r29
     61a:	cf 93       	push	r28
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	cf 91       	pop	r28
     622:	df 91       	pop	r29
     624:	08 95       	ret

00000626 <DIO_vidSetPinDir>:
//////////////////////////////
void DIO_vidSetPinDir(uint8 U8PinNum, uint8 U8Dir)

{
     626:	df 93       	push	r29
     628:	cf 93       	push	r28
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	61 97       	sbiw	r28, 0x11	; 17
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	8a 83       	std	Y+2, r24	; 0x02
     63c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin = U8PinNum % PIN_P_PORT;
     63e:	8a 81       	ldd	r24, Y+2	; 0x02
     640:	87 70       	andi	r24, 0x07	; 7
     642:	89 83       	std	Y+1, r24	; 0x01
	switch( U8PinNum / PIN_P_PORT)
     644:	8a 81       	ldd	r24, Y+2	; 0x02
     646:	86 95       	lsr	r24
     648:	86 95       	lsr	r24
     64a:	86 95       	lsr	r24
     64c:	28 2f       	mov	r18, r24
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	39 8b       	std	Y+17, r19	; 0x11
     652:	28 8b       	std	Y+16, r18	; 0x10
     654:	88 89       	ldd	r24, Y+16	; 0x10
     656:	99 89       	ldd	r25, Y+17	; 0x11
     658:	81 30       	cpi	r24, 0x01	; 1
     65a:	91 05       	cpc	r25, r1
     65c:	09 f4       	brne	.+2      	; 0x660 <DIO_vidSetPinDir+0x3a>
     65e:	47 c0       	rjmp	.+142    	; 0x6ee <DIO_vidSetPinDir+0xc8>
     660:	e8 89       	ldd	r30, Y+16	; 0x10
     662:	f9 89       	ldd	r31, Y+17	; 0x11
     664:	e2 30       	cpi	r30, 0x02	; 2
     666:	f1 05       	cpc	r31, r1
     668:	34 f4       	brge	.+12     	; 0x676 <DIO_vidSetPinDir+0x50>
     66a:	28 89       	ldd	r18, Y+16	; 0x10
     66c:	39 89       	ldd	r19, Y+17	; 0x11
     66e:	21 15       	cp	r18, r1
     670:	31 05       	cpc	r19, r1
     672:	71 f0       	breq	.+28     	; 0x690 <DIO_vidSetPinDir+0x6a>
     674:	c8 c0       	rjmp	.+400    	; 0x806 <DIO_vidSetPinDir+0x1e0>
     676:	88 89       	ldd	r24, Y+16	; 0x10
     678:	99 89       	ldd	r25, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	91 05       	cpc	r25, r1
     67e:	09 f4       	brne	.+2      	; 0x682 <DIO_vidSetPinDir+0x5c>
     680:	65 c0       	rjmp	.+202    	; 0x74c <DIO_vidSetPinDir+0x126>
     682:	e8 89       	ldd	r30, Y+16	; 0x10
     684:	f9 89       	ldd	r31, Y+17	; 0x11
     686:	e3 30       	cpi	r30, 0x03	; 3
     688:	f1 05       	cpc	r31, r1
     68a:	09 f4       	brne	.+2      	; 0x68e <DIO_vidSetPinDir+0x68>
     68c:	8e c0       	rjmp	.+284    	; 0x7aa <DIO_vidSetPinDir+0x184>
     68e:	bb c0       	rjmp	.+374    	; 0x806 <DIO_vidSetPinDir+0x1e0>
	{
	case PORT0 :ASSIGN_BIT(DDRA,pin,U8Dir);
     690:	2a e3       	ldi	r18, 0x3A	; 58
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	3f 87       	std	Y+15, r19	; 0x0f
     696:	2e 87       	std	Y+14, r18	; 0x0e
     698:	8b 81       	ldd	r24, Y+3	; 0x03
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	91 f4       	brne	.+36     	; 0x6c2 <DIO_vidSetPinDir+0x9c>
     69e:	ea e3       	ldi	r30, 0x3A	; 58
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	48 2f       	mov	r20, r24
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	28 2f       	mov	r18, r24
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	02 2e       	mov	r0, r18
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_vidSetPinDir+0x92>
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	0a 94       	dec	r0
     6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <DIO_vidSetPinDir+0x8e>
     6bc:	84 2b       	or	r24, r20
     6be:	8d 87       	std	Y+13, r24	; 0x0d
     6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <DIO_vidSetPinDir+0xbe>
     6c2:	ea e3       	ldi	r30, 0x3A	; 58
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
     6c8:	48 2f       	mov	r20, r24
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	28 2f       	mov	r18, r24
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_vidSetPinDir+0xb4>
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	2a 95       	dec	r18
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_vidSetPinDir+0xb0>
     6de:	80 95       	com	r24
     6e0:	84 23       	and	r24, r20
     6e2:	8d 87       	std	Y+13, r24	; 0x0d
     6e4:	2d 85       	ldd	r18, Y+13	; 0x0d
     6e6:	ee 85       	ldd	r30, Y+14	; 0x0e
     6e8:	ff 85       	ldd	r31, Y+15	; 0x0f
     6ea:	20 83       	st	Z, r18
     6ec:	8c c0       	rjmp	.+280    	; 0x806 <DIO_vidSetPinDir+0x1e0>
			break;
	case PORT1 :ASSIGN_BIT(DDRB,pin,U8Dir);
     6ee:	87 e3       	ldi	r24, 0x37	; 55
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	9c 87       	std	Y+12, r25	; 0x0c
     6f4:	8b 87       	std	Y+11, r24	; 0x0b
     6f6:	8b 81       	ldd	r24, Y+3	; 0x03
     6f8:	81 30       	cpi	r24, 0x01	; 1
     6fa:	91 f4       	brne	.+36     	; 0x720 <DIO_vidSetPinDir+0xfa>
     6fc:	e7 e3       	ldi	r30, 0x37	; 55
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 81       	ld	r24, Z
     702:	48 2f       	mov	r20, r24
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	28 2f       	mov	r18, r24
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	02 2e       	mov	r0, r18
     710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_vidSetPinDir+0xf0>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	0a 94       	dec	r0
     718:	e2 f7       	brpl	.-8      	; 0x712 <DIO_vidSetPinDir+0xec>
     71a:	84 2b       	or	r24, r20
     71c:	8a 87       	std	Y+10, r24	; 0x0a
     71e:	11 c0       	rjmp	.+34     	; 0x742 <DIO_vidSetPinDir+0x11c>
     720:	e7 e3       	ldi	r30, 0x37	; 55
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	48 2f       	mov	r20, r24
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	28 2f       	mov	r18, r24
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_vidSetPinDir+0x112>
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	2a 95       	dec	r18
     73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_vidSetPinDir+0x10e>
     73c:	80 95       	com	r24
     73e:	84 23       	and	r24, r20
     740:	8a 87       	std	Y+10, r24	; 0x0a
     742:	2a 85       	ldd	r18, Y+10	; 0x0a
     744:	eb 85       	ldd	r30, Y+11	; 0x0b
     746:	fc 85       	ldd	r31, Y+12	; 0x0c
     748:	20 83       	st	Z, r18
     74a:	5d c0       	rjmp	.+186    	; 0x806 <DIO_vidSetPinDir+0x1e0>
			break;
	case PORT2 :ASSIGN_BIT(DDRC,pin,U8Dir);
     74c:	84 e3       	ldi	r24, 0x34	; 52
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	99 87       	std	Y+9, r25	; 0x09
     752:	88 87       	std	Y+8, r24	; 0x08
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	91 f4       	brne	.+36     	; 0x77e <DIO_vidSetPinDir+0x158>
     75a:	e4 e3       	ldi	r30, 0x34	; 52
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	48 2f       	mov	r20, r24
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	28 2f       	mov	r18, r24
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	02 2e       	mov	r0, r18
     76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_vidSetPinDir+0x14e>
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	0a 94       	dec	r0
     776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_vidSetPinDir+0x14a>
     778:	84 2b       	or	r24, r20
     77a:	8f 83       	std	Y+7, r24	; 0x07
     77c:	11 c0       	rjmp	.+34     	; 0x7a0 <DIO_vidSetPinDir+0x17a>
     77e:	e4 e3       	ldi	r30, 0x34	; 52
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	48 2f       	mov	r20, r24
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	28 2f       	mov	r18, r24
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_vidSetPinDir+0x170>
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	2a 95       	dec	r18
     798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_vidSetPinDir+0x16c>
     79a:	80 95       	com	r24
     79c:	84 23       	and	r24, r20
     79e:	8f 83       	std	Y+7, r24	; 0x07
     7a0:	2f 81       	ldd	r18, Y+7	; 0x07
     7a2:	e8 85       	ldd	r30, Y+8	; 0x08
     7a4:	f9 85       	ldd	r31, Y+9	; 0x09
     7a6:	20 83       	st	Z, r18
     7a8:	2e c0       	rjmp	.+92     	; 0x806 <DIO_vidSetPinDir+0x1e0>
			break;
	case PORT3 :ASSIGN_BIT(DDRD,pin,U8Dir);
     7aa:	81 e3       	ldi	r24, 0x31	; 49
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9e 83       	std	Y+6, r25	; 0x06
     7b0:	8d 83       	std	Y+5, r24	; 0x05
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	91 f4       	brne	.+36     	; 0x7dc <DIO_vidSetPinDir+0x1b6>
     7b8:	e1 e3       	ldi	r30, 0x31	; 49
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	48 2f       	mov	r20, r24
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	28 2f       	mov	r18, r24
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	02 2e       	mov	r0, r18
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <DIO_vidSetPinDir+0x1ac>
     7ce:	88 0f       	add	r24, r24
     7d0:	99 1f       	adc	r25, r25
     7d2:	0a 94       	dec	r0
     7d4:	e2 f7       	brpl	.-8      	; 0x7ce <DIO_vidSetPinDir+0x1a8>
     7d6:	84 2b       	or	r24, r20
     7d8:	8c 83       	std	Y+4, r24	; 0x04
     7da:	11 c0       	rjmp	.+34     	; 0x7fe <DIO_vidSetPinDir+0x1d8>
     7dc:	e1 e3       	ldi	r30, 0x31	; 49
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	48 2f       	mov	r20, r24
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	28 2f       	mov	r18, r24
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_vidSetPinDir+0x1ce>
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	2a 95       	dec	r18
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_vidSetPinDir+0x1ca>
     7f8:	80 95       	com	r24
     7fa:	84 23       	and	r24, r20
     7fc:	8c 83       	std	Y+4, r24	; 0x04
     7fe:	2c 81       	ldd	r18, Y+4	; 0x04
     800:	ed 81       	ldd	r30, Y+5	; 0x05
     802:	fe 81       	ldd	r31, Y+6	; 0x06
     804:	20 83       	st	Z, r18
			break;
	}
}
     806:	61 96       	adiw	r28, 0x11	; 17
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
     812:	cf 91       	pop	r28
     814:	df 91       	pop	r29
     816:	08 95       	ret

00000818 <DIO_vidSetNibbleDir>:
void DIO_vidSetNibbleDir(uint8 U8PortNum,uint8 U8nibbleDirection ,uint8 U8Dir)
{
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	29 97       	sbiw	r28, 0x09	; 9
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	89 83       	std	Y+1, r24	; 0x01
     82e:	6a 83       	std	Y+2, r22	; 0x02
     830:	4b 83       	std	Y+3, r20	; 0x03
	switch( U8nibbleDirection )
     832:	8a 81       	ldd	r24, Y+2	; 0x02
     834:	28 2f       	mov	r18, r24
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	39 87       	std	Y+9, r19	; 0x09
     83a:	28 87       	std	Y+8, r18	; 0x08
     83c:	88 85       	ldd	r24, Y+8	; 0x08
     83e:	99 85       	ldd	r25, Y+9	; 0x09
     840:	00 97       	sbiw	r24, 0x00	; 0
     842:	39 f0       	breq	.+14     	; 0x852 <DIO_vidSetNibbleDir+0x3a>
     844:	28 85       	ldd	r18, Y+8	; 0x08
     846:	39 85       	ldd	r19, Y+9	; 0x09
     848:	21 30       	cpi	r18, 0x01	; 1
     84a:	31 05       	cpc	r19, r1
     84c:	09 f4       	brne	.+2      	; 0x850 <DIO_vidSetNibbleDir+0x38>
     84e:	4c c0       	rjmp	.+152    	; 0x8e8 <__stack+0x89>
     850:	b5 c0       	rjmp	.+362    	; 0x9bc <__stack+0x15d>
			{
			case NIBBLE_LOW :

				switch( U8PortNum )
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	28 2f       	mov	r18, r24
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	3f 83       	std	Y+7, r19	; 0x07
     85a:	2e 83       	std	Y+6, r18	; 0x06
     85c:	8e 81       	ldd	r24, Y+6	; 0x06
     85e:	9f 81       	ldd	r25, Y+7	; 0x07
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	91 05       	cpc	r25, r1
     864:	01 f1       	breq	.+64     	; 0x8a6 <__stack+0x47>
     866:	2e 81       	ldd	r18, Y+6	; 0x06
     868:	3f 81       	ldd	r19, Y+7	; 0x07
     86a:	22 30       	cpi	r18, 0x02	; 2
     86c:	31 05       	cpc	r19, r1
     86e:	2c f4       	brge	.+10     	; 0x87a <__stack+0x1b>
     870:	8e 81       	ldd	r24, Y+6	; 0x06
     872:	9f 81       	ldd	r25, Y+7	; 0x07
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	61 f0       	breq	.+24     	; 0x890 <__stack+0x31>
     878:	a1 c0       	rjmp	.+322    	; 0x9bc <__stack+0x15d>
     87a:	2e 81       	ldd	r18, Y+6	; 0x06
     87c:	3f 81       	ldd	r19, Y+7	; 0x07
     87e:	22 30       	cpi	r18, 0x02	; 2
     880:	31 05       	cpc	r19, r1
     882:	e1 f0       	breq	.+56     	; 0x8bc <__stack+0x5d>
     884:	8e 81       	ldd	r24, Y+6	; 0x06
     886:	9f 81       	ldd	r25, Y+7	; 0x07
     888:	83 30       	cpi	r24, 0x03	; 3
     88a:	91 05       	cpc	r25, r1
     88c:	11 f1       	breq	.+68     	; 0x8d2 <__stack+0x73>
     88e:	96 c0       	rjmp	.+300    	; 0x9bc <__stack+0x15d>
							{
							case PORT0 :ASSIGN_L_NIB(DDRA,U8Dir);
     890:	aa e3       	ldi	r26, 0x3A	; 58
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	ea e3       	ldi	r30, 0x3A	; 58
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	98 2f       	mov	r25, r24
     89c:	90 7f       	andi	r25, 0xF0	; 240
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	89 2b       	or	r24, r25
     8a2:	8c 93       	st	X, r24
     8a4:	8b c0       	rjmp	.+278    	; 0x9bc <__stack+0x15d>
									break;
							case PORT1 :ASSIGN_L_NIB(DDRB,U8Dir);
     8a6:	a7 e3       	ldi	r26, 0x37	; 55
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e7 e3       	ldi	r30, 0x37	; 55
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	98 2f       	mov	r25, r24
     8b2:	90 7f       	andi	r25, 0xF0	; 240
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	89 2b       	or	r24, r25
     8b8:	8c 93       	st	X, r24
     8ba:	80 c0       	rjmp	.+256    	; 0x9bc <__stack+0x15d>
									break;
							case PORT2 :ASSIGN_L_NIB(DDRC,U8Dir);
     8bc:	a4 e3       	ldi	r26, 0x34	; 52
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	e4 e3       	ldi	r30, 0x34	; 52
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	98 2f       	mov	r25, r24
     8c8:	90 7f       	andi	r25, 0xF0	; 240
     8ca:	8b 81       	ldd	r24, Y+3	; 0x03
     8cc:	89 2b       	or	r24, r25
     8ce:	8c 93       	st	X, r24
     8d0:	75 c0       	rjmp	.+234    	; 0x9bc <__stack+0x15d>
									break;
							case PORT3 :ASSIGN_L_NIB(DDRD,U8Dir);
     8d2:	a1 e3       	ldi	r26, 0x31	; 49
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	e1 e3       	ldi	r30, 0x31	; 49
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	98 2f       	mov	r25, r24
     8de:	90 7f       	andi	r25, 0xF0	; 240
     8e0:	8b 81       	ldd	r24, Y+3	; 0x03
     8e2:	89 2b       	or	r24, r25
     8e4:	8c 93       	st	X, r24
     8e6:	6a c0       	rjmp	.+212    	; 0x9bc <__stack+0x15d>
									break;
							}
					break;

			case NIBBLE_HIGH :
				switch( U8PortNum )
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	28 2f       	mov	r18, r24
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	3d 83       	std	Y+5, r19	; 0x05
     8f0:	2c 83       	std	Y+4, r18	; 0x04
     8f2:	8c 81       	ldd	r24, Y+4	; 0x04
     8f4:	9d 81       	ldd	r25, Y+5	; 0x05
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	91 05       	cpc	r25, r1
     8fa:	41 f1       	breq	.+80     	; 0x94c <__stack+0xed>
     8fc:	2c 81       	ldd	r18, Y+4	; 0x04
     8fe:	3d 81       	ldd	r19, Y+5	; 0x05
     900:	22 30       	cpi	r18, 0x02	; 2
     902:	31 05       	cpc	r19, r1
     904:	2c f4       	brge	.+10     	; 0x910 <__stack+0xb1>
     906:	8c 81       	ldd	r24, Y+4	; 0x04
     908:	9d 81       	ldd	r25, Y+5	; 0x05
     90a:	00 97       	sbiw	r24, 0x00	; 0
     90c:	61 f0       	breq	.+24     	; 0x926 <__stack+0xc7>
     90e:	56 c0       	rjmp	.+172    	; 0x9bc <__stack+0x15d>
     910:	2c 81       	ldd	r18, Y+4	; 0x04
     912:	3d 81       	ldd	r19, Y+5	; 0x05
     914:	22 30       	cpi	r18, 0x02	; 2
     916:	31 05       	cpc	r19, r1
     918:	61 f1       	breq	.+88     	; 0x972 <__stack+0x113>
     91a:	8c 81       	ldd	r24, Y+4	; 0x04
     91c:	9d 81       	ldd	r25, Y+5	; 0x05
     91e:	83 30       	cpi	r24, 0x03	; 3
     920:	91 05       	cpc	r25, r1
     922:	d1 f1       	breq	.+116    	; 0x998 <__stack+0x139>
     924:	4b c0       	rjmp	.+150    	; 0x9bc <__stack+0x15d>
				{
				case PORT0 :ASSIGN_H_NIB(DDRA,U8Dir);
     926:	aa e3       	ldi	r26, 0x3A	; 58
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	ea e3       	ldi	r30, 0x3A	; 58
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	28 2f       	mov	r18, r24
     932:	2f 70       	andi	r18, 0x0F	; 15
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	88 2f       	mov	r24, r24
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	82 95       	swap	r24
     93c:	92 95       	swap	r25
     93e:	90 7f       	andi	r25, 0xF0	; 240
     940:	98 27       	eor	r25, r24
     942:	80 7f       	andi	r24, 0xF0	; 240
     944:	98 27       	eor	r25, r24
     946:	82 2b       	or	r24, r18
     948:	8c 93       	st	X, r24
     94a:	38 c0       	rjmp	.+112    	; 0x9bc <__stack+0x15d>
						break;
				case PORT1 :ASSIGN_H_NIB(DDRB,U8Dir);
     94c:	a7 e3       	ldi	r26, 0x37	; 55
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	e7 e3       	ldi	r30, 0x37	; 55
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	28 2f       	mov	r18, r24
     958:	2f 70       	andi	r18, 0x0F	; 15
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	88 2f       	mov	r24, r24
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	82 95       	swap	r24
     962:	92 95       	swap	r25
     964:	90 7f       	andi	r25, 0xF0	; 240
     966:	98 27       	eor	r25, r24
     968:	80 7f       	andi	r24, 0xF0	; 240
     96a:	98 27       	eor	r25, r24
     96c:	82 2b       	or	r24, r18
     96e:	8c 93       	st	X, r24
     970:	25 c0       	rjmp	.+74     	; 0x9bc <__stack+0x15d>
						break;
				case PORT2 :ASSIGN_H_NIB(DDRC,U8Dir);
     972:	a4 e3       	ldi	r26, 0x34	; 52
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e4 e3       	ldi	r30, 0x34	; 52
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	28 2f       	mov	r18, r24
     97e:	2f 70       	andi	r18, 0x0F	; 15
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	88 2f       	mov	r24, r24
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	82 95       	swap	r24
     988:	92 95       	swap	r25
     98a:	90 7f       	andi	r25, 0xF0	; 240
     98c:	98 27       	eor	r25, r24
     98e:	80 7f       	andi	r24, 0xF0	; 240
     990:	98 27       	eor	r25, r24
     992:	82 2b       	or	r24, r18
     994:	8c 93       	st	X, r24
     996:	12 c0       	rjmp	.+36     	; 0x9bc <__stack+0x15d>
						break;
				case PORT3 :ASSIGN_H_NIB(DDRD,U8Dir);
     998:	a1 e3       	ldi	r26, 0x31	; 49
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	e1 e3       	ldi	r30, 0x31	; 49
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	28 2f       	mov	r18, r24
     9a4:	2f 70       	andi	r18, 0x0F	; 15
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	82 95       	swap	r24
     9ae:	92 95       	swap	r25
     9b0:	90 7f       	andi	r25, 0xF0	; 240
     9b2:	98 27       	eor	r25, r24
     9b4:	80 7f       	andi	r24, 0xF0	; 240
     9b6:	98 27       	eor	r25, r24
     9b8:	82 2b       	or	r24, r18
     9ba:	8c 93       	st	X, r24
						break;
				}
			break;
			}
}
     9bc:	29 96       	adiw	r28, 0x09	; 9
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	cf 91       	pop	r28
     9ca:	df 91       	pop	r29
     9cc:	08 95       	ret

000009ce <DIO_vidSetPortDir>:
void DIO_vidSetPortDir(uint8 U8PortNum, uint8 U8Dir)
{
     9ce:	df 93       	push	r29
     9d0:	cf 93       	push	r28
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <DIO_vidSetPortDir+0x6>
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <DIO_vidSetPortDir+0x8>
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	6a 83       	std	Y+2, r22	; 0x02
	switch( U8PortNum )
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	28 2f       	mov	r18, r24
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	3c 83       	std	Y+4, r19	; 0x04
     9e6:	2b 83       	std	Y+3, r18	; 0x03
     9e8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ea:	9c 81       	ldd	r25, Y+4	; 0x04
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	91 05       	cpc	r25, r1
     9f0:	d1 f0       	breq	.+52     	; 0xa26 <DIO_vidSetPortDir+0x58>
     9f2:	2b 81       	ldd	r18, Y+3	; 0x03
     9f4:	3c 81       	ldd	r19, Y+4	; 0x04
     9f6:	22 30       	cpi	r18, 0x02	; 2
     9f8:	31 05       	cpc	r19, r1
     9fa:	2c f4       	brge	.+10     	; 0xa06 <DIO_vidSetPortDir+0x38>
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	61 f0       	breq	.+24     	; 0xa1c <DIO_vidSetPortDir+0x4e>
     a04:	1e c0       	rjmp	.+60     	; 0xa42 <DIO_vidSetPortDir+0x74>
     a06:	2b 81       	ldd	r18, Y+3	; 0x03
     a08:	3c 81       	ldd	r19, Y+4	; 0x04
     a0a:	22 30       	cpi	r18, 0x02	; 2
     a0c:	31 05       	cpc	r19, r1
     a0e:	81 f0       	breq	.+32     	; 0xa30 <DIO_vidSetPortDir+0x62>
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	83 30       	cpi	r24, 0x03	; 3
     a16:	91 05       	cpc	r25, r1
     a18:	81 f0       	breq	.+32     	; 0xa3a <DIO_vidSetPortDir+0x6c>
     a1a:	13 c0       	rjmp	.+38     	; 0xa42 <DIO_vidSetPortDir+0x74>
			{
			case PORT0 :ASSIGN_PORT(DDRA,U8Dir);
     a1c:	ea e3       	ldi	r30, 0x3A	; 58
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	8a 81       	ldd	r24, Y+2	; 0x02
     a22:	80 83       	st	Z, r24
     a24:	0e c0       	rjmp	.+28     	; 0xa42 <DIO_vidSetPortDir+0x74>
					break;
			case PORT1 :ASSIGN_PORT(DDRB,U8Dir);
     a26:	e7 e3       	ldi	r30, 0x37	; 55
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	8a 81       	ldd	r24, Y+2	; 0x02
     a2c:	80 83       	st	Z, r24
     a2e:	09 c0       	rjmp	.+18     	; 0xa42 <DIO_vidSetPortDir+0x74>
					break;
			case PORT2 :ASSIGN_PORT(DDRC,U8Dir);
     a30:	e4 e3       	ldi	r30, 0x34	; 52
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	8a 81       	ldd	r24, Y+2	; 0x02
     a36:	80 83       	st	Z, r24
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <DIO_vidSetPortDir+0x74>
					break;
			case PORT3 :ASSIGN_PORT(DDRD,U8Dir);
     a3a:	e1 e3       	ldi	r30, 0x31	; 49
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	80 83       	st	Z, r24
					break;
			}
}
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <DIO_vidWritePin>:
///////////////////////////////////
void DIO_vidWritePin(uint8 U8PinNum, uint8 U8Value)
{
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	62 97       	sbiw	r28, 0x12	; 18
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	8b 83       	std	Y+3, r24	; 0x03
     a66:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin = U8PinNum % PIN_P_PORT;
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	87 70       	andi	r24, 0x07	; 7
     a6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port = U8PinNum/PIN_P_PORT;
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	86 95       	lsr	r24
     a72:	86 95       	lsr	r24
     a74:	86 95       	lsr	r24
     a76:	89 83       	std	Y+1, r24	; 0x01
		switch( port )
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	28 2f       	mov	r18, r24
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	3a 8b       	std	Y+18, r19	; 0x12
     a80:	29 8b       	std	Y+17, r18	; 0x11
     a82:	89 89       	ldd	r24, Y+17	; 0x11
     a84:	9a 89       	ldd	r25, Y+18	; 0x12
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	91 05       	cpc	r25, r1
     a8a:	09 f4       	brne	.+2      	; 0xa8e <DIO_vidWritePin+0x3e>
     a8c:	47 c0       	rjmp	.+142    	; 0xb1c <DIO_vidWritePin+0xcc>
     a8e:	e9 89       	ldd	r30, Y+17	; 0x11
     a90:	fa 89       	ldd	r31, Y+18	; 0x12
     a92:	e2 30       	cpi	r30, 0x02	; 2
     a94:	f1 05       	cpc	r31, r1
     a96:	34 f4       	brge	.+12     	; 0xaa4 <DIO_vidWritePin+0x54>
     a98:	29 89       	ldd	r18, Y+17	; 0x11
     a9a:	3a 89       	ldd	r19, Y+18	; 0x12
     a9c:	21 15       	cp	r18, r1
     a9e:	31 05       	cpc	r19, r1
     aa0:	71 f0       	breq	.+28     	; 0xabe <DIO_vidWritePin+0x6e>
     aa2:	c8 c0       	rjmp	.+400    	; 0xc34 <DIO_vidWritePin+0x1e4>
     aa4:	89 89       	ldd	r24, Y+17	; 0x11
     aa6:	9a 89       	ldd	r25, Y+18	; 0x12
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	91 05       	cpc	r25, r1
     aac:	09 f4       	brne	.+2      	; 0xab0 <DIO_vidWritePin+0x60>
     aae:	65 c0       	rjmp	.+202    	; 0xb7a <DIO_vidWritePin+0x12a>
     ab0:	e9 89       	ldd	r30, Y+17	; 0x11
     ab2:	fa 89       	ldd	r31, Y+18	; 0x12
     ab4:	e3 30       	cpi	r30, 0x03	; 3
     ab6:	f1 05       	cpc	r31, r1
     ab8:	09 f4       	brne	.+2      	; 0xabc <DIO_vidWritePin+0x6c>
     aba:	8e c0       	rjmp	.+284    	; 0xbd8 <DIO_vidWritePin+0x188>
     abc:	bb c0       	rjmp	.+374    	; 0xc34 <DIO_vidWritePin+0x1e4>
		{
		case PORT0 :ASSIGN_BIT(PORTA,pin,U8Value);
     abe:	2b e3       	ldi	r18, 0x3B	; 59
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	38 8b       	std	Y+16, r19	; 0x10
     ac4:	2f 87       	std	Y+15, r18	; 0x0f
     ac6:	8c 81       	ldd	r24, Y+4	; 0x04
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	91 f4       	brne	.+36     	; 0xaf0 <DIO_vidWritePin+0xa0>
     acc:	eb e3       	ldi	r30, 0x3B	; 59
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	48 2f       	mov	r20, r24
     ad4:	8a 81       	ldd	r24, Y+2	; 0x02
     ad6:	28 2f       	mov	r18, r24
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	02 2e       	mov	r0, r18
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <DIO_vidWritePin+0x96>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	0a 94       	dec	r0
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <DIO_vidWritePin+0x92>
     aea:	84 2b       	or	r24, r20
     aec:	8e 87       	std	Y+14, r24	; 0x0e
     aee:	11 c0       	rjmp	.+34     	; 0xb12 <DIO_vidWritePin+0xc2>
     af0:	eb e3       	ldi	r30, 0x3B	; 59
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	48 2f       	mov	r20, r24
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	28 2f       	mov	r18, r24
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <DIO_vidWritePin+0xb8>
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	2a 95       	dec	r18
     b0a:	e2 f7       	brpl	.-8      	; 0xb04 <DIO_vidWritePin+0xb4>
     b0c:	80 95       	com	r24
     b0e:	84 23       	and	r24, r20
     b10:	8e 87       	std	Y+14, r24	; 0x0e
     b12:	2e 85       	ldd	r18, Y+14	; 0x0e
     b14:	ef 85       	ldd	r30, Y+15	; 0x0f
     b16:	f8 89       	ldd	r31, Y+16	; 0x10
     b18:	20 83       	st	Z, r18
     b1a:	8c c0       	rjmp	.+280    	; 0xc34 <DIO_vidWritePin+0x1e4>
				break;
		case PORT1 :ASSIGN_BIT(PORTB,pin,U8Value);
     b1c:	88 e3       	ldi	r24, 0x38	; 56
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	9d 87       	std	Y+13, r25	; 0x0d
     b22:	8c 87       	std	Y+12, r24	; 0x0c
     b24:	8c 81       	ldd	r24, Y+4	; 0x04
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	91 f4       	brne	.+36     	; 0xb4e <DIO_vidWritePin+0xfe>
     b2a:	e8 e3       	ldi	r30, 0x38	; 56
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	48 2f       	mov	r20, r24
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
     b34:	28 2f       	mov	r18, r24
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	02 2e       	mov	r0, r18
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <DIO_vidWritePin+0xf4>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	0a 94       	dec	r0
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <DIO_vidWritePin+0xf0>
     b48:	84 2b       	or	r24, r20
     b4a:	8b 87       	std	Y+11, r24	; 0x0b
     b4c:	11 c0       	rjmp	.+34     	; 0xb70 <DIO_vidWritePin+0x120>
     b4e:	e8 e3       	ldi	r30, 0x38	; 56
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	48 2f       	mov	r20, r24
     b56:	8a 81       	ldd	r24, Y+2	; 0x02
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <DIO_vidWritePin+0x116>
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	2a 95       	dec	r18
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <DIO_vidWritePin+0x112>
     b6a:	80 95       	com	r24
     b6c:	84 23       	and	r24, r20
     b6e:	8b 87       	std	Y+11, r24	; 0x0b
     b70:	2b 85       	ldd	r18, Y+11	; 0x0b
     b72:	ec 85       	ldd	r30, Y+12	; 0x0c
     b74:	fd 85       	ldd	r31, Y+13	; 0x0d
     b76:	20 83       	st	Z, r18
     b78:	5d c0       	rjmp	.+186    	; 0xc34 <DIO_vidWritePin+0x1e4>
				break;
		case PORT2 :ASSIGN_BIT(PORTC,pin,U8Value);
     b7a:	85 e3       	ldi	r24, 0x35	; 53
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	9a 87       	std	Y+10, r25	; 0x0a
     b80:	89 87       	std	Y+9, r24	; 0x09
     b82:	8c 81       	ldd	r24, Y+4	; 0x04
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	91 f4       	brne	.+36     	; 0xbac <DIO_vidWritePin+0x15c>
     b88:	e5 e3       	ldi	r30, 0x35	; 53
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	48 2f       	mov	r20, r24
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	28 2f       	mov	r18, r24
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 2e       	mov	r0, r18
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <DIO_vidWritePin+0x152>
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	0a 94       	dec	r0
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <DIO_vidWritePin+0x14e>
     ba6:	84 2b       	or	r24, r20
     ba8:	88 87       	std	Y+8, r24	; 0x08
     baa:	11 c0       	rjmp	.+34     	; 0xbce <DIO_vidWritePin+0x17e>
     bac:	e5 e3       	ldi	r30, 0x35	; 53
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	48 2f       	mov	r20, r24
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_vidWritePin+0x174>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	2a 95       	dec	r18
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_vidWritePin+0x170>
     bc8:	80 95       	com	r24
     bca:	84 23       	and	r24, r20
     bcc:	88 87       	std	Y+8, r24	; 0x08
     bce:	28 85       	ldd	r18, Y+8	; 0x08
     bd0:	e9 85       	ldd	r30, Y+9	; 0x09
     bd2:	fa 85       	ldd	r31, Y+10	; 0x0a
     bd4:	20 83       	st	Z, r18
     bd6:	2e c0       	rjmp	.+92     	; 0xc34 <DIO_vidWritePin+0x1e4>
				break;
		case PORT3 :ASSIGN_BIT(PORTD,pin,U8Value);
     bd8:	82 e3       	ldi	r24, 0x32	; 50
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9f 83       	std	Y+7, r25	; 0x07
     bde:	8e 83       	std	Y+6, r24	; 0x06
     be0:	8c 81       	ldd	r24, Y+4	; 0x04
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	91 f4       	brne	.+36     	; 0xc0a <DIO_vidWritePin+0x1ba>
     be6:	e2 e3       	ldi	r30, 0x32	; 50
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	48 2f       	mov	r20, r24
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 2e       	mov	r0, r18
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <DIO_vidWritePin+0x1b0>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	0a 94       	dec	r0
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <DIO_vidWritePin+0x1ac>
     c04:	84 2b       	or	r24, r20
     c06:	8d 83       	std	Y+5, r24	; 0x05
     c08:	11 c0       	rjmp	.+34     	; 0xc2c <DIO_vidWritePin+0x1dc>
     c0a:	e2 e3       	ldi	r30, 0x32	; 50
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_vidWritePin+0x1d2>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	2a 95       	dec	r18
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_vidWritePin+0x1ce>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8d 83       	std	Y+5, r24	; 0x05
     c2c:	2d 81       	ldd	r18, Y+5	; 0x05
     c2e:	ee 81       	ldd	r30, Y+6	; 0x06
     c30:	ff 81       	ldd	r31, Y+7	; 0x07
     c32:	20 83       	st	Z, r18
				break;
		}
}
     c34:	62 96       	adiw	r28, 0x12	; 18
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <DIO_vidTogglePin>:


void DIO_vidTogglePin(uint8 U8PinNum)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <DIO_vidTogglePin+0x6>
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <DIO_vidTogglePin+0x8>
     c4e:	0f 92       	push	r0
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	8b 83       	std	Y+3, r24	; 0x03
	uint8 pin = U8PinNum % PIN_P_PORT;
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	87 70       	andi	r24, 0x07	; 7
     c5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port = U8PinNum/PIN_P_PORT;
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	86 95       	lsr	r24
     c60:	86 95       	lsr	r24
     c62:	86 95       	lsr	r24
     c64:	89 83       	std	Y+1, r24	; 0x01
		switch( port )
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	3d 83       	std	Y+5, r19	; 0x05
     c6e:	2c 83       	std	Y+4, r18	; 0x04
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	91 05       	cpc	r25, r1
     c78:	49 f1       	breq	.+82     	; 0xccc <DIO_vidTogglePin+0x86>
     c7a:	2c 81       	ldd	r18, Y+4	; 0x04
     c7c:	3d 81       	ldd	r19, Y+5	; 0x05
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	2c f4       	brge	.+10     	; 0xc8e <DIO_vidTogglePin+0x48>
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	9d 81       	ldd	r25, Y+5	; 0x05
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	61 f0       	breq	.+24     	; 0xca4 <DIO_vidTogglePin+0x5e>
     c8c:	5a c0       	rjmp	.+180    	; 0xd42 <DIO_vidTogglePin+0xfc>
     c8e:	2c 81       	ldd	r18, Y+4	; 0x04
     c90:	3d 81       	ldd	r19, Y+5	; 0x05
     c92:	22 30       	cpi	r18, 0x02	; 2
     c94:	31 05       	cpc	r19, r1
     c96:	71 f1       	breq	.+92     	; 0xcf4 <DIO_vidTogglePin+0xae>
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	9d 81       	ldd	r25, Y+5	; 0x05
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	91 05       	cpc	r25, r1
     ca0:	e9 f1       	breq	.+122    	; 0xd1c <DIO_vidTogglePin+0xd6>
     ca2:	4f c0       	rjmp	.+158    	; 0xd42 <DIO_vidTogglePin+0xfc>
		{
		case PORT0 :TOGGLE_BIT(PORTA,pin);
     ca4:	ab e3       	ldi	r26, 0x3B	; 59
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	eb e3       	ldi	r30, 0x3B	; 59
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_vidTogglePin+0x7c>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_vidTogglePin+0x78>
     cc6:	84 27       	eor	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	3b c0       	rjmp	.+118    	; 0xd42 <DIO_vidTogglePin+0xfc>
				break;
		case PORT1 :TOGGLE_BIT(PORTB,pin);
     ccc:	a8 e3       	ldi	r26, 0x38	; 56
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e8 e3       	ldi	r30, 0x38	; 56
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_vidTogglePin+0xa4>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_vidTogglePin+0xa0>
     cee:	84 27       	eor	r24, r20
     cf0:	8c 93       	st	X, r24
     cf2:	27 c0       	rjmp	.+78     	; 0xd42 <DIO_vidTogglePin+0xfc>
				break;
		case PORT2 :TOGGLE_BIT(PORTC,pin);
     cf4:	a5 e3       	ldi	r26, 0x35	; 53
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e5 e3       	ldi	r30, 0x35	; 53
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <DIO_vidTogglePin+0xcc>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <DIO_vidTogglePin+0xc8>
     d16:	84 27       	eor	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	13 c0       	rjmp	.+38     	; 0xd42 <DIO_vidTogglePin+0xfc>
				break;
		case PORT3 :TOGGLE_BIT(PORTD,pin);
     d1c:	a2 e3       	ldi	r26, 0x32	; 50
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e2 e3       	ldi	r30, 0x32	; 50
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_vidTogglePin+0xf4>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_vidTogglePin+0xf0>
     d3e:	84 27       	eor	r24, r20
     d40:	8c 93       	st	X, r24
				break;
		}
}
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <DIO_vidWriteNibble>:
void DIO_vidWriteNibble(uint8 U8PortNum,uint8 U8nibbleDirection, uint8 U8Value)
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	29 97       	sbiw	r28, 0x09	; 9
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	6a 83       	std	Y+2, r22	; 0x02
     d6a:	4b 83       	std	Y+3, r20	; 0x03

	switch( U8nibbleDirection )
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	39 87       	std	Y+9, r19	; 0x09
     d74:	28 87       	std	Y+8, r18	; 0x08
     d76:	88 85       	ldd	r24, Y+8	; 0x08
     d78:	99 85       	ldd	r25, Y+9	; 0x09
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	39 f0       	breq	.+14     	; 0xd8c <DIO_vidWriteNibble+0x3a>
     d7e:	28 85       	ldd	r18, Y+8	; 0x08
     d80:	39 85       	ldd	r19, Y+9	; 0x09
     d82:	21 30       	cpi	r18, 0x01	; 1
     d84:	31 05       	cpc	r19, r1
     d86:	09 f4       	brne	.+2      	; 0xd8a <DIO_vidWriteNibble+0x38>
     d88:	4c c0       	rjmp	.+152    	; 0xe22 <DIO_vidWriteNibble+0xd0>
     d8a:	b5 c0       	rjmp	.+362    	; 0xef6 <DIO_vidWriteNibble+0x1a4>
			{
			case NIBBLE_LOW :

				switch( U8PortNum )
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3f 83       	std	Y+7, r19	; 0x07
     d94:	2e 83       	std	Y+6, r18	; 0x06
     d96:	8e 81       	ldd	r24, Y+6	; 0x06
     d98:	9f 81       	ldd	r25, Y+7	; 0x07
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	91 05       	cpc	r25, r1
     d9e:	01 f1       	breq	.+64     	; 0xde0 <DIO_vidWriteNibble+0x8e>
     da0:	2e 81       	ldd	r18, Y+6	; 0x06
     da2:	3f 81       	ldd	r19, Y+7	; 0x07
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	2c f4       	brge	.+10     	; 0xdb4 <DIO_vidWriteNibble+0x62>
     daa:	8e 81       	ldd	r24, Y+6	; 0x06
     dac:	9f 81       	ldd	r25, Y+7	; 0x07
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	61 f0       	breq	.+24     	; 0xdca <DIO_vidWriteNibble+0x78>
     db2:	a1 c0       	rjmp	.+322    	; 0xef6 <DIO_vidWriteNibble+0x1a4>
     db4:	2e 81       	ldd	r18, Y+6	; 0x06
     db6:	3f 81       	ldd	r19, Y+7	; 0x07
     db8:	22 30       	cpi	r18, 0x02	; 2
     dba:	31 05       	cpc	r19, r1
     dbc:	e1 f0       	breq	.+56     	; 0xdf6 <DIO_vidWriteNibble+0xa4>
     dbe:	8e 81       	ldd	r24, Y+6	; 0x06
     dc0:	9f 81       	ldd	r25, Y+7	; 0x07
     dc2:	83 30       	cpi	r24, 0x03	; 3
     dc4:	91 05       	cpc	r25, r1
     dc6:	11 f1       	breq	.+68     	; 0xe0c <DIO_vidWriteNibble+0xba>
     dc8:	96 c0       	rjmp	.+300    	; 0xef6 <DIO_vidWriteNibble+0x1a4>
							{
							case PORT0 :ASSIGN_L_NIB(PORTA,U8Value);
     dca:	ab e3       	ldi	r26, 0x3B	; 59
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	eb e3       	ldi	r30, 0x3B	; 59
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	98 2f       	mov	r25, r24
     dd6:	90 7f       	andi	r25, 0xF0	; 240
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	89 2b       	or	r24, r25
     ddc:	8c 93       	st	X, r24
     dde:	8b c0       	rjmp	.+278    	; 0xef6 <DIO_vidWriteNibble+0x1a4>
									break;
							case PORT1 :ASSIGN_L_NIB(PORTB,U8Value);
     de0:	a8 e3       	ldi	r26, 0x38	; 56
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 e3       	ldi	r30, 0x38	; 56
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	98 2f       	mov	r25, r24
     dec:	90 7f       	andi	r25, 0xF0	; 240
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	89 2b       	or	r24, r25
     df2:	8c 93       	st	X, r24
     df4:	80 c0       	rjmp	.+256    	; 0xef6 <DIO_vidWriteNibble+0x1a4>
									break;
							case PORT2 :ASSIGN_L_NIB(PORTC,U8Value);
     df6:	a5 e3       	ldi	r26, 0x35	; 53
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e3       	ldi	r30, 0x35	; 53
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	98 2f       	mov	r25, r24
     e02:	90 7f       	andi	r25, 0xF0	; 240
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	89 2b       	or	r24, r25
     e08:	8c 93       	st	X, r24
     e0a:	75 c0       	rjmp	.+234    	; 0xef6 <DIO_vidWriteNibble+0x1a4>
									break;
							case PORT3 :ASSIGN_L_NIB(PORTD,U8Value);
     e0c:	a2 e3       	ldi	r26, 0x32	; 50
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e2 e3       	ldi	r30, 0x32	; 50
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	98 2f       	mov	r25, r24
     e18:	90 7f       	andi	r25, 0xF0	; 240
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	89 2b       	or	r24, r25
     e1e:	8c 93       	st	X, r24
     e20:	6a c0       	rjmp	.+212    	; 0xef6 <DIO_vidWriteNibble+0x1a4>
									break;
							}
					break;

			case NIBBLE_HIGH :
				switch( U8PortNum )
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	3d 83       	std	Y+5, r19	; 0x05
     e2a:	2c 83       	std	Y+4, r18	; 0x04
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	9d 81       	ldd	r25, Y+5	; 0x05
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	91 05       	cpc	r25, r1
     e34:	41 f1       	breq	.+80     	; 0xe86 <DIO_vidWriteNibble+0x134>
     e36:	2c 81       	ldd	r18, Y+4	; 0x04
     e38:	3d 81       	ldd	r19, Y+5	; 0x05
     e3a:	22 30       	cpi	r18, 0x02	; 2
     e3c:	31 05       	cpc	r19, r1
     e3e:	2c f4       	brge	.+10     	; 0xe4a <DIO_vidWriteNibble+0xf8>
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	61 f0       	breq	.+24     	; 0xe60 <DIO_vidWriteNibble+0x10e>
     e48:	56 c0       	rjmp	.+172    	; 0xef6 <DIO_vidWriteNibble+0x1a4>
     e4a:	2c 81       	ldd	r18, Y+4	; 0x04
     e4c:	3d 81       	ldd	r19, Y+5	; 0x05
     e4e:	22 30       	cpi	r18, 0x02	; 2
     e50:	31 05       	cpc	r19, r1
     e52:	61 f1       	breq	.+88     	; 0xeac <DIO_vidWriteNibble+0x15a>
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	9d 81       	ldd	r25, Y+5	; 0x05
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	91 05       	cpc	r25, r1
     e5c:	d1 f1       	breq	.+116    	; 0xed2 <DIO_vidWriteNibble+0x180>
     e5e:	4b c0       	rjmp	.+150    	; 0xef6 <DIO_vidWriteNibble+0x1a4>
				{
						case PORT0 :ASSIGN_H_NIB(PORTA,U8Value);
     e60:	ab e3       	ldi	r26, 0x3B	; 59
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	eb e3       	ldi	r30, 0x3B	; 59
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	28 2f       	mov	r18, r24
     e6c:	2f 70       	andi	r18, 0x0F	; 15
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	82 95       	swap	r24
     e76:	92 95       	swap	r25
     e78:	90 7f       	andi	r25, 0xF0	; 240
     e7a:	98 27       	eor	r25, r24
     e7c:	80 7f       	andi	r24, 0xF0	; 240
     e7e:	98 27       	eor	r25, r24
     e80:	82 2b       	or	r24, r18
     e82:	8c 93       	st	X, r24
     e84:	38 c0       	rjmp	.+112    	; 0xef6 <DIO_vidWriteNibble+0x1a4>
								break;
						case PORT1 :ASSIGN_H_NIB(PORTB,U8Value);
     e86:	a8 e3       	ldi	r26, 0x38	; 56
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e8 e3       	ldi	r30, 0x38	; 56
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	28 2f       	mov	r18, r24
     e92:	2f 70       	andi	r18, 0x0F	; 15
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	82 95       	swap	r24
     e9c:	92 95       	swap	r25
     e9e:	90 7f       	andi	r25, 0xF0	; 240
     ea0:	98 27       	eor	r25, r24
     ea2:	80 7f       	andi	r24, 0xF0	; 240
     ea4:	98 27       	eor	r25, r24
     ea6:	82 2b       	or	r24, r18
     ea8:	8c 93       	st	X, r24
     eaa:	25 c0       	rjmp	.+74     	; 0xef6 <DIO_vidWriteNibble+0x1a4>
								break;
						case PORT2 :ASSIGN_H_NIB(PORTC,U8Value);
     eac:	a5 e3       	ldi	r26, 0x35	; 53
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e5 e3       	ldi	r30, 0x35	; 53
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	28 2f       	mov	r18, r24
     eb8:	2f 70       	andi	r18, 0x0F	; 15
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	82 95       	swap	r24
     ec2:	92 95       	swap	r25
     ec4:	90 7f       	andi	r25, 0xF0	; 240
     ec6:	98 27       	eor	r25, r24
     ec8:	80 7f       	andi	r24, 0xF0	; 240
     eca:	98 27       	eor	r25, r24
     ecc:	82 2b       	or	r24, r18
     ece:	8c 93       	st	X, r24
     ed0:	12 c0       	rjmp	.+36     	; 0xef6 <DIO_vidWriteNibble+0x1a4>
								break;
						case PORT3 :ASSIGN_H_NIB(PORTD,U8Value);
     ed2:	a2 e3       	ldi	r26, 0x32	; 50
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e2 e3       	ldi	r30, 0x32	; 50
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	28 2f       	mov	r18, r24
     ede:	2f 70       	andi	r18, 0x0F	; 15
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	82 95       	swap	r24
     ee8:	92 95       	swap	r25
     eea:	90 7f       	andi	r25, 0xF0	; 240
     eec:	98 27       	eor	r25, r24
     eee:	80 7f       	andi	r24, 0xF0	; 240
     ef0:	98 27       	eor	r25, r24
     ef2:	82 2b       	or	r24, r18
     ef4:	8c 93       	st	X, r24
								break;
						}
			break;
			}

}
     ef6:	29 96       	adiw	r28, 0x09	; 9
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <DIO_vidWritePort>:
void DIO_vidWritePort(uint8 U8PortNum, uint8 U8Value)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <DIO_vidWritePort+0x6>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <DIO_vidWritePort+0x8>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	6a 83       	std	Y+2, r22	; 0x02

		switch( U8PortNum )
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	3c 83       	std	Y+4, r19	; 0x04
     f20:	2b 83       	std	Y+3, r18	; 0x03
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	91 05       	cpc	r25, r1
     f2a:	d1 f0       	breq	.+52     	; 0xf60 <DIO_vidWritePort+0x58>
     f2c:	2b 81       	ldd	r18, Y+3	; 0x03
     f2e:	3c 81       	ldd	r19, Y+4	; 0x04
     f30:	22 30       	cpi	r18, 0x02	; 2
     f32:	31 05       	cpc	r19, r1
     f34:	2c f4       	brge	.+10     	; 0xf40 <DIO_vidWritePort+0x38>
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	9c 81       	ldd	r25, Y+4	; 0x04
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	61 f0       	breq	.+24     	; 0xf56 <DIO_vidWritePort+0x4e>
     f3e:	1e c0       	rjmp	.+60     	; 0xf7c <DIO_vidWritePort+0x74>
     f40:	2b 81       	ldd	r18, Y+3	; 0x03
     f42:	3c 81       	ldd	r19, Y+4	; 0x04
     f44:	22 30       	cpi	r18, 0x02	; 2
     f46:	31 05       	cpc	r19, r1
     f48:	81 f0       	breq	.+32     	; 0xf6a <DIO_vidWritePort+0x62>
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	81 f0       	breq	.+32     	; 0xf74 <DIO_vidWritePort+0x6c>
     f54:	13 c0       	rjmp	.+38     	; 0xf7c <DIO_vidWritePort+0x74>
		{
			case PORT0 :ASSIGN_PORT(PORTA,U8Value);
     f56:	eb e3       	ldi	r30, 0x3B	; 59
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	80 83       	st	Z, r24
     f5e:	0e c0       	rjmp	.+28     	; 0xf7c <DIO_vidWritePort+0x74>
					break;
			case PORT1 :ASSIGN_PORT(PORTB,U8Value);
     f60:	e8 e3       	ldi	r30, 0x38	; 56
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	80 83       	st	Z, r24
     f68:	09 c0       	rjmp	.+18     	; 0xf7c <DIO_vidWritePort+0x74>
					break;
			case PORT2 :ASSIGN_PORT(PORTC,U8Value);
     f6a:	e5 e3       	ldi	r30, 0x35	; 53
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	80 83       	st	Z, r24
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <DIO_vidWritePort+0x74>
					break;
			case PORT3 :ASSIGN_PORT(PORTD,U8Value);
     f74:	e2 e3       	ldi	r30, 0x32	; 50
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	80 83       	st	Z, r24
					break;
			}
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <DIO_U8ReadPin>:
///////////////////////////////////////
uint8 DIO_U8ReadPin(uint8 U8PinNum)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <DIO_U8ReadPin+0x6>
     f90:	00 d0       	rcall	.+0      	; 0xf92 <DIO_U8ReadPin+0x8>
     f92:	0f 92       	push	r0
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value;
	uint8 pin = U8PinNum % 8;
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	87 70       	andi	r24, 0x07	; 7
     f9e:	89 83       	std	Y+1, r24	; 0x01
	switch( U8PinNum / 8)
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	86 95       	lsr	r24
     fa4:	86 95       	lsr	r24
     fa6:	86 95       	lsr	r24
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	3d 83       	std	Y+5, r19	; 0x05
     fae:	2c 83       	std	Y+4, r18	; 0x04
     fb0:	4c 81       	ldd	r20, Y+4	; 0x04
     fb2:	5d 81       	ldd	r21, Y+5	; 0x05
     fb4:	41 30       	cpi	r20, 0x01	; 1
     fb6:	51 05       	cpc	r21, r1
     fb8:	41 f1       	breq	.+80     	; 0x100a <DIO_U8ReadPin+0x80>
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	82 30       	cpi	r24, 0x02	; 2
     fc0:	91 05       	cpc	r25, r1
     fc2:	34 f4       	brge	.+12     	; 0xfd0 <DIO_U8ReadPin+0x46>
     fc4:	2c 81       	ldd	r18, Y+4	; 0x04
     fc6:	3d 81       	ldd	r19, Y+5	; 0x05
     fc8:	21 15       	cp	r18, r1
     fca:	31 05       	cpc	r19, r1
     fcc:	61 f0       	breq	.+24     	; 0xfe6 <DIO_U8ReadPin+0x5c>
     fce:	52 c0       	rjmp	.+164    	; 0x1074 <DIO_U8ReadPin+0xea>
     fd0:	4c 81       	ldd	r20, Y+4	; 0x04
     fd2:	5d 81       	ldd	r21, Y+5	; 0x05
     fd4:	42 30       	cpi	r20, 0x02	; 2
     fd6:	51 05       	cpc	r21, r1
     fd8:	51 f1       	breq	.+84     	; 0x102e <DIO_U8ReadPin+0xa4>
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	9d 81       	ldd	r25, Y+5	; 0x05
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	91 05       	cpc	r25, r1
     fe2:	b9 f1       	breq	.+110    	; 0x1052 <DIO_U8ReadPin+0xc8>
     fe4:	47 c0       	rjmp	.+142    	; 0x1074 <DIO_U8ReadPin+0xea>
	{
		case 0 :value = GET_BIT(PINA,pin);
     fe6:	e9 e3       	ldi	r30, 0x39	; 57
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_U8ReadPin+0x74>
     ffa:	55 95       	asr	r21
     ffc:	47 95       	ror	r20
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_U8ReadPin+0x70>
    1002:	ca 01       	movw	r24, r20
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	8a 83       	std	Y+2, r24	; 0x02
    1008:	35 c0       	rjmp	.+106    	; 0x1074 <DIO_U8ReadPin+0xea>
				break;
		case 1 :value = GET_BIT(PINB,pin);
    100a:	e6 e3       	ldi	r30, 0x36	; 54
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a9 01       	movw	r20, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_U8ReadPin+0x98>
    101e:	55 95       	asr	r21
    1020:	47 95       	ror	r20
    1022:	8a 95       	dec	r24
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_U8ReadPin+0x94>
    1026:	ca 01       	movw	r24, r20
    1028:	81 70       	andi	r24, 0x01	; 1
    102a:	8a 83       	std	Y+2, r24	; 0x02
    102c:	23 c0       	rjmp	.+70     	; 0x1074 <DIO_U8ReadPin+0xea>
				break;
		case 2 :value = GET_BIT(PINC,pin);
    102e:	e3 e3       	ldi	r30, 0x33	; 51
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a9 01       	movw	r20, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_U8ReadPin+0xbc>
    1042:	55 95       	asr	r21
    1044:	47 95       	ror	r20
    1046:	8a 95       	dec	r24
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_U8ReadPin+0xb8>
    104a:	ca 01       	movw	r24, r20
    104c:	81 70       	andi	r24, 0x01	; 1
    104e:	8a 83       	std	Y+2, r24	; 0x02
    1050:	11 c0       	rjmp	.+34     	; 0x1074 <DIO_U8ReadPin+0xea>
				break;
		case 3 :value = GET_BIT(PIND,pin);
    1052:	e0 e3       	ldi	r30, 0x30	; 48
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a9 01       	movw	r20, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_U8ReadPin+0xe0>
    1066:	55 95       	asr	r21
    1068:	47 95       	ror	r20
    106a:	8a 95       	dec	r24
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_U8ReadPin+0xdc>
    106e:	ca 01       	movw	r24, r20
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	8a 83       	std	Y+2, r24	; 0x02
				break;
	}
	return value;
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <DIO_vidReadNibble>:
uint8 DIO_vidReadNibble(uint8 U8PortNum,uint8 U8nibbleDirection)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	29 97       	sbiw	r28, 0x09	; 9
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	8a 83       	std	Y+2, r24	; 0x02
    109c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value;
	switch( U8nibbleDirection )
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	39 87       	std	Y+9, r19	; 0x09
    10a6:	28 87       	std	Y+8, r18	; 0x08
    10a8:	88 85       	ldd	r24, Y+8	; 0x08
    10aa:	99 85       	ldd	r25, Y+9	; 0x09
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	31 f0       	breq	.+12     	; 0x10bc <DIO_vidReadNibble+0x36>
    10b0:	28 85       	ldd	r18, Y+8	; 0x08
    10b2:	39 85       	ldd	r19, Y+9	; 0x09
    10b4:	21 30       	cpi	r18, 0x01	; 1
    10b6:	31 05       	cpc	r19, r1
    10b8:	c1 f1       	breq	.+112    	; 0x112a <DIO_vidReadNibble+0xa4>
    10ba:	6d c0       	rjmp	.+218    	; 0x1196 <DIO_vidReadNibble+0x110>
			{
			case NIBBLE_LOW :

				switch( U8PortNum )
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	3f 83       	std	Y+7, r19	; 0x07
    10c4:	2e 83       	std	Y+6, r18	; 0x06
    10c6:	8e 81       	ldd	r24, Y+6	; 0x06
    10c8:	9f 81       	ldd	r25, Y+7	; 0x07
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	d9 f0       	breq	.+54     	; 0x1106 <DIO_vidReadNibble+0x80>
    10d0:	2e 81       	ldd	r18, Y+6	; 0x06
    10d2:	3f 81       	ldd	r19, Y+7	; 0x07
    10d4:	22 30       	cpi	r18, 0x02	; 2
    10d6:	31 05       	cpc	r19, r1
    10d8:	2c f4       	brge	.+10     	; 0x10e4 <DIO_vidReadNibble+0x5e>
    10da:	8e 81       	ldd	r24, Y+6	; 0x06
    10dc:	9f 81       	ldd	r25, Y+7	; 0x07
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	61 f0       	breq	.+24     	; 0x10fa <DIO_vidReadNibble+0x74>
    10e2:	59 c0       	rjmp	.+178    	; 0x1196 <DIO_vidReadNibble+0x110>
    10e4:	2e 81       	ldd	r18, Y+6	; 0x06
    10e6:	3f 81       	ldd	r19, Y+7	; 0x07
    10e8:	22 30       	cpi	r18, 0x02	; 2
    10ea:	31 05       	cpc	r19, r1
    10ec:	91 f0       	breq	.+36     	; 0x1112 <DIO_vidReadNibble+0x8c>
    10ee:	8e 81       	ldd	r24, Y+6	; 0x06
    10f0:	9f 81       	ldd	r25, Y+7	; 0x07
    10f2:	83 30       	cpi	r24, 0x03	; 3
    10f4:	91 05       	cpc	r25, r1
    10f6:	99 f0       	breq	.+38     	; 0x111e <DIO_vidReadNibble+0x98>
    10f8:	4e c0       	rjmp	.+156    	; 0x1196 <DIO_vidReadNibble+0x110>
				{
					case PORT0 :value = GET_L_NIB(PINA);
    10fa:	e9 e3       	ldi	r30, 0x39	; 57
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8f 70       	andi	r24, 0x0F	; 15
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	48 c0       	rjmp	.+144    	; 0x1196 <DIO_vidReadNibble+0x110>
							break;
					case PORT1 :value =GET_L_NIB(PINB);
    1106:	e6 e3       	ldi	r30, 0x36	; 54
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8f 70       	andi	r24, 0x0F	; 15
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	42 c0       	rjmp	.+132    	; 0x1196 <DIO_vidReadNibble+0x110>
							break;
					case PORT2 :value =GET_L_NIB(PINC);
    1112:	e3 e3       	ldi	r30, 0x33	; 51
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 70       	andi	r24, 0x0F	; 15
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	3c c0       	rjmp	.+120    	; 0x1196 <DIO_vidReadNibble+0x110>
							break;
					case PORT3 :value =GET_L_NIB(PIND);
    111e:	e0 e3       	ldi	r30, 0x30	; 48
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8f 70       	andi	r24, 0x0F	; 15
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	36 c0       	rjmp	.+108    	; 0x1196 <DIO_vidReadNibble+0x110>
				}
					break;

			case NIBBLE_HIGH :

				switch( U8PortNum )
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	3d 83       	std	Y+5, r19	; 0x05
    1132:	2c 83       	std	Y+4, r18	; 0x04
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	9d 81       	ldd	r25, Y+5	; 0x05
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	91 05       	cpc	r25, r1
    113c:	d9 f0       	breq	.+54     	; 0x1174 <DIO_vidReadNibble+0xee>
    113e:	2c 81       	ldd	r18, Y+4	; 0x04
    1140:	3d 81       	ldd	r19, Y+5	; 0x05
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 05       	cpc	r19, r1
    1146:	2c f4       	brge	.+10     	; 0x1152 <DIO_vidReadNibble+0xcc>
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	9d 81       	ldd	r25, Y+5	; 0x05
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	61 f0       	breq	.+24     	; 0x1168 <DIO_vidReadNibble+0xe2>
    1150:	22 c0       	rjmp	.+68     	; 0x1196 <DIO_vidReadNibble+0x110>
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	91 f0       	breq	.+36     	; 0x1180 <DIO_vidReadNibble+0xfa>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	91 05       	cpc	r25, r1
    1164:	99 f0       	breq	.+38     	; 0x118c <DIO_vidReadNibble+0x106>
    1166:	17 c0       	rjmp	.+46     	; 0x1196 <DIO_vidReadNibble+0x110>
				{
					case PORT0 :value = GET_H_NIB(PINA);
    1168:	e9 e3       	ldi	r30, 0x39	; 57
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	80 7f       	andi	r24, 0xF0	; 240
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	11 c0       	rjmp	.+34     	; 0x1196 <DIO_vidReadNibble+0x110>
							break;
					case PORT1 :value = GET_H_NIB(PINB);
    1174:	e6 e3       	ldi	r30, 0x36	; 54
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	80 7f       	andi	r24, 0xF0	; 240
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <DIO_vidReadNibble+0x110>
							break;
					case PORT2 :value = GET_H_NIB(PINC);
    1180:	e3 e3       	ldi	r30, 0x33	; 51
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	80 7f       	andi	r24, 0xF0	; 240
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <DIO_vidReadNibble+0x110>
							break;
					case PORT3 :value = GET_H_NIB(PIND);
    118c:	e0 e3       	ldi	r30, 0x30	; 48
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	80 7f       	andi	r24, 0xF0	; 240
    1194:	89 83       	std	Y+1, r24	; 0x01
							break;
				}
			break;
			}
	return value;
    1196:	89 81       	ldd	r24, Y+1	; 0x01
}
    1198:	29 96       	adiw	r28, 0x09	; 9
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <DIO_U8ReadPort>:
uint8 DIO_U8ReadPort(uint8 U8PortNum)
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <DIO_U8ReadPort+0x6>
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <DIO_U8ReadPort+0x8>
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;

	switch( U8PortNum )
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3c 83       	std	Y+4, r19	; 0x04
    11c0:	2b 83       	std	Y+3, r18	; 0x03
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	d1 f0       	breq	.+52     	; 0x1200 <DIO_U8ReadPort+0x56>
    11cc:	2b 81       	ldd	r18, Y+3	; 0x03
    11ce:	3c 81       	ldd	r19, Y+4	; 0x04
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <DIO_U8ReadPort+0x36>
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <DIO_U8ReadPort+0x4c>
    11de:	1e c0       	rjmp	.+60     	; 0x121c <DIO_U8ReadPort+0x72>
    11e0:	2b 81       	ldd	r18, Y+3	; 0x03
    11e2:	3c 81       	ldd	r19, Y+4	; 0x04
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 05       	cpc	r19, r1
    11e8:	81 f0       	breq	.+32     	; 0x120a <DIO_U8ReadPort+0x60>
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	91 05       	cpc	r25, r1
    11f2:	81 f0       	breq	.+32     	; 0x1214 <DIO_U8ReadPort+0x6a>
    11f4:	13 c0       	rjmp	.+38     	; 0x121c <DIO_U8ReadPort+0x72>
	{
		case PORT0 :value = GET_PORT(PINA);
    11f6:	e9 e3       	ldi	r30, 0x39	; 57
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	0e c0       	rjmp	.+28     	; 0x121c <DIO_U8ReadPort+0x72>
				break;
		case PORT1 :value = GET_PORT(PINB);
    1200:	e6 e3       	ldi	r30, 0x36	; 54
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	09 c0       	rjmp	.+18     	; 0x121c <DIO_U8ReadPort+0x72>
				break;
		case PORT2 :value = GET_PORT(PINC);
    120a:	e3 e3       	ldi	r30, 0x33	; 51
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	04 c0       	rjmp	.+8      	; 0x121c <DIO_U8ReadPort+0x72>
				break;
		case PORT3 :value = GET_PORT(PIND);
    1214:	e0 e3       	ldi	r30, 0x30	; 48
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return value;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <ESP8266_u8CheckStatues>:
enum
{
	DataSent=1
}SendData;
enum ESP_STATUS ESP8266_u8CheckStatues ()
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	6a 97       	sbiw	r28, 0x1a	; 26
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61

    static uint8 checkStatuesState=0;
	char ATcommand[20] ;
	uint8 ListenReturn;
	switch ( checkStatuesState)
    1240:	80 91 b4 02 	lds	r24, 0x02B4
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	3a 8f       	std	Y+26, r19	; 0x1a
    124a:	29 8f       	std	Y+25, r18	; 0x19
    124c:	89 8d       	ldd	r24, Y+25	; 0x19
    124e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	31 f0       	breq	.+12     	; 0x1260 <ESP8266_u8CheckStatues+0x34>
    1254:	29 8d       	ldd	r18, Y+25	; 0x19
    1256:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1258:	21 30       	cpi	r18, 0x01	; 1
    125a:	31 05       	cpc	r19, r1
    125c:	a1 f0       	breq	.+40     	; 0x1286 <ESP8266_u8CheckStatues+0x5a>
    125e:	51 c0       	rjmp	.+162    	; 0x1302 <ESP8266_u8CheckStatues+0xd6>
	{
	case 0:
		// SEND Command to check ESP statues
		sprintf ( ATcommand ,"AT+CIPSTATUS\r\n");
    1260:	ce 01       	movw	r24, r28
    1262:	02 96       	adiw	r24, 0x02	; 2
    1264:	29 e7       	ldi	r18, 0x79	; 121
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	b9 01       	movw	r22, r18
    126a:	4f e0       	ldi	r20, 0x0F	; 15
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	0e 94 20 15 	call	0x2a40	; 0x2a40 <memcpy>
		ESP8266_vidSendCommand(ATcommand);
    1272:	ce 01       	movw	r24, r28
    1274:	02 96       	adiw	r24, 0x02	; 2
    1276:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
		checkStatuesState++;
    127a:	80 91 b4 02 	lds	r24, 0x02B4
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	80 93 b4 02 	sts	0x02B4, r24
    1284:	3e c0       	rjmp	.+124    	; 0x1302 <ESP8266_u8CheckStatues+0xd6>
		break;
	case 1:
		// Listen To Response of ESP8266 .. If ESP replay with STATUS check number after STATUS
		// Ex. ( STATUS:2) -> Connected TO AP
		ListenReturn = ESP8266_vidListen("STATUS:",8,500);
    1286:	88 e8       	ldi	r24, 0x88	; 136
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	68 e0       	ldi	r22, 0x08	; 8
    128c:	44 ef       	ldi	r20, 0xF4	; 244
    128e:	51 e0       	ldi	r21, 0x01	; 1
    1290:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    1294:	89 83       	std	Y+1, r24	; 0x01
		switch (ListenReturn)
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	38 8f       	std	Y+24, r19	; 0x18
    129e:	2f 8b       	std	Y+23, r18	; 0x17
    12a0:	8f 89       	ldd	r24, Y+23	; 0x17
    12a2:	98 8d       	ldd	r25, Y+24	; 0x18
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	91 05       	cpc	r25, r1
    12a8:	31 f0       	breq	.+12     	; 0x12b6 <ESP8266_u8CheckStatues+0x8a>
    12aa:	2f 89       	ldd	r18, Y+23	; 0x17
    12ac:	38 8d       	ldd	r19, Y+24	; 0x18
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	11 f1       	breq	.+68     	; 0x12f8 <ESP8266_u8CheckStatues+0xcc>
    12b4:	26 c0       	rjmp	.+76     	; 0x1302 <ESP8266_u8CheckStatues+0xd6>
		{
		case Found:
			// Check Number after STATUS: >>> return value corresponding to it.
			checkStatuesState=0;
    12b6:	10 92 b4 02 	sts	0x02B4, r1
			if (URxArray[7] == '2')
    12ba:	80 91 5c 03 	lds	r24, 0x035C
    12be:	82 33       	cpi	r24, 0x32	; 50
    12c0:	19 f4       	brne	.+6      	; 0x12c8 <ESP8266_u8CheckStatues+0x9c>
				return CONNECTED_TO_AP;
    12c2:	32 e0       	ldi	r19, 0x02	; 2
    12c4:	3e 8b       	std	Y+22, r19	; 0x16
    12c6:	1e c0       	rjmp	.+60     	; 0x1304 <ESP8266_u8CheckStatues+0xd8>
			else if (URxArray[7] == '3')
    12c8:	80 91 5c 03 	lds	r24, 0x035C
    12cc:	83 33       	cpi	r24, 0x33	; 51
    12ce:	19 f4       	brne	.+6      	; 0x12d6 <ESP8266_u8CheckStatues+0xaa>
				return TRANSMISSION_CONNECTED;
    12d0:	83 e0       	ldi	r24, 0x03	; 3
    12d2:	8e 8b       	std	Y+22, r24	; 0x16
    12d4:	17 c0       	rjmp	.+46     	; 0x1304 <ESP8266_u8CheckStatues+0xd8>
			else if (URxArray[7] == '4')
    12d6:	80 91 5c 03 	lds	r24, 0x035C
    12da:	84 33       	cpi	r24, 0x34	; 52
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <ESP8266_u8CheckStatues+0xb8>
				return TRANSMISSION_DISCONNECTED;
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	9e 8b       	std	Y+22, r25	; 0x16
    12e2:	10 c0       	rjmp	.+32     	; 0x1304 <ESP8266_u8CheckStatues+0xd8>
			else if (URxArray[7] == '5')
    12e4:	80 91 5c 03 	lds	r24, 0x035C
    12e8:	85 33       	cpi	r24, 0x35	; 53
    12ea:	19 f4       	brne	.+6      	; 0x12f2 <ESP8266_u8CheckStatues+0xc6>
				return NOT_CONNECTED_TO_AP;
    12ec:	25 e0       	ldi	r18, 0x05	; 5
    12ee:	2e 8b       	std	Y+22, r18	; 0x16
    12f0:	09 c0       	rjmp	.+18     	; 0x1304 <ESP8266_u8CheckStatues+0xd8>
			else return UNKNOWN_ERROR;
    12f2:	36 e0       	ldi	r19, 0x06	; 6
    12f4:	3e 8b       	std	Y+22, r19	; 0x16
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <ESP8266_u8CheckStatues+0xd8>
			break;
		case Timeout:
			// Case Timeout before reading STATUS: .. return NotConnected
			checkStatuesState=0;
    12f8:	10 92 b4 02 	sts	0x02B4, r1
			return NotConnected;
    12fc:	87 e0       	ldi	r24, 0x07	; 7
    12fe:	8e 8b       	std	Y+22, r24	; 0x16
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <ESP8266_u8CheckStatues+0xd8>
			break;
		}

		break;
	}
	return Wait;
    1302:	1e 8a       	std	Y+22, r1	; 0x16
    1304:	8e 89       	ldd	r24, Y+22	; 0x16

}
    1306:	6a 96       	adiw	r28, 0x1a	; 26
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <ESP8266_vidSendCommand>:
void ESP8266_vidSendCommand(uint8 * command)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <ESP8266_vidSendCommand+0x6>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01
	UART_vidSetTxArr(command,0);
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	0e 94 15 13 	call	0x262a	; 0x262a <UART_vidSetTxArr>
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <ESP_vidJoinNetwork>:
// Function that joins Network with SSID and Password defined in parameters structure.
uint8 ESP_vidJoinNetwork ()
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	e8 97       	sbiw	r28, 0x38	; 56
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
	static joinNetworkState=0;
	char ATcommand[50] ;
	uint8 ListenReturn;
	switch ( joinNetworkState)
    134e:	20 91 b5 02 	lds	r18, 0x02B5
    1352:	30 91 b6 02 	lds	r19, 0x02B6
    1356:	38 af       	std	Y+56, r19	; 0x38
    1358:	2f ab       	std	Y+55, r18	; 0x37
    135a:	8f a9       	ldd	r24, Y+55	; 0x37
    135c:	98 ad       	ldd	r25, Y+56	; 0x38
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	31 f0       	breq	.+12     	; 0x136e <ESP_vidJoinNetwork+0x34>
    1362:	2f a9       	ldd	r18, Y+55	; 0x37
    1364:	38 ad       	ldd	r19, Y+56	; 0x38
    1366:	21 30       	cpi	r18, 0x01	; 1
    1368:	31 05       	cpc	r19, r1
    136a:	a9 f1       	breq	.+106    	; 0x13d6 <ESP_vidJoinNetwork+0x9c>
    136c:	5a c0       	rjmp	.+180    	; 0x1422 <ESP_vidJoinNetwork+0xe8>
	{
	case 0:
		// format the join network command based on network parameters
		sprintf ( ATcommand ,"AT+CWJAP=\"%s\",\"%s\"\r\n",param.SSID,param.PASSWORD );
    136e:	8d b7       	in	r24, 0x3d	; 61
    1370:	9e b7       	in	r25, 0x3e	; 62
    1372:	08 97       	sbiw	r24, 0x08	; 8
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	9e bf       	out	0x3e, r25	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	8d bf       	out	0x3d, r24	; 61
    137e:	ed b7       	in	r30, 0x3d	; 61
    1380:	fe b7       	in	r31, 0x3e	; 62
    1382:	31 96       	adiw	r30, 0x01	; 1
    1384:	ce 01       	movw	r24, r28
    1386:	02 96       	adiw	r24, 0x02	; 2
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	80 83       	st	Z, r24
    138c:	80 e9       	ldi	r24, 0x90	; 144
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	93 83       	std	Z+3, r25	; 0x03
    1392:	82 83       	std	Z+2, r24	; 0x02
    1394:	8d e5       	ldi	r24, 0x5D	; 93
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	95 83       	std	Z+5, r25	; 0x05
    139a:	84 83       	std	Z+4, r24	; 0x04
    139c:	81 e7       	ldi	r24, 0x71	; 113
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	97 83       	std	Z+7, r25	; 0x07
    13a2:	86 83       	std	Z+6, r24	; 0x06
    13a4:	0e 94 29 15 	call	0x2a52	; 0x2a52 <sprintf>
    13a8:	2d b7       	in	r18, 0x3d	; 61
    13aa:	3e b7       	in	r19, 0x3e	; 62
    13ac:	28 5f       	subi	r18, 0xF8	; 248
    13ae:	3f 4f       	sbci	r19, 0xFF	; 255
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	3e bf       	out	0x3e, r19	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	2d bf       	out	0x3d, r18	; 61
		ESP8266_vidSendCommand(ATcommand);
    13ba:	ce 01       	movw	r24, r28
    13bc:	02 96       	adiw	r24, 0x02	; 2
    13be:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
		joinNetworkState++;
    13c2:	80 91 b5 02 	lds	r24, 0x02B5
    13c6:	90 91 b6 02 	lds	r25, 0x02B6
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	90 93 b6 02 	sts	0x02B6, r25
    13d0:	80 93 b5 02 	sts	0x02B5, r24
    13d4:	26 c0       	rjmp	.+76     	; 0x1422 <ESP_vidJoinNetwork+0xe8>
		break;
	case 1:
		// Wait 5000 ticks to listen to OK
		ListenReturn =ESP8266_vidListen("OK",2,5000);
    13d6:	85 ea       	ldi	r24, 0xA5	; 165
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	62 e0       	ldi	r22, 0x02	; 2
    13dc:	48 e8       	ldi	r20, 0x88	; 136
    13de:	53 e1       	ldi	r21, 0x13	; 19
    13e0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    13e4:	89 83       	std	Y+1, r24	; 0x01
		switch (ListenReturn)
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	3e ab       	std	Y+54, r19	; 0x36
    13ee:	2d ab       	std	Y+53, r18	; 0x35
    13f0:	8d a9       	ldd	r24, Y+53	; 0x35
    13f2:	9e a9       	ldd	r25, Y+54	; 0x36
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	31 f0       	breq	.+12     	; 0x1406 <ESP_vidJoinNetwork+0xcc>
    13fa:	2d a9       	ldd	r18, Y+53	; 0x35
    13fc:	3e a9       	ldd	r19, Y+54	; 0x36
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	41 f0       	breq	.+16     	; 0x1414 <ESP_vidJoinNetwork+0xda>
    1404:	0e c0       	rjmp	.+28     	; 0x1422 <ESP_vidJoinNetwork+0xe8>
		{
		case Found:
			// If Found Return connected
			joinNetworkState=0;
    1406:	10 92 b6 02 	sts	0x02B6, r1
    140a:	10 92 b5 02 	sts	0x02B5, r1
			return Connected;
    140e:	31 e0       	ldi	r19, 0x01	; 1
    1410:	3c ab       	std	Y+52, r19	; 0x34
    1412:	08 c0       	rjmp	.+16     	; 0x1424 <ESP_vidJoinNetwork+0xea>
			break;
		case Timeout:
			// If Timeout return NotConnected
			joinNetworkState=0;
    1414:	10 92 b6 02 	sts	0x02B6, r1
    1418:	10 92 b5 02 	sts	0x02B5, r1
			return NotConnected;
    141c:	87 e0       	ldi	r24, 0x07	; 7
    141e:	8c ab       	std	Y+52, r24	; 0x34
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <ESP_vidJoinNetwork+0xea>
			break;
		}
	}
	return Wait;
    1422:	1c aa       	std	Y+52, r1	; 0x34
    1424:	8c a9       	ldd	r24, Y+52	; 0x34
}
    1426:	e8 96       	adiw	r28, 0x38	; 56
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <ESP_vidCheckForIP>:

// Function To Check For IP .. Send "AT+CIFSR" .. ESP Responds with IP
uint8 ESP_vidCheckForIP()
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	2d 97       	sbiw	r28, 0x0d	; 13
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
	static uint8 checkForIpState =0;
	char ATCommand [10];
	switch( checkForIpState)
    144c:	80 91 b7 02 	lds	r24, 0x02B7
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3d 87       	std	Y+13, r19	; 0x0d
    1456:	2c 87       	std	Y+12, r18	; 0x0c
    1458:	8c 85       	ldd	r24, Y+12	; 0x0c
    145a:	9d 85       	ldd	r25, Y+13	; 0x0d
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	31 f0       	breq	.+12     	; 0x146c <ESP_vidCheckForIP+0x34>
    1460:	2c 85       	ldd	r18, Y+12	; 0x0c
    1462:	3d 85       	ldd	r19, Y+13	; 0x0d
    1464:	21 30       	cpi	r18, 0x01	; 1
    1466:	31 05       	cpc	r19, r1
    1468:	a1 f0       	breq	.+40     	; 0x1492 <ESP_vidCheckForIP+0x5a>
    146a:	21 c0       	rjmp	.+66     	; 0x14ae <ESP_vidCheckForIP+0x76>
	{

	case 0:
		sprintf(ATCommand,"AT+CIFSR\r\n");
    146c:	28 ea       	ldi	r18, 0xA8	; 168
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	b9 01       	movw	r22, r18
    1476:	4b e0       	ldi	r20, 0x0B	; 11
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <memcpy>
		ESP8266_vidSendCommand(ATCommand);
    147e:	ce 01       	movw	r24, r28
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
		checkForIpState++;
    1486:	80 91 b7 02 	lds	r24, 0x02B7
    148a:	8f 5f       	subi	r24, 0xFF	; 255
    148c:	80 93 b7 02 	sts	0x02B7, r24
    1490:	0e c0       	rjmp	.+28     	; 0x14ae <ESP_vidCheckForIP+0x76>
		break;
	case 1:
		// If ESP returned OK .. IP returned Successfully.
		if ( ESP8266_vidListen("OK",2,200) == ok )
    1492:	85 ea       	ldi	r24, 0xA5	; 165
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	62 e0       	ldi	r22, 0x02	; 2
    1498:	48 ec       	ldi	r20, 0xC8	; 200
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	29 f4       	brne	.+10     	; 0x14ae <ESP_vidCheckForIP+0x76>
		{
			checkForIpState=0;
    14a4:	10 92 b7 02 	sts	0x02B7, r1
			return 1;
    14a8:	31 e0       	ldi	r19, 0x01	; 1
    14aa:	3b 87       	std	Y+11, r19	; 0x0b
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <ESP_vidCheckForIP+0x78>
		}

	}
	return 0;
    14ae:	1b 86       	std	Y+11, r1	; 0x0b
    14b0:	8b 85       	ldd	r24, Y+11	; 0x0b

}
    14b2:	2d 96       	adiw	r28, 0x0d	; 13
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <ESP8266_vidListen>:
// Function To listen to specific word and fetch specific size of string after it
// with timeout timer to check if time is out before finding the word
uint8 ESP8266_vidListen(uint8 * wordToFind ,uint8 sizeOfStringToFetch, uint16 timeOut )
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	28 97       	sbiw	r28, 0x08	; 8
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	6b 83       	std	Y+3, r22	; 0x03
    14de:	5d 83       	std	Y+5, r21	; 0x05
    14e0:	4c 83       	std	Y+4, r20	; 0x04
	static uint16 timOutCounter=0;
	static uint8 listenStat=0;
	switch ( listenStat )
    14e2:	80 91 b8 02 	lds	r24, 0x02B8
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	38 87       	std	Y+8, r19	; 0x08
    14ec:	2f 83       	std	Y+7, r18	; 0x07
    14ee:	8f 81       	ldd	r24, Y+7	; 0x07
    14f0:	98 85       	ldd	r25, Y+8	; 0x08
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	d1 f0       	breq	.+52     	; 0x152c <ESP8266_vidListen+0x68>
    14f8:	2f 81       	ldd	r18, Y+7	; 0x07
    14fa:	38 85       	ldd	r19, Y+8	; 0x08
    14fc:	22 30       	cpi	r18, 0x02	; 2
    14fe:	31 05       	cpc	r19, r1
    1500:	21 f1       	breq	.+72     	; 0x154a <ESP8266_vidListen+0x86>
    1502:	8f 81       	ldd	r24, Y+7	; 0x07
    1504:	98 85       	ldd	r25, Y+8	; 0x08
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	09 f0       	breq	.+2      	; 0x150c <ESP8266_vidListen+0x48>
    150a:	41 c0       	rjmp	.+130    	; 0x158e <ESP8266_vidListen+0xca>
	{
	case 0 :
		// Set UART fetch the word and characters after it with specified length
		UART_vidSetRxArr(sizeOfStringToFetch,wordToFind );
    150c:	29 81       	ldd	r18, Y+1	; 0x01
    150e:	3a 81       	ldd	r19, Y+2	; 0x02
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	b9 01       	movw	r22, r18
    1514:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_vidSetRxArr>
		timOutCounter =0;
    1518:	10 92 ba 02 	sts	0x02BA, r1
    151c:	10 92 b9 02 	sts	0x02B9, r1
		listenStat++;
    1520:	80 91 b8 02 	lds	r24, 0x02B8
    1524:	8f 5f       	subi	r24, 0xFF	; 255
    1526:	80 93 b8 02 	sts	0x02B8, r24
    152a:	31 c0       	rjmp	.+98     	; 0x158e <ESP8266_vidListen+0xca>
		break;
	case 1:
		// if word is found return 1.
		if ( URxFlag ==0 )
    152c:	80 91 38 03 	lds	r24, 0x0338
    1530:	88 23       	and	r24, r24
    1532:	29 f4       	brne	.+10     	; 0x153e <ESP8266_vidListen+0x7a>
		{
			listenStat=0;
    1534:	10 92 b8 02 	sts	0x02B8, r1
			return Found ;
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	29 c0       	rjmp	.+82     	; 0x1590 <ESP8266_vidListen+0xcc>
		}
		listenStat++;
    153e:	80 91 b8 02 	lds	r24, 0x02B8
    1542:	8f 5f       	subi	r24, 0xFF	; 255
    1544:	80 93 b8 02 	sts	0x02B8, r24
    1548:	22 c0       	rjmp	.+68     	; 0x158e <ESP8266_vidListen+0xca>
		break;
	case 2:
		// if Counter reaches timeOut >> timeout error
		timOutCounter++;
    154a:	80 91 b9 02 	lds	r24, 0x02B9
    154e:	90 91 ba 02 	lds	r25, 0x02BA
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	90 93 ba 02 	sts	0x02BA, r25
    1558:	80 93 b9 02 	sts	0x02B9, r24
		if ( timOutCounter >timeOut )
    155c:	20 91 b9 02 	lds	r18, 0x02B9
    1560:	30 91 ba 02 	lds	r19, 0x02BA
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	82 17       	cp	r24, r18
    156a:	93 07       	cpc	r25, r19
    156c:	58 f4       	brcc	.+22     	; 0x1584 <ESP8266_vidListen+0xc0>
		{
			timOutCounter =0;
    156e:	10 92 ba 02 	sts	0x02BA, r1
    1572:	10 92 b9 02 	sts	0x02B9, r1
			listenStat=0;
    1576:	10 92 b8 02 	sts	0x02B8, r1
			UART_vidEndReciption();
    157a:	0e 94 17 14 	call	0x282e	; 0x282e <UART_vidEndReciption>
			return Timeout;
    157e:	22 e0       	ldi	r18, 0x02	; 2
    1580:	2e 83       	std	Y+6, r18	; 0x06
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <ESP8266_vidListen+0xcc>
		}
		listenStat--;
    1584:	80 91 b8 02 	lds	r24, 0x02B8
    1588:	81 50       	subi	r24, 0x01	; 1
    158a:	80 93 b8 02 	sts	0x02B8, r24
		break;
	}
	return ListenWait;
    158e:	1e 82       	std	Y+6, r1	; 0x06
    1590:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1592:	28 96       	adiw	r28, 0x08	; 8
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <ESP8266_u8CreateServer>:



// Create Server with Port defined as parameter
uint8 ESP8266_u8CreateServer( void )
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	67 97       	sbiw	r28, 0x17	; 23
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
	static uint8 serverState =0;
	char ATcommand[20];
	switch (serverState)
    15b8:	80 91 bb 02 	lds	r24, 0x02BB
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	3f 8b       	std	Y+23, r19	; 0x17
    15c2:	2e 8b       	std	Y+22, r18	; 0x16
    15c4:	8e 89       	ldd	r24, Y+22	; 0x16
    15c6:	9f 89       	ldd	r25, Y+23	; 0x17
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	31 f0       	breq	.+12     	; 0x15d8 <ESP8266_u8CreateServer+0x34>
    15cc:	2e 89       	ldd	r18, Y+22	; 0x16
    15ce:	3f 89       	ldd	r19, Y+23	; 0x17
    15d0:	21 30       	cpi	r18, 0x01	; 1
    15d2:	31 05       	cpc	r19, r1
    15d4:	49 f1       	breq	.+82     	; 0x1628 <ESP8266_u8CreateServer+0x84>
    15d6:	36 c0       	rjmp	.+108    	; 0x1644 <ESP8266_u8CreateServer+0xa0>
	{
	case 0:
		// create the server with port specified in parameters Structure.
		sprintf(ATcommand ,"AT+CIPSERVER=1,%d\r\n",param.port);
    15d8:	80 91 93 02 	lds	r24, 0x0293
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <ESP8266_u8CreateServer+0x3e>
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <ESP8266_u8CreateServer+0x40>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <ESP8266_u8CreateServer+0x42>
    15e6:	ed b7       	in	r30, 0x3d	; 61
    15e8:	fe b7       	in	r31, 0x3e	; 62
    15ea:	31 96       	adiw	r30, 0x01	; 1
    15ec:	ce 01       	movw	r24, r28
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	80 83       	st	Z, r24
    15f4:	83 eb       	ldi	r24, 0xB3	; 179
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	93 83       	std	Z+3, r25	; 0x03
    15fa:	82 83       	std	Z+2, r24	; 0x02
    15fc:	35 83       	std	Z+5, r19	; 0x05
    15fe:	24 83       	std	Z+4, r18	; 0x04
    1600:	0e 94 29 15 	call	0x2a52	; 0x2a52 <sprintf>
    1604:	8d b7       	in	r24, 0x3d	; 61
    1606:	9e b7       	in	r25, 0x3e	; 62
    1608:	06 96       	adiw	r24, 0x06	; 6
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	9e bf       	out	0x3e, r25	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	8d bf       	out	0x3d, r24	; 61
		ESP8266_vidSendCommand(ATcommand);
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
		serverState++;
    161c:	80 91 bb 02 	lds	r24, 0x02BB
    1620:	8f 5f       	subi	r24, 0xFF	; 255
    1622:	80 93 bb 02 	sts	0x02BB, r24
    1626:	0e c0       	rjmp	.+28     	; 0x1644 <ESP8266_u8CreateServer+0xa0>
		break;
	case 1:
		if (ESP8266_vidListen("OK",2,200)==ok)
    1628:	85 ea       	ldi	r24, 0xA5	; 165
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	62 e0       	ldi	r22, 0x02	; 2
    162e:	48 ec       	ldi	r20, 0xC8	; 200
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	29 f4       	brne	.+10     	; 0x1644 <ESP8266_u8CreateServer+0xa0>
		{
			serverState=0;
    163a:	10 92 bb 02 	sts	0x02BB, r1
			return ok;
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	9d 8b       	std	Y+21, r25	; 0x15
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <ESP8266_u8CreateServer+0xa2>
		}
		break;
	}
	return 0;
    1644:	1d 8a       	std	Y+21, r1	; 0x15
    1646:	8d 89       	ldd	r24, Y+21	; 0x15
}
    1648:	67 96       	adiw	r28, 0x17	; 23
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <ESP8266_u8CheckForConnectionRequest>:

uint8 ESP8266_u8CheckForConnectionRequest()
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	// if ",CONNECT is found there is a connection request
	if ( ESP8266_vidListen(",CONNECT",7,200) == Found )
    1664:	87 ec       	ldi	r24, 0xC7	; 199
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	67 e0       	ldi	r22, 0x07	; 7
    166a:	48 ec       	ldi	r20, 0xC8	; 200
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	19 f4       	brne	.+6      	; 0x167c <ESP8266_u8CheckForConnectionRequest+0x22>
	{
		return Found;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	0d c0       	rjmp	.+26     	; 0x1696 <ESP8266_u8CheckForConnectionRequest+0x3c>
	}
	else if ( ESP8266_vidListen(",CONNECT",7,200) == Timeout  )
    167c:	87 ec       	ldi	r24, 0xC7	; 199
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	67 e0       	ldi	r22, 0x07	; 7
    1682:	48 ec       	ldi	r20, 0xC8	; 200
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    168a:	82 30       	cpi	r24, 0x02	; 2
    168c:	19 f4       	brne	.+6      	; 0x1694 <ESP8266_u8CheckForConnectionRequest+0x3a>
		return Timeout;
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <ESP8266_u8CheckForConnectionRequest+0x3c>
	else
		return Wait;
    1694:	19 82       	std	Y+1, r1	; 0x01
    1696:	89 81       	ldd	r24, Y+1	; 0x01
}
    1698:	0f 90       	pop	r0
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <ESP8266_u8SendGETDataToOpendConnection>:

uint8 ESP8266_u8SendGETDataToOpendConnection( )
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	6b 97       	sbiw	r28, 0x1b	; 27
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
	static uint8 dataState =0;
	uint8 command [20];
	uint8 dataSize;
	uint8 SendGETListenReturn;
	switch (dataState )
    16b4:	80 91 bc 02 	lds	r24, 0x02BC
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	3b 8f       	std	Y+27, r19	; 0x1b
    16be:	2a 8f       	std	Y+26, r18	; 0x1a
    16c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	91 05       	cpc	r25, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <ESP8266_u8SendGETDataToOpendConnection+0x2c>
    16ca:	4d c0       	rjmp	.+154    	; 0x1766 <ESP8266_u8SendGETDataToOpendConnection+0xc6>
    16cc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16ce:	3b 8d       	ldd	r19, Y+27	; 0x1b
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <ESP8266_u8SendGETDataToOpendConnection+0x40>
    16d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	71 f0       	breq	.+28     	; 0x16fa <ESP8266_u8SendGETDataToOpendConnection+0x5a>
    16de:	79 c0       	rjmp	.+242    	; 0x17d2 <ESP8266_u8SendGETDataToOpendConnection+0x132>
    16e0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16e2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    16e4:	22 30       	cpi	r18, 0x02	; 2
    16e6:	31 05       	cpc	r19, r1
    16e8:	09 f4       	brne	.+2      	; 0x16ec <ESP8266_u8SendGETDataToOpendConnection+0x4c>
    16ea:	60 c0       	rjmp	.+192    	; 0x17ac <ESP8266_u8SendGETDataToOpendConnection+0x10c>
    16ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16f0:	83 30       	cpi	r24, 0x03	; 3
    16f2:	91 05       	cpc	r25, r1
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <ESP8266_u8SendGETDataToOpendConnection+0x58>
    16f6:	64 c0       	rjmp	.+200    	; 0x17c0 <ESP8266_u8SendGETDataToOpendConnection+0x120>
    16f8:	6c c0       	rjmp	.+216    	; 0x17d2 <ESP8266_u8SendGETDataToOpendConnection+0x132>
	{
	case 0:
		// send dataSize Characters to connection 0.
		for (dataSize=0;param.getRequest[dataSize]!='\0';dataSize++);
    16fa:	1a 82       	std	Y+2, r1	; 0x02
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <ESP8266_u8SendGETDataToOpendConnection+0x64>
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	8f 5f       	subi	r24, 0xFF	; 255
    1702:	8a 83       	std	Y+2, r24	; 0x02
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	fc 01       	movw	r30, r24
    170c:	eb 57       	subi	r30, 0x7B	; 123
    170e:	fe 4f       	sbci	r31, 0xFE	; 254
    1710:	80 81       	ld	r24, Z
    1712:	88 23       	and	r24, r24
    1714:	a1 f7       	brne	.-24     	; 0x16fe <ESP8266_u8SendGETDataToOpendConnection+0x5e>
		sprintf(command,"AT+CIPSEND=%d\r\n",dataSize);
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	00 d0       	rcall	.+0      	; 0x171e <ESP8266_u8SendGETDataToOpendConnection+0x7e>
    171e:	00 d0       	rcall	.+0      	; 0x1720 <ESP8266_u8SendGETDataToOpendConnection+0x80>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <ESP8266_u8SendGETDataToOpendConnection+0x82>
    1722:	ed b7       	in	r30, 0x3d	; 61
    1724:	fe b7       	in	r31, 0x3e	; 62
    1726:	31 96       	adiw	r30, 0x01	; 1
    1728:	ce 01       	movw	r24, r28
    172a:	03 96       	adiw	r24, 0x03	; 3
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	80 ed       	ldi	r24, 0xD0	; 208
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	93 83       	std	Z+3, r25	; 0x03
    1736:	82 83       	std	Z+2, r24	; 0x02
    1738:	35 83       	std	Z+5, r19	; 0x05
    173a:	24 83       	std	Z+4, r18	; 0x04
    173c:	0e 94 29 15 	call	0x2a52	; 0x2a52 <sprintf>
    1740:	2d b7       	in	r18, 0x3d	; 61
    1742:	3e b7       	in	r19, 0x3e	; 62
    1744:	2a 5f       	subi	r18, 0xFA	; 250
    1746:	3f 4f       	sbci	r19, 0xFF	; 255
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	3e bf       	out	0x3e, r19	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	2d bf       	out	0x3d, r18	; 61
		ESP8266_vidSendCommand(command);
    1752:	ce 01       	movw	r24, r28
    1754:	03 96       	adiw	r24, 0x03	; 3
    1756:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
		dataState++;
    175a:	80 91 bc 02 	lds	r24, 0x02BC
    175e:	8f 5f       	subi	r24, 0xFF	; 255
    1760:	80 93 bc 02 	sts	0x02BC, r24
    1764:	36 c0       	rjmp	.+108    	; 0x17d2 <ESP8266_u8SendGETDataToOpendConnection+0x132>
		break;
	case 1:
		SendGETListenReturn = ESP8266_vidListen("OK",2,1000);
    1766:	85 ea       	ldi	r24, 0xA5	; 165
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	62 e0       	ldi	r22, 0x02	; 2
    176c:	48 ee       	ldi	r20, 0xE8	; 232
    176e:	53 e0       	ldi	r21, 0x03	; 3
    1770:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    1774:	89 83       	std	Y+1, r24	; 0x01
		switch ( SendGETListenReturn)
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	39 8f       	std	Y+25, r19	; 0x19
    177e:	28 8f       	std	Y+24, r18	; 0x18
    1780:	88 8d       	ldd	r24, Y+24	; 0x18
    1782:	99 8d       	ldd	r25, Y+25	; 0x19
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	31 f0       	breq	.+12     	; 0x1796 <ESP8266_u8SendGETDataToOpendConnection+0xf6>
    178a:	28 8d       	ldd	r18, Y+24	; 0x18
    178c:	39 8d       	ldd	r19, Y+25	; 0x19
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	39 f0       	breq	.+14     	; 0x17a2 <ESP8266_u8SendGETDataToOpendConnection+0x102>
    1794:	1e c0       	rjmp	.+60     	; 0x17d2 <ESP8266_u8SendGETDataToOpendConnection+0x132>
		{
		case Found:
			dataState++;
    1796:	80 91 bc 02 	lds	r24, 0x02BC
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	80 93 bc 02 	sts	0x02BC, r24
    17a0:	18 c0       	rjmp	.+48     	; 0x17d2 <ESP8266_u8SendGETDataToOpendConnection+0x132>
			break;
		case Timeout:
			dataState=0;
    17a2:	10 92 bc 02 	sts	0x02BC, r1
			return NotConnected;
    17a6:	37 e0       	ldi	r19, 0x07	; 7
    17a8:	3f 8b       	std	Y+23, r19	; 0x17
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <ESP8266_u8SendGETDataToOpendConnection+0x134>
			break;
		default:break;
		}
		break;
	case 2:
		ESP8266_vidSendCommand(param.getRequest);
    17ac:	85 e8       	ldi	r24, 0x85	; 133
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
		dataState++;
    17b4:	80 91 bc 02 	lds	r24, 0x02BC
    17b8:	8f 5f       	subi	r24, 0xFF	; 255
    17ba:	80 93 bc 02 	sts	0x02BC, r24
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <ESP8266_u8SendGETDataToOpendConnection+0x132>
		break;
	case 3:
		if ( UTxFlag == 0)
    17c0:	80 91 3a 03 	lds	r24, 0x033A
    17c4:	88 23       	and	r24, r24
    17c6:	29 f4       	brne	.+10     	; 0x17d2 <ESP8266_u8SendGETDataToOpendConnection+0x132>
		{
			dataState =0;
    17c8:	10 92 bc 02 	sts	0x02BC, r1
			return DataSent;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	8f 8b       	std	Y+23, r24	; 0x17
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <ESP8266_u8SendGETDataToOpendConnection+0x134>
		}
		break;
	}
	return Wait;
    17d2:	1f 8a       	std	Y+23, r1	; 0x17
    17d4:	8f 89       	ldd	r24, Y+23	; 0x17
}
    17d6:	6b 96       	adiw	r28, 0x1b	; 27
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <ESP8266_u8NumberOfConnections>:

uint8 ESP8266_u8NumberOfConnections(uint8 connections)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	68 97       	sbiw	r28, 0x18	; 24
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	8d 8b       	std	Y+21, r24	; 0x15
static uint8 numberOfConnectionsState =0;
uint8 command[20];
switch (numberOfConnectionsState)
    17fe:	80 91 bd 02 	lds	r24, 0x02BD
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	38 8f       	std	Y+24, r19	; 0x18
    1808:	2f 8b       	std	Y+23, r18	; 0x17
    180a:	8f 89       	ldd	r24, Y+23	; 0x17
    180c:	98 8d       	ldd	r25, Y+24	; 0x18
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	31 f0       	breq	.+12     	; 0x181e <ESP8266_u8NumberOfConnections+0x36>
    1812:	2f 89       	ldd	r18, Y+23	; 0x17
    1814:	38 8d       	ldd	r19, Y+24	; 0x18
    1816:	21 30       	cpi	r18, 0x01	; 1
    1818:	31 05       	cpc	r19, r1
    181a:	41 f1       	breq	.+80     	; 0x186c <ESP8266_u8NumberOfConnections+0x84>
    181c:	35 c0       	rjmp	.+106    	; 0x1888 <ESP8266_u8NumberOfConnections+0xa0>
{

case 0:
	// specify the connection to be only 1
	sprintf(command,"AT+CIPMUX=%d",connections);
    181e:	8d 89       	ldd	r24, Y+21	; 0x15
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	00 d0       	rcall	.+0      	; 0x1826 <ESP8266_u8NumberOfConnections+0x3e>
    1826:	00 d0       	rcall	.+0      	; 0x1828 <ESP8266_u8NumberOfConnections+0x40>
    1828:	00 d0       	rcall	.+0      	; 0x182a <ESP8266_u8NumberOfConnections+0x42>
    182a:	ed b7       	in	r30, 0x3d	; 61
    182c:	fe b7       	in	r31, 0x3e	; 62
    182e:	31 96       	adiw	r30, 0x01	; 1
    1830:	ce 01       	movw	r24, r28
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
    1838:	80 ee       	ldi	r24, 0xE0	; 224
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	93 83       	std	Z+3, r25	; 0x03
    183e:	82 83       	std	Z+2, r24	; 0x02
    1840:	35 83       	std	Z+5, r19	; 0x05
    1842:	24 83       	std	Z+4, r18	; 0x04
    1844:	0e 94 29 15 	call	0x2a52	; 0x2a52 <sprintf>
    1848:	8d b7       	in	r24, 0x3d	; 61
    184a:	9e b7       	in	r25, 0x3e	; 62
    184c:	06 96       	adiw	r24, 0x06	; 6
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	9e bf       	out	0x3e, r25	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	8d bf       	out	0x3d, r24	; 61
	ESP8266_vidSendCommand( command );
    1858:	ce 01       	movw	r24, r28
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
	numberOfConnectionsState++;
    1860:	80 91 bd 02 	lds	r24, 0x02BD
    1864:	8f 5f       	subi	r24, 0xFF	; 255
    1866:	80 93 bd 02 	sts	0x02BD, r24
    186a:	0e c0       	rjmp	.+28     	; 0x1888 <ESP8266_u8NumberOfConnections+0xa0>
	break;
case 1:
	if (ESP8266_vidListen("OK",2,200)==ok)
    186c:	85 ea       	ldi	r24, 0xA5	; 165
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	62 e0       	ldi	r22, 0x02	; 2
    1872:	48 ec       	ldi	r20, 0xC8	; 200
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	29 f4       	brne	.+10     	; 0x1888 <ESP8266_u8NumberOfConnections+0xa0>
	{
		numberOfConnectionsState=0;
    187e:	10 92 bd 02 	sts	0x02BD, r1
		return ok;
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	9e 8b       	std	Y+22, r25	; 0x16
    1886:	01 c0       	rjmp	.+2      	; 0x188a <ESP8266_u8NumberOfConnections+0xa2>
	}
	break;
}
	return Wait;
    1888:	1e 8a       	std	Y+22, r1	; 0x16
    188a:	8e 89       	ldd	r24, Y+22	; 0x16
}
    188c:	68 96       	adiw	r28, 0x18	; 24
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <ESP8266_u8ConnectToHost>:

uint8 ESP8266_u8ConnectToHost( )
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <ESP8266_u8ConnectToHost+0x6>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <ESP8266_u8ConnectToHost+0x8>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <ESP8266_u8ConnectToHost+0xa>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
static char ATCommand [100];
static uint8 connectToHostState =0;
uint8 connectToHostListenReturn;
switch ( connectToHostState)
    18ac:	80 91 be 02 	lds	r24, 0x02BE
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3e 83       	std	Y+6, r19	; 0x06
    18b6:	2d 83       	std	Y+5, r18	; 0x05
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	31 f0       	breq	.+12     	; 0x18cc <ESP8266_u8ConnectToHost+0x2e>
    18c0:	2d 81       	ldd	r18, Y+5	; 0x05
    18c2:	3e 81       	ldd	r19, Y+6	; 0x06
    18c4:	21 30       	cpi	r18, 0x01	; 1
    18c6:	31 05       	cpc	r19, r1
    18c8:	b9 f1       	breq	.+110    	; 0x1938 <ESP8266_u8ConnectToHost+0x9a>
    18ca:	58 c0       	rjmp	.+176    	; 0x197c <ESP8266_u8ConnectToHost+0xde>
{
case 0:
	sprintf( ATCommand,"AT+CIPSTART=\"%s\",\"%s\",%d\r\n",param.ConnectionType, param.host, param.port);
    18cc:	80 91 93 02 	lds	r24, 0x0293
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	8d b7       	in	r24, 0x3d	; 61
    18d6:	9e b7       	in	r25, 0x3e	; 62
    18d8:	0a 97       	sbiw	r24, 0x0a	; 10
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	9e bf       	out	0x3e, r25	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	8d bf       	out	0x3d, r24	; 61
    18e4:	ed b7       	in	r30, 0x3d	; 61
    18e6:	fe b7       	in	r31, 0x3e	; 62
    18e8:	31 96       	adiw	r30, 0x01	; 1
    18ea:	8f eb       	ldi	r24, 0xBF	; 191
    18ec:	92 e0       	ldi	r25, 0x02	; 2
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	80 83       	st	Z, r24
    18f2:	8d ee       	ldi	r24, 0xED	; 237
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	93 83       	std	Z+3, r25	; 0x03
    18f8:	82 83       	std	Z+2, r24	; 0x02
    18fa:	84 e9       	ldi	r24, 0x94	; 148
    18fc:	92 e0       	ldi	r25, 0x02	; 2
    18fe:	95 83       	std	Z+5, r25	; 0x05
    1900:	84 83       	std	Z+4, r24	; 0x04
    1902:	87 e5       	ldi	r24, 0x57	; 87
    1904:	92 e0       	ldi	r25, 0x02	; 2
    1906:	97 83       	std	Z+7, r25	; 0x07
    1908:	86 83       	std	Z+6, r24	; 0x06
    190a:	31 87       	std	Z+9, r19	; 0x09
    190c:	20 87       	std	Z+8, r18	; 0x08
    190e:	0e 94 29 15 	call	0x2a52	; 0x2a52 <sprintf>
    1912:	2d b7       	in	r18, 0x3d	; 61
    1914:	3e b7       	in	r19, 0x3e	; 62
    1916:	26 5f       	subi	r18, 0xF6	; 246
    1918:	3f 4f       	sbci	r19, 0xFF	; 255
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	3e bf       	out	0x3e, r19	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	2d bf       	out	0x3d, r18	; 61
	ESP8266_vidSendCommand(ATCommand);
    1924:	8f eb       	ldi	r24, 0xBF	; 191
    1926:	92 e0       	ldi	r25, 0x02	; 2
    1928:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
	connectToHostState++;
    192c:	80 91 be 02 	lds	r24, 0x02BE
    1930:	8f 5f       	subi	r24, 0xFF	; 255
    1932:	80 93 be 02 	sts	0x02BE, r24
    1936:	22 c0       	rjmp	.+68     	; 0x197c <ESP8266_u8ConnectToHost+0xde>
	break;
case 1:
	connectToHostListenReturn = ESP8266_vidListen("OK",2,3000);
    1938:	85 ea       	ldi	r24, 0xA5	; 165
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	62 e0       	ldi	r22, 0x02	; 2
    193e:	48 eb       	ldi	r20, 0xB8	; 184
    1940:	5b e0       	ldi	r21, 0x0B	; 11
    1942:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    1946:	89 83       	std	Y+1, r24	; 0x01
	switch ( connectToHostListenReturn)
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3c 83       	std	Y+4, r19	; 0x04
    1950:	2b 83       	std	Y+3, r18	; 0x03
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	91 05       	cpc	r25, r1
    195a:	31 f0       	breq	.+12     	; 0x1968 <ESP8266_u8ConnectToHost+0xca>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	31 f0       	breq	.+12     	; 0x1972 <ESP8266_u8ConnectToHost+0xd4>
    1966:	0a c0       	rjmp	.+20     	; 0x197c <ESP8266_u8ConnectToHost+0xde>
	{
	case Found:
		connectToHostState=0;
    1968:	10 92 be 02 	sts	0x02BE, r1
		return Connected;
    196c:	31 e0       	ldi	r19, 0x01	; 1
    196e:	3a 83       	std	Y+2, r19	; 0x02
    1970:	06 c0       	rjmp	.+12     	; 0x197e <ESP8266_u8ConnectToHost+0xe0>
		break;
	case Timeout:
		connectToHostState=0;
    1972:	10 92 be 02 	sts	0x02BE, r1
		return NotConnected;
    1976:	87 e0       	ldi	r24, 0x07	; 7
    1978:	8a 83       	std	Y+2, r24	; 0x02
    197a:	01 c0       	rjmp	.+2      	; 0x197e <ESP8266_u8ConnectToHost+0xe0>
		break;
	default:break;
	}
}
return Wait;
    197c:	1a 82       	std	Y+2, r1	; 0x02
    197e:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1980:	26 96       	adiw	r28, 0x06	; 6
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <ESP8266_vidCloseConnection>:


uint8 ESP8266_vidCloseConnection()
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	67 97       	sbiw	r28, 0x17	; 23
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
	static uint8 sendState =0;
	uint8 command [20];
	switch (sendState)
    19a6:	80 91 23 03 	lds	r24, 0x0323
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	3f 8b       	std	Y+23, r19	; 0x17
    19b0:	2e 8b       	std	Y+22, r18	; 0x16
    19b2:	8e 89       	ldd	r24, Y+22	; 0x16
    19b4:	9f 89       	ldd	r25, Y+23	; 0x17
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	31 f0       	breq	.+12     	; 0x19c6 <ESP8266_vidCloseConnection+0x34>
    19ba:	2e 89       	ldd	r18, Y+22	; 0x16
    19bc:	3f 89       	ldd	r19, Y+23	; 0x17
    19be:	21 30       	cpi	r18, 0x01	; 1
    19c0:	31 05       	cpc	r19, r1
    19c2:	a1 f0       	breq	.+40     	; 0x19ec <ESP8266_vidCloseConnection+0x5a>
    19c4:	1c c0       	rjmp	.+56     	; 0x19fe <ESP8266_vidCloseConnection+0x6c>
	{
	case 0:
		// close connection 0
		sprintf(command,"AT+CIPCLOSE=0\r\n");
    19c6:	28 e0       	ldi	r18, 0x08	; 8
    19c8:	31 e0       	ldi	r19, 0x01	; 1
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	b9 01       	movw	r22, r18
    19d0:	40 e1       	ldi	r20, 0x10	; 16
    19d2:	50 e0       	ldi	r21, 0x00	; 0
    19d4:	0e 94 20 15 	call	0x2a40	; 0x2a40 <memcpy>
		ESP8266_vidSendCommand(command);
    19d8:	ce 01       	movw	r24, r28
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
		sendState++;
    19e0:	80 91 23 03 	lds	r24, 0x0323
    19e4:	8f 5f       	subi	r24, 0xFF	; 255
    19e6:	80 93 23 03 	sts	0x0323, r24
    19ea:	09 c0       	rjmp	.+18     	; 0x19fe <ESP8266_vidCloseConnection+0x6c>
		break;
	case 1:
		if ( UTxFlag ==0)
    19ec:	80 91 3a 03 	lds	r24, 0x033A
    19f0:	88 23       	and	r24, r24
    19f2:	29 f4       	brne	.+10     	; 0x19fe <ESP8266_vidCloseConnection+0x6c>
		{
			sendState=0;
    19f4:	10 92 23 03 	sts	0x0323, r1
			return 1;
    19f8:	31 e0       	ldi	r19, 0x01	; 1
    19fa:	3d 8b       	std	Y+21, r19	; 0x15
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <ESP8266_vidCloseConnection+0x6e>
		}
		break;
	}
	return 0;
    19fe:	1d 8a       	std	Y+21, r1	; 0x15
    1a00:	8d 89       	ldd	r24, Y+21	; 0x15
}
    1a02:	67 96       	adiw	r28, 0x17	; 23
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <ESP8266_Init>:

uint8 ESP8266_Init()
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	62 97       	sbiw	r28, 0x12	; 18
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
	static uint8 EspInitCase = 0;
	char command[15];
	switch( EspInitCase)
    1a28:	80 91 24 03 	lds	r24, 0x0324
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	3a 8b       	std	Y+18, r19	; 0x12
    1a32:	29 8b       	std	Y+17, r18	; 0x11
    1a34:	89 89       	ldd	r24, Y+17	; 0x11
    1a36:	9a 89       	ldd	r25, Y+18	; 0x12
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	01 f1       	breq	.+64     	; 0x1a7e <ESP8266_Init+0x6a>
    1a3e:	29 89       	ldd	r18, Y+17	; 0x11
    1a40:	3a 89       	ldd	r19, Y+18	; 0x12
    1a42:	22 30       	cpi	r18, 0x02	; 2
    1a44:	31 05       	cpc	r19, r1
    1a46:	2c f4       	brge	.+10     	; 0x1a52 <ESP8266_Init+0x3e>
    1a48:	89 89       	ldd	r24, Y+17	; 0x11
    1a4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	69 f0       	breq	.+26     	; 0x1a6a <ESP8266_Init+0x56>
    1a50:	5e c0       	rjmp	.+188    	; 0x1b0e <ESP8266_Init+0xfa>
    1a52:	29 89       	ldd	r18, Y+17	; 0x11
    1a54:	3a 89       	ldd	r19, Y+18	; 0x12
    1a56:	22 30       	cpi	r18, 0x02	; 2
    1a58:	31 05       	cpc	r19, r1
    1a5a:	09 f1       	breq	.+66     	; 0x1a9e <ESP8266_Init+0x8a>
    1a5c:	89 89       	ldd	r24, Y+17	; 0x11
    1a5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a60:	83 30       	cpi	r24, 0x03	; 3
    1a62:	91 05       	cpc	r25, r1
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <ESP8266_Init+0x54>
    1a66:	44 c0       	rjmp	.+136    	; 0x1af0 <ESP8266_Init+0xdc>
    1a68:	52 c0       	rjmp	.+164    	; 0x1b0e <ESP8266_Init+0xfa>
	{
	case 0 :
		// SEND AT To check ESP is active or not
		// UART_vidSetTxArr("AT\r\n",0);
		ESP8266_vidSendCommand("AT\r\n");
    1a6a:	88 e1       	ldi	r24, 0x18	; 24
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
    1a6e:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
		EspInitCase++;
    1a72:	80 91 24 03 	lds	r24, 0x0324
    1a76:	8f 5f       	subi	r24, 0xFF	; 255
    1a78:	80 93 24 03 	sts	0x0324, r24
    1a7c:	4d c0       	rjmp	.+154    	; 0x1b18 <ESP8266_Init+0x104>
		break;
	case 1:
		if ( ESP8266_vidListen("OK",2,200) == 1)
    1a7e:	85 ea       	ldi	r24, 0xA5	; 165
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	62 e0       	ldi	r22, 0x02	; 2
    1a84:	48 ec       	ldi	r20, 0xC8	; 200
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <ESP8266_Init+0x7e>
    1a90:	43 c0       	rjmp	.+134    	; 0x1b18 <ESP8266_Init+0x104>
		EspInitCase++;
    1a92:	80 91 24 03 	lds	r24, 0x0324
    1a96:	8f 5f       	subi	r24, 0xFF	; 255
    1a98:	80 93 24 03 	sts	0x0324, r24
    1a9c:	3d c0       	rjmp	.+122    	; 0x1b18 <ESP8266_Init+0x104>
		{// Handle Error cases.
		}
		break;
	case 2:
		// Send the mode specified in ESP_INITPARAM struct
		sprintf(command , "AT+CWMODE=%d\r\n",param.mode);
    1a9e:	80 91 5c 01 	lds	r24, 0x015C
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <ESP8266_Init+0x94>
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <ESP8266_Init+0x96>
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <ESP8266_Init+0x98>
    1aac:	ed b7       	in	r30, 0x3d	; 61
    1aae:	fe b7       	in	r31, 0x3e	; 62
    1ab0:	31 96       	adiw	r30, 0x01	; 1
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	80 83       	st	Z, r24
    1aba:	8d e1       	ldi	r24, 0x1D	; 29
    1abc:	91 e0       	ldi	r25, 0x01	; 1
    1abe:	93 83       	std	Z+3, r25	; 0x03
    1ac0:	82 83       	std	Z+2, r24	; 0x02
    1ac2:	35 83       	std	Z+5, r19	; 0x05
    1ac4:	24 83       	std	Z+4, r18	; 0x04
    1ac6:	0e 94 29 15 	call	0x2a52	; 0x2a52 <sprintf>
    1aca:	2d b7       	in	r18, 0x3d	; 61
    1acc:	3e b7       	in	r19, 0x3e	; 62
    1ace:	2a 5f       	subi	r18, 0xFA	; 250
    1ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	3e bf       	out	0x3e, r19	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	2d bf       	out	0x3d, r18	; 61
		ESP8266_vidSendCommand(command);
    1adc:	ce 01       	movw	r24, r28
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
		EspInitCase++;
    1ae4:	80 91 24 03 	lds	r24, 0x0324
    1ae8:	8f 5f       	subi	r24, 0xFF	; 255
    1aea:	80 93 24 03 	sts	0x0324, r24
    1aee:	14 c0       	rjmp	.+40     	; 0x1b18 <ESP8266_Init+0x104>
		break;
	case 3:
		if (  ESP8266_vidListen("OK",2,200) == ok )
    1af0:	85 ea       	ldi	r24, 0xA5	; 165
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	62 e0       	ldi	r22, 0x02	; 2
    1af6:	48 ec       	ldi	r20, 0xC8	; 200
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	59 f4       	brne	.+22     	; 0x1b18 <ESP8266_Init+0x104>
			EspInitCase++;
    1b02:	80 91 24 03 	lds	r24, 0x0324
    1b06:	8f 5f       	subi	r24, 0xFF	; 255
    1b08:	80 93 24 03 	sts	0x0324, r24
    1b0c:	05 c0       	rjmp	.+10     	; 0x1b18 <ESP8266_Init+0x104>
		else
		{// Handle Error cases.
		}
		break;
	default :
		EspInitCase=0;
    1b0e:	10 92 24 03 	sts	0x0324, r1
		return 1;
    1b12:	31 e0       	ldi	r19, 0x01	; 1
    1b14:	38 8b       	std	Y+16, r19	; 0x10
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <ESP8266_Init+0x106>
		break;
	}
	return 0;
    1b18:	18 8a       	std	Y+16, r1	; 0x10
    1b1a:	88 89       	ldd	r24, Y+16	; 0x10
}
    1b1c:	62 96       	adiw	r28, 0x12	; 18
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <ESP8266_u8Reset>:

uint8 ESP8266_u8Reset()
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	62 97       	sbiw	r28, 0x12	; 18
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61

	static uint8 ResetState =0;
	char ATCommand [15];
	switch ( ResetState)
    1b42:	80 91 25 03 	lds	r24, 0x0325
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	3a 8b       	std	Y+18, r19	; 0x12
    1b4c:	29 8b       	std	Y+17, r18	; 0x11
    1b4e:	89 89       	ldd	r24, Y+17	; 0x11
    1b50:	9a 89       	ldd	r25, Y+18	; 0x12
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	31 f0       	breq	.+12     	; 0x1b62 <ESP8266_u8Reset+0x34>
    1b56:	29 89       	ldd	r18, Y+17	; 0x11
    1b58:	3a 89       	ldd	r19, Y+18	; 0x12
    1b5a:	21 30       	cpi	r18, 0x01	; 1
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	a1 f0       	breq	.+40     	; 0x1b88 <ESP8266_u8Reset+0x5a>
    1b60:	21 c0       	rjmp	.+66     	; 0x1ba4 <ESP8266_u8Reset+0x76>
	{
	case 0:

		sprintf( ATCommand, "AT+RST\r\n");
    1b62:	2c e2       	ldi	r18, 0x2C	; 44
    1b64:	31 e0       	ldi	r19, 0x01	; 1
    1b66:	ce 01       	movw	r24, r28
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	b9 01       	movw	r22, r18
    1b6c:	49 e0       	ldi	r20, 0x09	; 9
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	0e 94 20 15 	call	0x2a40	; 0x2a40 <memcpy>
		ESP8266_vidSendCommand(ATCommand);
    1b74:	ce 01       	movw	r24, r28
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
		ResetState++;
    1b7c:	80 91 25 03 	lds	r24, 0x0325
    1b80:	8f 5f       	subi	r24, 0xFF	; 255
    1b82:	80 93 25 03 	sts	0x0325, r24
    1b86:	0e c0       	rjmp	.+28     	; 0x1ba4 <ESP8266_u8Reset+0x76>
		break;
	case 1:
		if ( ESP8266_vidListen("Ai-Thinker",2,2000) == ok )
    1b88:	85 e3       	ldi	r24, 0x35	; 53
    1b8a:	91 e0       	ldi	r25, 0x01	; 1
    1b8c:	62 e0       	ldi	r22, 0x02	; 2
    1b8e:	40 ed       	ldi	r20, 0xD0	; 208
    1b90:	57 e0       	ldi	r21, 0x07	; 7
    1b92:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	29 f4       	brne	.+10     	; 0x1ba4 <ESP8266_u8Reset+0x76>
		{
			ResetState =0;
    1b9a:	10 92 25 03 	sts	0x0325, r1
			return ok;
    1b9e:	31 e0       	ldi	r19, 0x01	; 1
    1ba0:	38 8b       	std	Y+16, r19	; 0x10
    1ba2:	01 c0       	rjmp	.+2      	; 0x1ba6 <ESP8266_u8Reset+0x78>
		}
		break;
	}
	return Wait;
    1ba4:	18 8a       	std	Y+16, r1	; 0x10
    1ba6:	88 89       	ldd	r24, Y+16	; 0x10

}
    1ba8:	62 96       	adiw	r28, 0x12	; 18
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <ESP8266_vidDeepSleap>:

void ESP8266_vidDeepSleap(uint8 ms)
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	65 97       	sbiw	r28, 0x15	; 21
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	8d 8b       	std	Y+21, r24	; 0x15
char ATCommand [20];
sprintf	(ATCommand,"AT+GSLP=%d",ms);
    1bd0:	8d 89       	ldd	r24, Y+21	; 0x15
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <ESP8266_vidDeepSleap+0x1e>
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <ESP8266_vidDeepSleap+0x20>
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <ESP8266_vidDeepSleap+0x22>
    1bdc:	ed b7       	in	r30, 0x3d	; 61
    1bde:	fe b7       	in	r31, 0x3e	; 62
    1be0:	31 96       	adiw	r30, 0x01	; 1
    1be2:	ce 01       	movw	r24, r28
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	80 83       	st	Z, r24
    1bea:	80 e4       	ldi	r24, 0x40	; 64
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	93 83       	std	Z+3, r25	; 0x03
    1bf0:	82 83       	std	Z+2, r24	; 0x02
    1bf2:	35 83       	std	Z+5, r19	; 0x05
    1bf4:	24 83       	std	Z+4, r18	; 0x04
    1bf6:	0e 94 29 15 	call	0x2a52	; 0x2a52 <sprintf>
    1bfa:	8d b7       	in	r24, 0x3d	; 61
    1bfc:	9e b7       	in	r25, 0x3e	; 62
    1bfe:	06 96       	adiw	r24, 0x06	; 6
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	9e bf       	out	0x3e, r25	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	8d bf       	out	0x3d, r24	; 61
ESP8266_vidSendCommand(ATCommand);
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	0e 94 8c 09 	call	0x1318	; 0x1318 <ESP8266_vidSendCommand>
}
    1c12:	65 96       	adiw	r28, 0x15	; 21
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <ESP8266_Example>:
ESPReset
};

/////// Example //////////////
uint8 ESP8266_Example()
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	2b 97       	sbiw	r28, 0x0b	; 11
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61

	static uint8 ret =0;
	static uint8 EspExampleCase = ESPCheckStatus;
	uint8 ListenReturn;
	switch( EspExampleCase)
    1c38:	80 91 26 03 	lds	r24, 0x0326
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	3b 87       	std	Y+11, r19	; 0x0b
    1c42:	2a 87       	std	Y+10, r18	; 0x0a
    1c44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c48:	83 30       	cpi	r24, 0x03	; 3
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <ESP8266_Example+0x2c>
    1c4e:	88 c0       	rjmp	.+272    	; 0x1d60 <ESP8266_Example+0x13c>
    1c50:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c52:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c54:	24 30       	cpi	r18, 0x04	; 4
    1c56:	31 05       	cpc	r19, r1
    1c58:	8c f4       	brge	.+34     	; 0x1c7c <ESP8266_Example+0x58>
    1c5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	91 05       	cpc	r25, r1
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <ESP8266_Example+0x42>
    1c64:	59 c0       	rjmp	.+178    	; 0x1d18 <ESP8266_Example+0xf4>
    1c66:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c68:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c6a:	22 30       	cpi	r18, 0x02	; 2
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	0c f0       	brlt	.+2      	; 0x1c72 <ESP8266_Example+0x4e>
    1c70:	5c c0       	rjmp	.+184    	; 0x1d2a <ESP8266_Example+0x106>
    1c72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	a1 f0       	breq	.+40     	; 0x1ca2 <ESP8266_Example+0x7e>
    1c7a:	bc c0       	rjmp	.+376    	; 0x1df4 <ESP8266_Example+0x1d0>
    1c7c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c7e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c80:	25 30       	cpi	r18, 0x05	; 5
    1c82:	31 05       	cpc	r19, r1
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <ESP8266_Example+0x64>
    1c86:	a5 c0       	rjmp	.+330    	; 0x1dd2 <ESP8266_Example+0x1ae>
    1c88:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c8c:	85 30       	cpi	r24, 0x05	; 5
    1c8e:	91 05       	cpc	r25, r1
    1c90:	0c f4       	brge	.+2      	; 0x1c94 <ESP8266_Example+0x70>
    1c92:	80 c0       	rjmp	.+256    	; 0x1d94 <ESP8266_Example+0x170>
    1c94:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c96:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c98:	26 30       	cpi	r18, 0x06	; 6
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <ESP8266_Example+0x7c>
    1c9e:	a3 c0       	rjmp	.+326    	; 0x1de6 <ESP8266_Example+0x1c2>
    1ca0:	a9 c0       	rjmp	.+338    	; 0x1df4 <ESP8266_Example+0x1d0>
	{
	case ESPCheckStatus:
		ret=0;
    1ca2:	10 92 27 03 	sts	0x0327, r1
		ListenReturn = ESP8266_u8CheckStatues();
    1ca6:	0e 94 16 09 	call	0x122c	; 0x122c <ESP8266_u8CheckStatues>
    1caa:	89 83       	std	Y+1, r24	; 0x01
		switch ( ListenReturn)
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	39 87       	std	Y+9, r19	; 0x09
    1cb4:	28 87       	std	Y+8, r18	; 0x08
    1cb6:	88 85       	ldd	r24, Y+8	; 0x08
    1cb8:	99 85       	ldd	r25, Y+9	; 0x09
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	01 f1       	breq	.+64     	; 0x1d00 <ESP8266_Example+0xdc>
    1cc0:	28 85       	ldd	r18, Y+8	; 0x08
    1cc2:	39 85       	ldd	r19, Y+9	; 0x09
    1cc4:	25 30       	cpi	r18, 0x05	; 5
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	5c f4       	brge	.+22     	; 0x1ce0 <ESP8266_Example+0xbc>
    1cca:	88 85       	ldd	r24, Y+8	; 0x08
    1ccc:	99 85       	ldd	r25, Y+9	; 0x09
    1cce:	82 30       	cpi	r24, 0x02	; 2
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	b1 f0       	breq	.+44     	; 0x1d00 <ESP8266_Example+0xdc>
    1cd4:	28 85       	ldd	r18, Y+8	; 0x08
    1cd6:	39 85       	ldd	r19, Y+9	; 0x09
    1cd8:	23 30       	cpi	r18, 0x03	; 3
    1cda:	31 05       	cpc	r19, r1
    1cdc:	69 f0       	breq	.+26     	; 0x1cf8 <ESP8266_Example+0xd4>
    1cde:	8a c0       	rjmp	.+276    	; 0x1df4 <ESP8266_Example+0x1d0>
    1ce0:	88 85       	ldd	r24, Y+8	; 0x08
    1ce2:	99 85       	ldd	r25, Y+9	; 0x09
    1ce4:	85 30       	cpi	r24, 0x05	; 5
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	79 f0       	breq	.+30     	; 0x1d08 <ESP8266_Example+0xe4>
    1cea:	28 85       	ldd	r18, Y+8	; 0x08
    1cec:	39 85       	ldd	r19, Y+9	; 0x09
    1cee:	28 30       	cpi	r18, 0x08	; 8
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	0c f0       	brlt	.+2      	; 0x1cf6 <ESP8266_Example+0xd2>
    1cf4:	7f c0       	rjmp	.+254    	; 0x1df4 <ESP8266_Example+0x1d0>
    1cf6:	0c c0       	rjmp	.+24     	; 0x1d10 <ESP8266_Example+0xec>
		{
		case TRANSMISSION_CONNECTED:
			EspExampleCase=ESPSendGetRequest;
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	80 93 26 03 	sts	0x0326, r24
    1cfe:	7a c0       	rjmp	.+244    	; 0x1df4 <ESP8266_Example+0x1d0>
			break;
		case CONNECTED_TO_AP:
		case TRANSMISSION_DISCONNECTED:
			EspExampleCase = ESPConnectToHost;
    1d00:	82 e0       	ldi	r24, 0x02	; 2
    1d02:	80 93 26 03 	sts	0x0326, r24
    1d06:	76 c0       	rjmp	.+236    	; 0x1df4 <ESP8266_Example+0x1d0>
			break;
		case NOT_CONNECTED_TO_AP:
			EspExampleCase = ESPJoinNetWork;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	80 93 26 03 	sts	0x0326, r24
    1d0e:	72 c0       	rjmp	.+228    	; 0x1df4 <ESP8266_Example+0x1d0>
			break;
		case NotConnected:
		case UNKNOWN_ERROR:
			EspExampleCase=ESPReset;
    1d10:	86 e0       	ldi	r24, 0x06	; 6
    1d12:	80 93 26 03 	sts	0x0326, r24
    1d16:	6e c0       	rjmp	.+220    	; 0x1df4 <ESP8266_Example+0x1d0>
		}
		break;
	case ESPJoinNetWork:
		if ( ESP_vidJoinNetwork() == Connected)
    1d18:	0e 94 9d 09 	call	0x133a	; 0x133a <ESP_vidJoinNetwork>
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <ESP8266_Example+0xfe>
    1d20:	69 c0       	rjmp	.+210    	; 0x1df4 <ESP8266_Example+0x1d0>
			EspExampleCase = ESPConnectToHost;
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	80 93 26 03 	sts	0x0326, r24
    1d28:	65 c0       	rjmp	.+202    	; 0x1df4 <ESP8266_Example+0x1d0>
		break;
	case ESPConnectToHost:
		ListenReturn = ESP8266_u8ConnectToHost();
    1d2a:	0e 94 4f 0c 	call	0x189e	; 0x189e <ESP8266_u8ConnectToHost>
    1d2e:	89 83       	std	Y+1, r24	; 0x01
		switch ( ListenReturn)
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	3f 83       	std	Y+7, r19	; 0x07
    1d38:	2e 83       	std	Y+6, r18	; 0x06
    1d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	91 05       	cpc	r25, r1
    1d42:	31 f0       	breq	.+12     	; 0x1d50 <ESP8266_Example+0x12c>
    1d44:	2e 81       	ldd	r18, Y+6	; 0x06
    1d46:	3f 81       	ldd	r19, Y+7	; 0x07
    1d48:	27 30       	cpi	r18, 0x07	; 7
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	29 f0       	breq	.+10     	; 0x1d58 <ESP8266_Example+0x134>
    1d4e:	52 c0       	rjmp	.+164    	; 0x1df4 <ESP8266_Example+0x1d0>
		{
		case Connected:
			EspExampleCase = ESPSendGetRequest;
    1d50:	83 e0       	ldi	r24, 0x03	; 3
    1d52:	80 93 26 03 	sts	0x0326, r24
    1d56:	4e c0       	rjmp	.+156    	; 0x1df4 <ESP8266_Example+0x1d0>
			break;
		case NotConnected:
			EspExampleCase=ESPReset;
    1d58:	86 e0       	ldi	r24, 0x06	; 6
    1d5a:	80 93 26 03 	sts	0x0326, r24
    1d5e:	4a c0       	rjmp	.+148    	; 0x1df4 <ESP8266_Example+0x1d0>
			break;
		}

		break;
	case ESPSendGetRequest:
		ListenReturn = ESP8266_u8SendGETDataToOpendConnection();
    1d60:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <ESP8266_u8SendGETDataToOpendConnection>
    1d64:	89 83       	std	Y+1, r24	; 0x01
		switch ( ListenReturn)
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	3d 83       	std	Y+5, r19	; 0x05
    1d6e:	2c 83       	std	Y+4, r18	; 0x04
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	9d 81       	ldd	r25, Y+5	; 0x05
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	91 05       	cpc	r25, r1
    1d78:	31 f0       	breq	.+12     	; 0x1d86 <ESP8266_Example+0x162>
    1d7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7e:	27 30       	cpi	r18, 0x07	; 7
    1d80:	31 05       	cpc	r19, r1
    1d82:	29 f0       	breq	.+10     	; 0x1d8e <ESP8266_Example+0x16a>
    1d84:	37 c0       	rjmp	.+110    	; 0x1df4 <ESP8266_Example+0x1d0>
		{
		case DataSent:
			EspExampleCase = ESPCheckResponce;
    1d86:	84 e0       	ldi	r24, 0x04	; 4
    1d88:	80 93 26 03 	sts	0x0326, r24
    1d8c:	33 c0       	rjmp	.+102    	; 0x1df4 <ESP8266_Example+0x1d0>
			break;
		case NotConnected:
			EspExampleCase=0;
    1d8e:	10 92 26 03 	sts	0x0326, r1
    1d92:	30 c0       	rjmp	.+96     	; 0x1df4 <ESP8266_Example+0x1d0>
		}

		break;
	case ESPCheckResponce:

		ListenReturn = ESP8266_vidListen("\"success\"" ,85,2000 );
    1d94:	8b e4       	ldi	r24, 0x4B	; 75
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	65 e5       	ldi	r22, 0x55	; 85
    1d9a:	40 ed       	ldi	r20, 0xD0	; 208
    1d9c:	57 e0       	ldi	r21, 0x07	; 7
    1d9e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <ESP8266_vidListen>
    1da2:	89 83       	std	Y+1, r24	; 0x01
		switch ( ListenReturn)
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	3b 83       	std	Y+3, r19	; 0x03
    1dac:	2a 83       	std	Y+2, r18	; 0x02
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	9b 81       	ldd	r25, Y+3	; 0x03
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	91 05       	cpc	r25, r1
    1db6:	31 f0       	breq	.+12     	; 0x1dc4 <ESP8266_Example+0x1a0>
    1db8:	2a 81       	ldd	r18, Y+2	; 0x02
    1dba:	3b 81       	ldd	r19, Y+3	; 0x03
    1dbc:	22 30       	cpi	r18, 0x02	; 2
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	29 f0       	breq	.+10     	; 0x1dcc <ESP8266_Example+0x1a8>
    1dc2:	18 c0       	rjmp	.+48     	; 0x1df4 <ESP8266_Example+0x1d0>
		{
		case Found:
			EspExampleCase = ESPCloseConnection;
    1dc4:	85 e0       	ldi	r24, 0x05	; 5
    1dc6:	80 93 26 03 	sts	0x0326, r24
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <ESP8266_Example+0x1d0>
			break;
		case Timeout:
			EspExampleCase= ESPCheckStatus;
    1dcc:	10 92 26 03 	sts	0x0326, r1
    1dd0:	11 c0       	rjmp	.+34     	; 0x1df4 <ESP8266_Example+0x1d0>
			break;
		}

		break;
	case ESPCloseConnection:
		if ( ESP8266_vidCloseConnection() ==1)
    1dd2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <ESP8266_vidCloseConnection>
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	69 f4       	brne	.+26     	; 0x1df4 <ESP8266_Example+0x1d0>
			{

			EspExampleCase =0;
    1dda:	10 92 26 03 	sts	0x0326, r1
			ret=1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	80 93 27 03 	sts	0x0327, r24
    1de4:	07 c0       	rjmp	.+14     	; 0x1df4 <ESP8266_Example+0x1d0>
			}
		break;
	case ESPReset:
		if ( ESP8266_u8Reset()==1)
    1de6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <ESP8266_u8Reset>
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	19 f4       	brne	.+6      	; 0x1df4 <ESP8266_Example+0x1d0>
			EspExampleCase = ESPJoinNetWork;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	80 93 26 03 	sts	0x0326, r24
		break;

	}
	return ret;
    1df4:	80 91 27 03 	lds	r24, 0x0327

}
    1df8:	2b 96       	adiw	r28, 0x0b	; 11
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <Sch_Start>:

 TaskType  TaskArray[] = {{2,0,APP_TASK},{1000,1,IrrigationPeriodTask}} ;
//tTaskType  TaskArray={2,0,LCD_MainFunction};

void Sch_Start(void)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	0f 92       	push	r0
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		if (u8Scheduler == 1)
    1e14:	80 91 2c 03 	lds	r24, 0x032C
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	e1 f7       	brne	.-8      	; 0x1e14 <Sch_Start+0xa>
		{

			uint8 index;
			for (index=0 ; index < TASK_NO ; index++)
    1e1c:	19 82       	std	Y+1, r1	; 0x01
    1e1e:	69 c0       	rjmp	.+210    	; 0x1ef2 <Sch_Start+0xe8>
			{
				if (TaskArray[index].u16Offset == 0)
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	c9 01       	movw	r24, r18
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	82 0f       	add	r24, r18
    1e2e:	93 1f       	adc	r25, r19
    1e30:	01 96       	adiw	r24, 0x01	; 1
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	fc 01       	movw	r30, r24
    1e38:	e8 56       	subi	r30, 0x68	; 104
    1e3a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	a1 f5       	brne	.+104    	; 0x1eac <Sch_Start+0xa2>
				{
					TaskArray[index].Task_Ptr();
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	c9 01       	movw	r24, r18
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	82 0f       	add	r24, r18
    1e52:	93 1f       	adc	r25, r19
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e4 56       	subi	r30, 0x64	; 100
    1e5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e5e:	01 90       	ld	r0, Z+
    1e60:	f0 81       	ld	r31, Z
    1e62:	e0 2d       	mov	r30, r0
    1e64:	09 95       	icall
					TaskArray[index].u16Offset = TaskArray[index].u16Periodicity -1;
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	48 2f       	mov	r20, r24
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	c9 01       	movw	r24, r18
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	82 0f       	add	r24, r18
    1e7a:	93 1f       	adc	r25, r19
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	fc 01       	movw	r30, r24
    1e82:	e8 56       	subi	r30, 0x68	; 104
    1e84:	fd 4f       	sbci	r31, 0xFD	; 253
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	9c 01       	movw	r18, r24
    1e8c:	21 50       	subi	r18, 0x01	; 1
    1e8e:	30 40       	sbci	r19, 0x00	; 0
    1e90:	ca 01       	movw	r24, r20
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	84 0f       	add	r24, r20
    1e98:	95 1f       	adc	r25, r21
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	e8 56       	subi	r30, 0x68	; 104
    1ea4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea6:	31 83       	std	Z+1, r19	; 0x01
    1ea8:	20 83       	st	Z, r18
    1eaa:	20 c0       	rjmp	.+64     	; 0x1eec <Sch_Start+0xe2>
				}
				else
				{
					TaskArray[index].u16Offset--;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	c9 01       	movw	r24, r18
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	82 0f       	add	r24, r18
    1eba:	93 1f       	adc	r25, r19
    1ebc:	01 96       	adiw	r24, 0x01	; 1
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	e8 56       	subi	r30, 0x68	; 104
    1ec6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	ac 01       	movw	r20, r24
    1ece:	41 50       	subi	r20, 0x01	; 1
    1ed0:	50 40       	sbci	r21, 0x00	; 0
    1ed2:	c9 01       	movw	r24, r18
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	82 0f       	add	r24, r18
    1eda:	93 1f       	adc	r25, r19
    1edc:	01 96       	adiw	r24, 0x01	; 1
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	e8 56       	subi	r30, 0x68	; 104
    1ee6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee8:	51 83       	std	Z+1, r21	; 0x01
    1eea:	40 83       	st	Z, r20
	{
		if (u8Scheduler == 1)
		{

			uint8 index;
			for (index=0 ; index < TASK_NO ; index++)
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	8f 5f       	subi	r24, 0xFF	; 255
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	82 30       	cpi	r24, 0x02	; 2
    1ef6:	08 f4       	brcc	.+2      	; 0x1efa <Sch_Start+0xf0>
    1ef8:	93 cf       	rjmp	.-218    	; 0x1e20 <Sch_Start+0x16>
				else
				{
					TaskArray[index].u16Offset--;
				}
			}
			u8Scheduler = 0;
    1efa:	10 92 2c 03 	sts	0x032C, r1
    1efe:	8a cf       	rjmp	.-236    	; 0x1e14 <Sch_Start+0xa>

00001f00 <Sch_UpdateTick>:
		}
	}
}

void Sch_UpdateTick (void)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62

	u32TickCount++;
    1f08:	80 91 28 03 	lds	r24, 0x0328
    1f0c:	90 91 29 03 	lds	r25, 0x0329
    1f10:	a0 91 2a 03 	lds	r26, 0x032A
    1f14:	b0 91 2b 03 	lds	r27, 0x032B
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	a1 1d       	adc	r26, r1
    1f1c:	b1 1d       	adc	r27, r1
    1f1e:	80 93 28 03 	sts	0x0328, r24
    1f22:	90 93 29 03 	sts	0x0329, r25
    1f26:	a0 93 2a 03 	sts	0x032A, r26
    1f2a:	b0 93 2b 03 	sts	0x032B, r27
	u8Scheduler= 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	80 93 2c 03 	sts	0x032C, r24
		if (u32TickCount %1000 == 0)
    1f34:	80 91 28 03 	lds	r24, 0x0328
    1f38:	90 91 29 03 	lds	r25, 0x0329
    1f3c:	a0 91 2a 03 	lds	r26, 0x032A
    1f40:	b0 91 2b 03 	lds	r27, 0x032B
    1f44:	28 ee       	ldi	r18, 0xE8	; 232
    1f46:	33 e0       	ldi	r19, 0x03	; 3
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__udivmodsi4>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	a1 05       	cpc	r26, r1
    1f5c:	b1 05       	cpc	r27, r1
    1f5e:	41 f4       	brne	.+16     	; 0x1f70 <Sch_UpdateTick+0x70>
		{
			u32TickCount = 0;
    1f60:	10 92 28 03 	sts	0x0328, r1
    1f64:	10 92 29 03 	sts	0x0329, r1
    1f68:	10 92 2a 03 	sts	0x032A, r1
    1f6c:	10 92 2b 03 	sts	0x032B, r1
		}

}
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <Sch_Init>:
void Sch_Init(void)
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
	u8Scheduler = 0;
    1f7e:	10 92 2c 03 	sts	0x032C, r1
	u32TickCount = 0;
    1f82:	10 92 28 03 	sts	0x0328, r1
    1f86:	10 92 29 03 	sts	0x0329, r1
    1f8a:	10 92 2a 03 	sts	0x032A, r1
    1f8e:	10 92 2b 03 	sts	0x032B, r1
}
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <timer0_vidInit>:
uint32 counter =0;
uint32 SCounter=0;
void (* Timer_vidCallBack_Ptr )(void);

void timer0_vidInit(uint8 clkValue ,uint8 mode,uint8 compValue )
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <timer0_vidInit+0x6>
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <timer0_vidInit+0x8>
    1fa0:	0f 92       	push	r0
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	6a 83       	std	Y+2, r22	; 0x02
    1faa:	4b 83       	std	Y+3, r20	; 0x03


	CLEAR_PORT(TCCR0);
    1fac:	e3 e5       	ldi	r30, 0x53	; 83
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	10 82       	st	Z, r1
	CLEAR_PORT(TIMSK);
    1fb2:	e9 e5       	ldi	r30, 0x59	; 89
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	10 82       	st	Z, r1
	ASSIGN_PORT(TCCR0,TCCR0|mode);
    1fb8:	a3 e5       	ldi	r26, 0x53	; 83
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e3 e5       	ldi	r30, 0x53	; 83
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	90 81       	ld	r25, Z
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	89 2b       	or	r24, r25
    1fc6:	8c 93       	st	X, r24
	ASSIGN_PORT(TCCR0,TCCR0|clkValue);
    1fc8:	a3 e5       	ldi	r26, 0x53	; 83
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e3 e5       	ldi	r30, 0x53	; 83
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	90 81       	ld	r25, Z
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	89 2b       	or	r24, r25
    1fd6:	8c 93       	st	X, r24


	switch (mode)
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	3d 83       	std	Y+5, r19	; 0x05
    1fe0:	2c 83       	std	Y+4, r18	; 0x04
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	31 f0       	breq	.+12     	; 0x1ff6 <timer0_vidInit+0x5e>
    1fea:	2c 81       	ldd	r18, Y+4	; 0x04
    1fec:	3d 81       	ldd	r19, Y+5	; 0x05
    1fee:	28 30       	cpi	r18, 0x08	; 8
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	31 f0       	breq	.+12     	; 0x2000 <timer0_vidInit+0x68>
    1ff4:	09 c0       	rjmp	.+18     	; 0x2008 <timer0_vidInit+0x70>
	{
		case normal	:ASSIGN_PORT(OCR0, 0xff);
    1ff6:	ec e5       	ldi	r30, 0x5C	; 92
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	8f ef       	ldi	r24, 0xFF	; 255
    1ffc:	80 83       	st	Z, r24
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <timer0_vidInit+0x70>

					break;
		case ctc	:ASSIGN_PORT(OCR0, compValue);
    2000:	ec e5       	ldi	r30, 0x5C	; 92
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	80 83       	st	Z, r24
					break;
	}

}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <timer0_vidDelayMs>:

void timer0_vidDelayMs( uint16 msTime)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	63 97       	sbiw	r28, 0x13	; 19
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	9f 87       	std	Y+15, r25	; 0x0f
    202e:	8e 87       	std	Y+14, r24	; 0x0e
	uint8 mode = GET_PORT(TCCR0)&MODE;
    2030:	e3 e5       	ldi	r30, 0x53	; 83
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	88 74       	andi	r24, 0x48	; 72
    2038:	8d 87       	std	Y+13, r24	; 0x0d
	switch (mode)
    203a:	8d 85       	ldd	r24, Y+13	; 0x0d
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	3b 8b       	std	Y+19, r19	; 0x13
    2042:	2a 8b       	std	Y+18, r18	; 0x12
    2044:	4a 89       	ldd	r20, Y+18	; 0x12
    2046:	5b 89       	ldd	r21, Y+19	; 0x13
    2048:	41 15       	cp	r20, r1
    204a:	51 05       	cpc	r21, r1
    204c:	31 f0       	breq	.+12     	; 0x205a <timer0_vidDelayMs+0x42>
    204e:	8a 89       	ldd	r24, Y+18	; 0x12
    2050:	9b 89       	ldd	r25, Y+19	; 0x13
    2052:	88 30       	cpi	r24, 0x08	; 8
    2054:	91 05       	cpc	r25, r1
    2056:	49 f0       	breq	.+18     	; 0x206a <timer0_vidDelayMs+0x52>
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <timer0_vidDelayMs+0x60>
	{
	case normal	:ASSIGN_PORT(TIMSK,TIMSK|overflowIntEn);
    205a:	a9 e5       	ldi	r26, 0x59	; 89
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e9 e5       	ldi	r30, 0x59	; 89
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	81 60       	ori	r24, 0x01	; 1
    2066:	8c 93       	st	X, r24
    2068:	07 c0       	rjmp	.+14     	; 0x2078 <timer0_vidDelayMs+0x60>
				break;
	case ctc	:ASSIGN_PORT(TIMSK,TIMSK|compareInterEn);
    206a:	a9 e5       	ldi	r26, 0x59	; 89
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e9 e5       	ldi	r30, 0x59	; 89
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	82 60       	ori	r24, 0x02	; 2
    2076:	8c 93       	st	X, r24
			break;
	}
	uint16 fcpuInMS = F_CPU/1000;
    2078:	88 e2       	ldi	r24, 0x28	; 40
    207a:	93 e2       	ldi	r25, 0x23	; 35
    207c:	9c 87       	std	Y+12, r25	; 0x0c
    207e:	8b 87       	std	Y+11, r24	; 0x0b
	uint16 msTFreq ;
	uint8 prescaller = GET_PORT(TCCR0)& PRESCALLER;
    2080:	e3 e5       	ldi	r30, 0x53	; 83
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	87 70       	andi	r24, 0x07	; 7
    2088:	88 87       	std	Y+8, r24	; 0x08
	switch (prescaller)
    208a:	88 85       	ldd	r24, Y+8	; 0x08
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	39 8b       	std	Y+17, r19	; 0x11
    2092:	28 8b       	std	Y+16, r18	; 0x10
    2094:	48 89       	ldd	r20, Y+16	; 0x10
    2096:	59 89       	ldd	r21, Y+17	; 0x11
    2098:	43 30       	cpi	r20, 0x03	; 3
    209a:	51 05       	cpc	r21, r1
    209c:	59 f1       	breq	.+86     	; 0x20f4 <timer0_vidDelayMs+0xdc>
    209e:	88 89       	ldd	r24, Y+16	; 0x10
    20a0:	99 89       	ldd	r25, Y+17	; 0x11
    20a2:	84 30       	cpi	r24, 0x04	; 4
    20a4:	91 05       	cpc	r25, r1
    20a6:	5c f4       	brge	.+22     	; 0x20be <timer0_vidDelayMs+0xa6>
    20a8:	28 89       	ldd	r18, Y+16	; 0x10
    20aa:	39 89       	ldd	r19, Y+17	; 0x11
    20ac:	21 30       	cpi	r18, 0x01	; 1
    20ae:	31 05       	cpc	r19, r1
    20b0:	89 f0       	breq	.+34     	; 0x20d4 <timer0_vidDelayMs+0xbc>
    20b2:	48 89       	ldd	r20, Y+16	; 0x10
    20b4:	59 89       	ldd	r21, Y+17	; 0x11
    20b6:	42 30       	cpi	r20, 0x02	; 2
    20b8:	51 05       	cpc	r21, r1
    20ba:	89 f0       	breq	.+34     	; 0x20de <timer0_vidDelayMs+0xc6>
    20bc:	38 c0       	rjmp	.+112    	; 0x212e <timer0_vidDelayMs+0x116>
    20be:	88 89       	ldd	r24, Y+16	; 0x10
    20c0:	99 89       	ldd	r25, Y+17	; 0x11
    20c2:	84 30       	cpi	r24, 0x04	; 4
    20c4:	91 05       	cpc	r25, r1
    20c6:	21 f1       	breq	.+72     	; 0x2110 <timer0_vidDelayMs+0xf8>
    20c8:	28 89       	ldd	r18, Y+16	; 0x10
    20ca:	39 89       	ldd	r19, Y+17	; 0x11
    20cc:	25 30       	cpi	r18, 0x05	; 5
    20ce:	31 05       	cpc	r19, r1
    20d0:	31 f1       	breq	.+76     	; 0x211e <timer0_vidDelayMs+0x106>
    20d2:	2d c0       	rjmp	.+90     	; 0x212e <timer0_vidDelayMs+0x116>
	{
		case noPrescaller: msTFreq = fcpuInMS;
    20d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    20d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    20d8:	9a 87       	std	Y+10, r25	; 0x0a
    20da:	89 87       	std	Y+9, r24	; 0x09
    20dc:	28 c0       	rjmp	.+80     	; 0x212e <timer0_vidDelayMs+0x116>
					break;
		case presc8: msTFreq = fcpuInMS/8;
    20de:	8b 85       	ldd	r24, Y+11	; 0x0b
    20e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    20e2:	96 95       	lsr	r25
    20e4:	87 95       	ror	r24
    20e6:	96 95       	lsr	r25
    20e8:	87 95       	ror	r24
    20ea:	96 95       	lsr	r25
    20ec:	87 95       	ror	r24
    20ee:	9a 87       	std	Y+10, r25	; 0x0a
    20f0:	89 87       	std	Y+9, r24	; 0x09
    20f2:	1d c0       	rjmp	.+58     	; 0x212e <timer0_vidDelayMs+0x116>
					break;
		case presc64: msTFreq =fcpuInMS/64;
    20f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    20f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    20f8:	00 24       	eor	r0, r0
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	00 1c       	adc	r0, r0
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	00 1c       	adc	r0, r0
    2106:	89 2f       	mov	r24, r25
    2108:	90 2d       	mov	r25, r0
    210a:	9a 87       	std	Y+10, r25	; 0x0a
    210c:	89 87       	std	Y+9, r24	; 0x09
    210e:	0f c0       	rjmp	.+30     	; 0x212e <timer0_vidDelayMs+0x116>
						break;
		case presc256:msTFreq = fcpuInMS/256;
    2110:	8b 85       	ldd	r24, Y+11	; 0x0b
    2112:	9c 85       	ldd	r25, Y+12	; 0x0c
    2114:	89 2f       	mov	r24, r25
    2116:	99 27       	eor	r25, r25
    2118:	9a 87       	std	Y+10, r25	; 0x0a
    211a:	89 87       	std	Y+9, r24	; 0x09
    211c:	08 c0       	rjmp	.+16     	; 0x212e <timer0_vidDelayMs+0x116>
						break;
		case presc1024: msTFreq =fcpuInMS/1024;
    211e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2120:	9c 85       	ldd	r25, Y+12	; 0x0c
    2122:	89 2f       	mov	r24, r25
    2124:	99 27       	eor	r25, r25
    2126:	86 95       	lsr	r24
    2128:	86 95       	lsr	r24
    212a:	9a 87       	std	Y+10, r25	; 0x0a
    212c:	89 87       	std	Y+9, r24	; 0x09
						break;
	}

	uint8 compValue = GET_PORT(OCR0);
    212e:	ec e5       	ldi	r30, 0x5C	; 92
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8f 83       	std	Y+7, r24	; 0x07
	uint16 msFComp  = msTFreq/compValue;
    2136:	8f 81       	ldd	r24, Y+7	; 0x07
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	89 85       	ldd	r24, Y+9	; 0x09
    213e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2140:	b9 01       	movw	r22, r18
    2142:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__udivmodhi4>
    2146:	cb 01       	movw	r24, r22
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
	uint32 noInt    = msFComp*msTime;
    214c:	2d 81       	ldd	r18, Y+5	; 0x05
    214e:	3e 81       	ldd	r19, Y+6	; 0x06
    2150:	8e 85       	ldd	r24, Y+14	; 0x0e
    2152:	9f 85       	ldd	r25, Y+15	; 0x0f
    2154:	ac 01       	movw	r20, r24
    2156:	24 9f       	mul	r18, r20
    2158:	c0 01       	movw	r24, r0
    215a:	25 9f       	mul	r18, r21
    215c:	90 0d       	add	r25, r0
    215e:	34 9f       	mul	r19, r20
    2160:	90 0d       	add	r25, r0
    2162:	11 24       	eor	r1, r1
    2164:	cc 01       	movw	r24, r24
    2166:	a0 e0       	ldi	r26, 0x00	; 0
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	ab 83       	std	Y+3, r26	; 0x03
    2170:	bc 83       	std	Y+4, r27	; 0x04

	while(1)
	{
		if ( counter == noInt)
    2172:	20 91 2d 03 	lds	r18, 0x032D
    2176:	30 91 2e 03 	lds	r19, 0x032E
    217a:	40 91 2f 03 	lds	r20, 0x032F
    217e:	50 91 30 03 	lds	r21, 0x0330
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	9a 81       	ldd	r25, Y+2	; 0x02
    2186:	ab 81       	ldd	r26, Y+3	; 0x03
    2188:	bc 81       	ldd	r27, Y+4	; 0x04
    218a:	28 17       	cp	r18, r24
    218c:	39 07       	cpc	r19, r25
    218e:	4a 07       	cpc	r20, r26
    2190:	5b 07       	cpc	r21, r27
    2192:	79 f7       	brne	.-34     	; 0x2172 <timer0_vidDelayMs+0x15a>
			{
				counter =0;
    2194:	10 92 2d 03 	sts	0x032D, r1
    2198:	10 92 2e 03 	sts	0x032E, r1
    219c:	10 92 2f 03 	sts	0x032F, r1
    21a0:	10 92 30 03 	sts	0x0330, r1
				break;
			}
	}
	ASSIGN_PORT(TIMSK, TIMSK|noOvFlComInt);
    21a4:	e9 e5       	ldi	r30, 0x59	; 89
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	a9 e5       	ldi	r26, 0x59	; 89
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	8c 91       	ld	r24, X
    21ae:	80 83       	st	Z, r24
		if ( counter == noInt)
			{
				counter =0;
				break;
			}
	}
    21b0:	63 96       	adiw	r28, 0x13	; 19
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <timer0_vidIntMs>:
	ASSIGN_PORT(TIMSK, TIMSK|noOvFlComInt);
}


void timer0_vidIntMs()
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	61 97       	sbiw	r28, 0x11	; 17
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61

	uint16 fcpuInMS = F_CPU/1000;
    21d6:	88 e2       	ldi	r24, 0x28	; 40
    21d8:	93 e2       	ldi	r25, 0x23	; 35
    21da:	9f 87       	std	Y+15, r25	; 0x0f
    21dc:	8e 87       	std	Y+14, r24	; 0x0e

	uint8 mode = GET_PORT(TCCR0)&MODE;
    21de:	e3 e5       	ldi	r30, 0x53	; 83
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	88 74       	andi	r24, 0x48	; 72
    21e6:	8d 87       	std	Y+13, r24	; 0x0d
	switch (mode)
    21e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	39 8b       	std	Y+17, r19	; 0x11
    21f0:	28 8b       	std	Y+16, r18	; 0x10
    21f2:	88 89       	ldd	r24, Y+16	; 0x10
    21f4:	99 89       	ldd	r25, Y+17	; 0x11
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	31 f0       	breq	.+12     	; 0x2206 <timer0_vidIntMs+0x44>
    21fa:	28 89       	ldd	r18, Y+16	; 0x10
    21fc:	39 89       	ldd	r19, Y+17	; 0x11
    21fe:	28 30       	cpi	r18, 0x08	; 8
    2200:	31 05       	cpc	r19, r1
    2202:	49 f0       	breq	.+18     	; 0x2216 <timer0_vidIntMs+0x54>
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <timer0_vidIntMs+0x62>
	{
	case normal	:
		ASSIGN_PORT(TIMSK,TIMSK|overflowIntEn);
    2206:	a9 e5       	ldi	r26, 0x59	; 89
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e9 e5       	ldi	r30, 0x59	; 89
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	81 60       	ori	r24, 0x01	; 1
    2212:	8c 93       	st	X, r24
    2214:	07 c0       	rjmp	.+14     	; 0x2224 <timer0_vidIntMs+0x62>
		break;
	case ctc	:

		ASSIGN_PORT(TIMSK,TIMSK|compareInterEn);
    2216:	a9 e5       	ldi	r26, 0x59	; 89
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e9 e5       	ldi	r30, 0x59	; 89
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	82 60       	ori	r24, 0x02	; 2
    2222:	8c 93       	st	X, r24
		break;
	}

	uint32 msTFreq ;
	uint16 temp = fcpuInMS;;
    2224:	8e 85       	ldd	r24, Y+14	; 0x0e
    2226:	9f 85       	ldd	r25, Y+15	; 0x0f
    2228:	98 87       	std	Y+8, r25	; 0x08
    222a:	8f 83       	std	Y+7, r24	; 0x07
	uint8 prescaller ;
	uint8 fraction8 = fcpuInMS%8;
    222c:	8e 85       	ldd	r24, Y+14	; 0x0e
    222e:	87 70       	andi	r24, 0x07	; 7
    2230:	8d 83       	std	Y+5, r24	; 0x05
	uint8 ocr0 ;
	uint8 fraction64 = fcpuInMS%64;
    2232:	8e 85       	ldd	r24, Y+14	; 0x0e
    2234:	8f 73       	andi	r24, 0x3F	; 63
    2236:	8b 83       	std	Y+3, r24	; 0x03
	uint8 fraction256 = fcpuInMS%256;
    2238:	8e 85       	ldd	r24, Y+14	; 0x0e
    223a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 fraction1024 = fcpuInMS%1024;
    223c:	8e 85       	ldd	r24, Y+14	; 0x0e
    223e:	89 83       	std	Y+1, r24	; 0x01

	if ( fcpuInMS <256 )
    2240:	8e 85       	ldd	r24, Y+14	; 0x0e
    2242:	9f 85       	ldd	r25, Y+15	; 0x0f
    2244:	8f 3f       	cpi	r24, 0xFF	; 255
    2246:	91 05       	cpc	r25, r1
    2248:	09 f0       	breq	.+2      	; 0x224c <timer0_vidIntMs+0x8a>
    224a:	38 f4       	brcc	.+14     	; 0x225a <timer0_vidIntMs+0x98>
		{
		temp = fcpuInMS%1;
    224c:	18 86       	std	Y+8, r1	; 0x08
    224e:	1f 82       	std	Y+7, r1	; 0x07
		prescaller = noPrescaller;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	8e 83       	std	Y+6, r24	; 0x06
		ocr0  = fcpuInMS -1;
    2254:	8e 85       	ldd	r24, Y+14	; 0x0e
    2256:	81 50       	subi	r24, 0x01	; 1
    2258:	8c 83       	std	Y+4, r24	; 0x04
		}
	if ( (fcpuInMS/8)<256 )
    225a:	8e 85       	ldd	r24, Y+14	; 0x0e
    225c:	9f 85       	ldd	r25, Y+15	; 0x0f
    225e:	38 e0       	ldi	r19, 0x08	; 8
    2260:	80 30       	cpi	r24, 0x00	; 0
    2262:	93 07       	cpc	r25, r19
    2264:	d0 f4       	brcc	.+52     	; 0x229a <timer0_vidIntMs+0xd8>
	{
		if (fraction8< temp)
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	8f 81       	ldd	r24, Y+7	; 0x07
    226e:	98 85       	ldd	r25, Y+8	; 0x08
    2270:	28 17       	cp	r18, r24
    2272:	39 07       	cpc	r19, r25
    2274:	90 f4       	brcc	.+36     	; 0x229a <timer0_vidIntMs+0xd8>
			{
			temp = fcpuInMS%8;
    2276:	8e 85       	ldd	r24, Y+14	; 0x0e
    2278:	9f 85       	ldd	r25, Y+15	; 0x0f
    227a:	87 70       	andi	r24, 0x07	; 7
    227c:	90 70       	andi	r25, 0x00	; 0
    227e:	98 87       	std	Y+8, r25	; 0x08
    2280:	8f 83       	std	Y+7, r24	; 0x07
			prescaller = presc8;
    2282:	82 e0       	ldi	r24, 0x02	; 2
    2284:	8e 83       	std	Y+6, r24	; 0x06
			ocr0  = (fcpuInMS/8)-1;
    2286:	8e 85       	ldd	r24, Y+14	; 0x0e
    2288:	9f 85       	ldd	r25, Y+15	; 0x0f
    228a:	96 95       	lsr	r25
    228c:	87 95       	ror	r24
    228e:	96 95       	lsr	r25
    2290:	87 95       	ror	r24
    2292:	96 95       	lsr	r25
    2294:	87 95       	ror	r24
    2296:	81 50       	subi	r24, 0x01	; 1
    2298:	8c 83       	std	Y+4, r24	; 0x04
			}
	}
	if ( (fcpuInMS/64)<256 )
    229a:	8e 85       	ldd	r24, Y+14	; 0x0e
    229c:	9f 85       	ldd	r25, Y+15	; 0x0f
    229e:	20 e4       	ldi	r18, 0x40	; 64
    22a0:	80 30       	cpi	r24, 0x00	; 0
    22a2:	92 07       	cpc	r25, r18
    22a4:	e8 f4       	brcc	.+58     	; 0x22e0 <timer0_vidIntMs+0x11e>
	{
		if (fraction64< temp)
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	8f 81       	ldd	r24, Y+7	; 0x07
    22ae:	98 85       	ldd	r25, Y+8	; 0x08
    22b0:	28 17       	cp	r18, r24
    22b2:	39 07       	cpc	r19, r25
    22b4:	a8 f4       	brcc	.+42     	; 0x22e0 <timer0_vidIntMs+0x11e>
		{


			temp = fcpuInMS%64;
    22b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    22b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ba:	8f 73       	andi	r24, 0x3F	; 63
    22bc:	90 70       	andi	r25, 0x00	; 0
    22be:	98 87       	std	Y+8, r25	; 0x08
    22c0:	8f 83       	std	Y+7, r24	; 0x07
			prescaller = presc64;
    22c2:	83 e0       	ldi	r24, 0x03	; 3
    22c4:	8e 83       	std	Y+6, r24	; 0x06
			ocr0  = (fcpuInMS/64) -1;
    22c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ca:	00 24       	eor	r0, r0
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	00 1c       	adc	r0, r0
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	00 1c       	adc	r0, r0
    22d8:	89 2f       	mov	r24, r25
    22da:	90 2d       	mov	r25, r0
    22dc:	81 50       	subi	r24, 0x01	; 1
    22de:	8c 83       	std	Y+4, r24	; 0x04
		}
	}
	if ( (fcpuInMS/256)<256 )
	{
		if (fraction256< temp)
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	8f 81       	ldd	r24, Y+7	; 0x07
    22e8:	98 85       	ldd	r25, Y+8	; 0x08
    22ea:	28 17       	cp	r18, r24
    22ec:	39 07       	cpc	r19, r25
    22ee:	68 f4       	brcc	.+26     	; 0x230a <timer0_vidIntMs+0x148>
		{
			temp = fcpuInMS%256;
    22f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22f4:	90 70       	andi	r25, 0x00	; 0
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	8f 83       	std	Y+7, r24	; 0x07
			prescaller = presc256;
    22fa:	84 e0       	ldi	r24, 0x04	; 4
    22fc:	8e 83       	std	Y+6, r24	; 0x06
			ocr0  = (fcpuInMS/256 ) -1;
    22fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2300:	9f 85       	ldd	r25, Y+15	; 0x0f
    2302:	89 2f       	mov	r24, r25
    2304:	99 27       	eor	r25, r25
    2306:	81 50       	subi	r24, 0x01	; 1
    2308:	8c 83       	std	Y+4, r24	; 0x04
		}
	}
	if ( (fcpuInMS/1024)<256 )
	{
		if (fraction1024< temp)
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	8f 81       	ldd	r24, Y+7	; 0x07
    2312:	98 85       	ldd	r25, Y+8	; 0x08
    2314:	28 17       	cp	r18, r24
    2316:	39 07       	cpc	r19, r25
    2318:	78 f4       	brcc	.+30     	; 0x2338 <timer0_vidIntMs+0x176>
		{
			temp = fcpuInMS%1024;
    231a:	8e 85       	ldd	r24, Y+14	; 0x0e
    231c:	9f 85       	ldd	r25, Y+15	; 0x0f
    231e:	93 70       	andi	r25, 0x03	; 3
    2320:	98 87       	std	Y+8, r25	; 0x08
    2322:	8f 83       	std	Y+7, r24	; 0x07
			prescaller = presc1024;
    2324:	85 e0       	ldi	r24, 0x05	; 5
    2326:	8e 83       	std	Y+6, r24	; 0x06
			ocr0  = (fcpuInMS/1024) -1;
    2328:	8e 85       	ldd	r24, Y+14	; 0x0e
    232a:	9f 85       	ldd	r25, Y+15	; 0x0f
    232c:	89 2f       	mov	r24, r25
    232e:	99 27       	eor	r25, r25
    2330:	86 95       	lsr	r24
    2332:	86 95       	lsr	r24
    2334:	81 50       	subi	r24, 0x01	; 1
    2336:	8c 83       	std	Y+4, r24	; 0x04
		}
	}

	////////////////

	DIO_vidSetPinDir(11,1);
    2338:	8b e0       	ldi	r24, 0x0B	; 11
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	61 e0       	ldi	r22, 0x01	; 1
    233e:	70 e0       	ldi	r23, 0x00	; 0
    2340:	0e 94 13 03 	call	0x626	; 0x626 <DIO_vidSetPinDir>
	///////////////////
	CLEAR_BIT(TCCR0,0);
    2344:	a3 e5       	ldi	r26, 0x53	; 83
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e3 e5       	ldi	r30, 0x53	; 83
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	8e 7f       	andi	r24, 0xFE	; 254
    2350:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,1);
    2352:	a3 e5       	ldi	r26, 0x53	; 83
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e3 e5       	ldi	r30, 0x53	; 83
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	8d 7f       	andi	r24, 0xFD	; 253
    235e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,2);
    2360:	a3 e5       	ldi	r26, 0x53	; 83
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e3 e5       	ldi	r30, 0x53	; 83
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	8b 7f       	andi	r24, 0xFB	; 251
    236c:	8c 93       	st	X, r24
	ASSIGN_PORT(TCCR0,TCCR0|prescaller|0x10);
    236e:	a3 e5       	ldi	r26, 0x53	; 83
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e3 e5       	ldi	r30, 0x53	; 83
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	90 81       	ld	r25, Z
    2378:	8e 81       	ldd	r24, Y+6	; 0x06
    237a:	89 2b       	or	r24, r25
    237c:	80 61       	ori	r24, 0x10	; 16
    237e:	8c 93       	st	X, r24
	ASSIGN_PORT(OCR0 ,ocr0);
    2380:	ec e5       	ldi	r30, 0x5C	; 92
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	8c 81       	ldd	r24, Y+4	; 0x04
    2386:	80 83       	st	Z, r24





}
    2388:	61 96       	adiw	r28, 0x11	; 17
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <Timer0_vidSetCallBack>:



void Timer0_vidSetCallBack( void (*CallBack)(void) )
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <Timer0_vidSetCallBack+0x6>
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
Timer_vidCallBack_Ptr = CallBack;
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	90 93 52 03 	sts	0x0352, r25
    23b0:	80 93 51 03 	sts	0x0351, r24
SET_BIT(SREG,GLOPAL_INT);
    23b4:	af e5       	ldi	r26, 0x5F	; 95
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	ef e5       	ldi	r30, 0x5F	; 95
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	80 68       	ori	r24, 0x80	; 128
    23c0:	8c 93       	st	X, r24
//SET_BIT(PORTB,0);
//SET_BIT(PORTB,1);
//
//		DIO_vidWritePin(10,1);

}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <__vector_10>:
uint16 i =0;


void __vector_10(void) __attribute__((signal,__INTR_ATTRS));
void __vector_10(void)
{
    23cc:	1f 92       	push	r1
    23ce:	0f 92       	push	r0
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	0f 92       	push	r0
    23d4:	11 24       	eor	r1, r1
    23d6:	2f 93       	push	r18
    23d8:	3f 93       	push	r19
    23da:	4f 93       	push	r20
    23dc:	5f 93       	push	r21
    23de:	6f 93       	push	r22
    23e0:	7f 93       	push	r23
    23e2:	8f 93       	push	r24
    23e4:	9f 93       	push	r25
    23e6:	af 93       	push	r26
    23e8:	bf 93       	push	r27
    23ea:	ef 93       	push	r30
    23ec:	ff 93       	push	r31
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <__vector_10+0x28>
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <__vector_10+0x2a>
    23f6:	0f 92       	push	r0
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62

	if ( counter++ >1000 )
    23fc:	80 91 2d 03 	lds	r24, 0x032D
    2400:	90 91 2e 03 	lds	r25, 0x032E
    2404:	a0 91 2f 03 	lds	r26, 0x032F
    2408:	b0 91 30 03 	lds	r27, 0x0330
    240c:	8a 83       	std	Y+2, r24	; 0x02
    240e:	9b 83       	std	Y+3, r25	; 0x03
    2410:	ac 83       	std	Y+4, r26	; 0x04
    2412:	bd 83       	std	Y+5, r27	; 0x05
    2414:	19 82       	std	Y+1, r1	; 0x01
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	9b 81       	ldd	r25, Y+3	; 0x03
    241a:	ac 81       	ldd	r26, Y+4	; 0x04
    241c:	bd 81       	ldd	r27, Y+5	; 0x05
    241e:	89 3e       	cpi	r24, 0xE9	; 233
    2420:	23 e0       	ldi	r18, 0x03	; 3
    2422:	92 07       	cpc	r25, r18
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	a2 07       	cpc	r26, r18
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	b2 07       	cpc	r27, r18
    242c:	10 f0       	brcs	.+4      	; 0x2432 <__vector_10+0x66>
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	9b 81       	ldd	r25, Y+3	; 0x03
    2436:	ac 81       	ldd	r26, Y+4	; 0x04
    2438:	bd 81       	ldd	r27, Y+5	; 0x05
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	a1 1d       	adc	r26, r1
    243e:	b1 1d       	adc	r27, r1
    2440:	80 93 2d 03 	sts	0x032D, r24
    2444:	90 93 2e 03 	sts	0x032E, r25
    2448:	a0 93 2f 03 	sts	0x032F, r26
    244c:	b0 93 30 03 	sts	0x0330, r27
    2450:	99 81       	ldd	r25, Y+1	; 0x01
    2452:	99 23       	and	r25, r25
    2454:	d9 f0       	breq	.+54     	; 0x248c <__vector_10+0xc0>
	{
		SCounter++;
    2456:	80 91 31 03 	lds	r24, 0x0331
    245a:	90 91 32 03 	lds	r25, 0x0332
    245e:	a0 91 33 03 	lds	r26, 0x0333
    2462:	b0 91 34 03 	lds	r27, 0x0334
    2466:	01 96       	adiw	r24, 0x01	; 1
    2468:	a1 1d       	adc	r26, r1
    246a:	b1 1d       	adc	r27, r1
    246c:	80 93 31 03 	sts	0x0331, r24
    2470:	90 93 32 03 	sts	0x0332, r25
    2474:	a0 93 33 03 	sts	0x0333, r26
    2478:	b0 93 34 03 	sts	0x0334, r27
		counter=0;
    247c:	10 92 2d 03 	sts	0x032D, r1
    2480:	10 92 2e 03 	sts	0x032E, r1
    2484:	10 92 2f 03 	sts	0x032F, r1
    2488:	10 92 30 03 	sts	0x0330, r1
	}

(Timer_vidCallBack_Ptr)();
    248c:	e0 91 51 03 	lds	r30, 0x0351
    2490:	f0 91 52 03 	lds	r31, 0x0352
    2494:	09 95       	icall


}
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	ff 91       	pop	r31
    24a6:	ef 91       	pop	r30
    24a8:	bf 91       	pop	r27
    24aa:	af 91       	pop	r26
    24ac:	9f 91       	pop	r25
    24ae:	8f 91       	pop	r24
    24b0:	7f 91       	pop	r23
    24b2:	6f 91       	pop	r22
    24b4:	5f 91       	pop	r21
    24b6:	4f 91       	pop	r20
    24b8:	3f 91       	pop	r19
    24ba:	2f 91       	pop	r18
    24bc:	0f 90       	pop	r0
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	0f 90       	pop	r0
    24c2:	1f 90       	pop	r1
    24c4:	18 95       	reti

000024c6 <UART_vidInit>:
uint8 UTxFlag =0;
////////////////////
/////////////////////

void UART_vidInit( uint8 RxTxMode,uint8 speedMode,uint8 framFormat,uint8 uInterrupt,uint8 polarity ,uint8 parity  )
{
    24c6:	ef 92       	push	r14
    24c8:	0f 93       	push	r16
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	28 97       	sbiw	r28, 0x08	; 8
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	8b 83       	std	Y+3, r24	; 0x03
    24e0:	6c 83       	std	Y+4, r22	; 0x04
    24e2:	4d 83       	std	Y+5, r20	; 0x05
    24e4:	2e 83       	std	Y+6, r18	; 0x06
    24e6:	0f 83       	std	Y+7, r16	; 0x07
    24e8:	e8 86       	std	Y+8, r14	; 0x08

		// UBR value according to baud rate and CPU frequency and speed mode
		//uint16 UBRValue =4;
		uint16 UBRValue =round((F_CPU*1.0/SPEED_FACTOR/UART_BAUD_RATE) -1);
    24ea:	84 e0       	ldi	r24, 0x04	; 4
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	89 83       	std	Y+1, r24	; 0x01
		// upper value in upper register
		UBRRH = (unsigned char)(UBRValue >>8);
    24f2:	e0 e4       	ldi	r30, 0x40	; 64
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	9a 81       	ldd	r25, Y+2	; 0x02
    24fa:	89 2f       	mov	r24, r25
    24fc:	99 27       	eor	r25, r25
    24fe:	80 83       	st	Z, r24
		// lower value in lower register
		UBRRL = (unsigned char)UBRValue;
    2500:	e9 e2       	ldi	r30, 0x29	; 41
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	80 83       	st	Z, r24

		// URSEL >>1 for UCSRC Register
		// framFormat for frame size  and stop bits
		// polarity and parity of the frame
		// choosing asynchronous UART mode
		UCSRC = (UCSRC_SEL<<URSEL) |framFormat|polarity | (ASYNC_UART<<UMSEL)| parity;
    2508:	e0 e4       	ldi	r30, 0x40	; 64
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	9d 81       	ldd	r25, Y+5	; 0x05
    250e:	8f 81       	ldd	r24, Y+7	; 0x07
    2510:	98 2b       	or	r25, r24
    2512:	88 85       	ldd	r24, Y+8	; 0x08
    2514:	89 2b       	or	r24, r25
    2516:	80 68       	ori	r24, 0x80	; 128
    2518:	80 83       	st	Z, r24
		//choosing RxTx mode
		UCSRB = RxTxMode;
    251a:	ea e2       	ldi	r30, 0x2A	; 42
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	80 83       	st	Z, r24
		// if UART_DATA_SIZE==9 assign UCSZ2 bit to one
		if (UART_DATA_SIZE==9)
		UCSRB |= (1<<UCSZ2);
		//assign speed mode
		UCSRA =speedMode;
    2522:	eb e2       	ldi	r30, 0x2B	; 43
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	8c 81       	ldd	r24, Y+4	; 0x04
    2528:	80 83       	st	Z, r24
		
	
}
    252a:	28 96       	adiw	r28, 0x08	; 8
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	0f 91       	pop	r16
    253c:	ef 90       	pop	r14
    253e:	08 95       	ret

00002540 <UART_uint16PollReceive>:

uint16 UART_uint16PollReceive( void)
{
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
	//wait until receive complete flag is one then return UDR value
	while ( ! (GET_BIT(UCSRA ,RXC)) );
    2548:	eb e2       	ldi	r30, 0x2B	; 43
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	88 23       	and	r24, r24
    2550:	dc f7       	brge	.-10     	; 0x2548 <UART_uint16PollReceive+0x8>
	return UART_U16Receive() ;
    2552:	0e 94 ae 12 	call	0x255c	; 0x255c <UART_U16Receive>

}
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <UART_U16Receive>:
uint16 UART_U16Receive( void)
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
	// check if data size is 9 bits to append RXB8 with UDR value else return UDR value only
	if (UART_DATA_SIZE ==9)
		return ( (GET_BIT(UCSRB,RXB8)<<8)| UDR) ;
	else
		return (UDR) ;
    2564:	ec e2       	ldi	r30, 0x2C	; 44
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	88 2f       	mov	r24, r24
    256c:	90 e0       	ldi	r25, 0x00	; 0
}
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <UART_vidPollTrans>:

void UART_vidPollTrans( uint16 pollData)
{
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	00 d0       	rcall	.+0      	; 0x257a <UART_vidPollTrans+0x6>
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDR empty flag is one to load UDR register with pollData value
	while ( !GET_BIT(UCSRA,UDRE) );
    2582:	eb e2       	ldi	r30, 0x2B	; 43
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	80 72       	andi	r24, 0x20	; 32
    258e:	90 70       	andi	r25, 0x00	; 0
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	b9 f3       	breq	.-18     	; 0x2582 <UART_vidPollTrans+0xe>
	UART_vidTrans(pollData);
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	0e 94 fe 12 	call	0x25fc	; 0x25fc <UART_vidTrans>
}
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <UART_vidPollTransString>:

void UART_vidPollTransString ( char * data  )
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <UART_vidPollTransString+0x6>
    25ac:	0f 92       	push	r0
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	9b 83       	std	Y+3, r25	; 0x03
    25b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	// loop over the string characters and send them one by one
	for (i=0; data[i]!='\0' ; i++)
    25b6:	19 82       	std	Y+1, r1	; 0x01
    25b8:	10 c0       	rjmp	.+32     	; 0x25da <UART_vidPollTransString+0x34>
	UART_vidPollTrans(data[i]);
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	9b 81       	ldd	r25, Y+3	; 0x03
    25c4:	fc 01       	movw	r30, r24
    25c6:	e2 0f       	add	r30, r18
    25c8:	f3 1f       	adc	r31, r19
    25ca:	80 81       	ld	r24, Z
    25cc:	88 2f       	mov	r24, r24
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 ba 12 	call	0x2574	; 0x2574 <UART_vidPollTrans>

void UART_vidPollTransString ( char * data  )
{
	uint8 i;
	// loop over the string characters and send them one by one
	for (i=0; data[i]!='\0' ; i++)
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	8f 5f       	subi	r24, 0xFF	; 255
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	9b 81       	ldd	r25, Y+3	; 0x03
    25e4:	fc 01       	movw	r30, r24
    25e6:	e2 0f       	add	r30, r18
    25e8:	f3 1f       	adc	r31, r19
    25ea:	80 81       	ld	r24, Z
    25ec:	88 23       	and	r24, r24
    25ee:	29 f7       	brne	.-54     	; 0x25ba <UART_vidPollTransString+0x14>
	UART_vidPollTrans(data[i]);
}
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <UART_vidTrans>:


void UART_vidTrans( uint16 data)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	00 d0       	rcall	.+0      	; 0x2602 <UART_vidTrans+0x6>
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	9a 83       	std	Y+2, r25	; 0x02
    2608:	89 83       	std	Y+1, r24	; 0x01
	// the function puts in mind the 9 bits mode
	///////////////
	// clear TXB8 by default
	CLEAR_BIT( UCSRB , TXB8);
    260a:	aa e2       	ldi	r26, 0x2A	; 42
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	ea e2       	ldi	r30, 0x2A	; 42
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	8e 7f       	andi	r24, 0xFE	; 254
    2616:	8c 93       	st	X, r24
	// if data value has one in 8 bit then set TXB8 to one
	if ( (UART_DATA_SIZE ==9) & (data & (1<<8) ) )
	{
		SET_BIT ( UCSRB , TXB8);
	}
	UDR =  data;
    2618:	ec e2       	ldi	r30, 0x2C	; 44
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	80 83       	st	Z, r24

}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <UART_vidSetTxArr>:


void UART_vidSetTxArr (char * data ,uint8 enter)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <UART_vidSetTxArr+0x6>
    2630:	00 d0       	rcall	.+0      	; 0x2632 <UART_vidSetTxArr+0x8>
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	9b 83       	std	Y+3, r25	; 0x03
    2638:	8a 83       	std	Y+2, r24	; 0x02
    263a:	6c 83       	std	Y+4, r22	; 0x04
	// the function load the UTXArray with data string characters, get the size of the data string,
	// terminate the string with null terminator and enable UDR empty interrupt to send UTxArray character
	// by character when UDR is empty using the UDR empty interrupt
	// In case of AT Command the function uses parameter (enter) to check if AT Command,
	// terminate the string with Enter.
	if ( UTxFlag ==0)
    263c:	80 91 3a 03 	lds	r24, 0x033A
    2640:	88 23       	and	r24, r24
    2642:	09 f0       	breq	.+2      	; 0x2646 <UART_vidSetTxArr+0x1c>
    2644:	43 c0       	rjmp	.+134    	; 0x26cc <UART_vidSetTxArr+0xa2>
	{
		uint8 i;
		for (i=0;(data[i]!='\0')&& (i<(UTxArrayLen-1));i++)
    2646:	19 82       	std	Y+1, r1	; 0x01
    2648:	13 c0       	rjmp	.+38     	; 0x2670 <UART_vidSetTxArr+0x46>
		{
			// copy the data string into UTxArray
			UTxArray[i] = data[i];
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	48 2f       	mov	r20, r24
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	fc 01       	movw	r30, r24
    265c:	e2 0f       	add	r30, r18
    265e:	f3 1f       	adc	r31, r19
    2660:	80 81       	ld	r24, Z
    2662:	fa 01       	movw	r30, r20
    2664:	e7 54       	subi	r30, 0x47	; 71
    2666:	fc 4f       	sbci	r31, 0xFC	; 252
    2668:	80 83       	st	Z, r24
	// In case of AT Command the function uses parameter (enter) to check if AT Command,
	// terminate the string with Enter.
	if ( UTxFlag ==0)
	{
		uint8 i;
		for (i=0;(data[i]!='\0')&& (i<(UTxArrayLen-1));i++)
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	8f 5f       	subi	r24, 0xFF	; 255
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	9b 81       	ldd	r25, Y+3	; 0x03
    267a:	fc 01       	movw	r30, r24
    267c:	e2 0f       	add	r30, r18
    267e:	f3 1f       	adc	r31, r19
    2680:	80 81       	ld	r24, Z
    2682:	88 23       	and	r24, r24
    2684:	19 f0       	breq	.+6      	; 0x268c <UART_vidSetTxArr+0x62>
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	83 36       	cpi	r24, 0x63	; 99
    268a:	f8 f2       	brcs	.-66     	; 0x264a <UART_vidSetTxArr+0x20>
		{
			// copy the data string into UTxArray
			UTxArray[i] = data[i];
		}

		if ( enter ==1 )
    268c:	8c 81       	ldd	r24, Y+4	; 0x04
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	49 f4       	brne	.+18     	; 0x26a4 <UART_vidSetTxArr+0x7a>
			{
				UTxArray[i] = 0x0d;
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	88 2f       	mov	r24, r24
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	fc 01       	movw	r30, r24
    269a:	e7 54       	subi	r30, 0x47	; 71
    269c:	fc 4f       	sbci	r31, 0xFC	; 252
    269e:	8d e0       	ldi	r24, 0x0D	; 13
    26a0:	80 83       	st	Z, r24
    26a2:	07 c0       	rjmp	.+14     	; 0x26b2 <UART_vidSetTxArr+0x88>

			}
			else
			{
				UTxArray[i] = '\0';
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	88 2f       	mov	r24, r24
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	fc 01       	movw	r30, r24
    26ac:	e7 54       	subi	r30, 0x47	; 71
    26ae:	fc 4f       	sbci	r31, 0xFC	; 252
    26b0:	10 82       	st	Z, r1
			}

		// get the size of the string
		UTxArraySize = i;
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	80 93 1d 04 	sts	0x041D, r24
		// Enable UDR Empty interrupt to begin transmission of the TxArray
		UTxFlag=1;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	80 93 3a 03 	sts	0x033A, r24
		SET_BIT(UCSRB , UDRIE);
    26be:	aa e2       	ldi	r26, 0x2A	; 42
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	ea e2       	ldi	r30, 0x2A	; 42
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	80 62       	ori	r24, 0x20	; 32
    26ca:	8c 93       	st	X, r24
	}

}
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <UART_vidSetRxArr>:


void UART_vidSetRxArr (uint8 size, uint8 * matchString)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <UART_vidSetRxArr+0x6>
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <UART_vidSetRxArr+0x8>
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	8a 83       	std	Y+2, r24	; 0x02
    26e8:	7c 83       	std	Y+4, r23	; 0x04
    26ea:	6b 83       	std	Y+3, r22	; 0x03
	//--EX ----------
	// UART_vidSetRxArr (8, "")
	// The function will open the reception window until 8 characters string is received.

	// -------------------------------------------------------------------
	if ( URxFlag == 0)
    26ec:	80 91 38 03 	lds	r24, 0x0338
    26f0:	88 23       	and	r24, r24
    26f2:	c9 f5       	brne	.+114    	; 0x2766 <UART_vidSetRxArr+0x8c>
	{

		// Set the URxArraySize with size parameter
		URxArraySize = size;
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	80 93 53 03 	sts	0x0353, r24
		// Set the URxArrayIndex (reception array index) to zero 0
		URxArrayIndex =0;
    26fa:	10 92 37 03 	sts	0x0337, r1
		// Set the URxFlag ( reception done flag ) to zero 0
		URxFlag=1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	80 93 38 03 	sts	0x0338, r24
		uint8 i;
		// Copy the match string if any to the UMatchCase ( string to compare the received string with)
		for (i=0;( matchString[i]!='\0' );i++)
    2704:	19 82       	std	Y+1, r1	; 0x01
    2706:	13 c0       	rjmp	.+38     	; 0x272e <UART_vidSetRxArr+0x54>
		{
		UMatchCase[i] = matchString[i];
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	48 2f       	mov	r20, r24
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	28 2f       	mov	r18, r24
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	9c 81       	ldd	r25, Y+4	; 0x04
    2718:	fc 01       	movw	r30, r24
    271a:	e2 0f       	add	r30, r18
    271c:	f3 1f       	adc	r31, r19
    271e:	80 81       	ld	r24, Z
    2720:	fa 01       	movw	r30, r20
    2722:	e2 5e       	subi	r30, 0xE2	; 226
    2724:	fb 4f       	sbci	r31, 0xFB	; 251
    2726:	80 83       	st	Z, r24
		URxArrayIndex =0;
		// Set the URxFlag ( reception done flag ) to zero 0
		URxFlag=1;
		uint8 i;
		// Copy the match string if any to the UMatchCase ( string to compare the received string with)
		for (i=0;( matchString[i]!='\0' );i++)
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	8f 5f       	subi	r24, 0xFF	; 255
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	8b 81       	ldd	r24, Y+3	; 0x03
    2736:	9c 81       	ldd	r25, Y+4	; 0x04
    2738:	fc 01       	movw	r30, r24
    273a:	e2 0f       	add	r30, r18
    273c:	f3 1f       	adc	r31, r19
    273e:	80 81       	ld	r24, Z
    2740:	88 23       	and	r24, r24
    2742:	11 f7       	brne	.-60     	; 0x2708 <UART_vidSetRxArr+0x2e>
		{
		UMatchCase[i] = matchString[i];

		}
		// Put a null operator at the end of the UMatchCase
		UMatchCase[i] = '\0';
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	88 2f       	mov	r24, r24
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	fc 01       	movw	r30, r24
    274c:	e2 5e       	subi	r30, 0xE2	; 226
    274e:	fb 4f       	sbci	r31, 0xFB	; 251
    2750:	10 82       	st	Z, r1
		// Get the UMatch Size
		UMatchSize = i;
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	80 93 54 03 	sts	0x0354, r24
		// Enable Receive Complete interrupt to begin Reception of the RxArray
		SET_BIT(UCSRB , RXCIE);
    2758:	aa e2       	ldi	r26, 0x2A	; 42
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	ea e2       	ldi	r30, 0x2A	; 42
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	80 68       	ori	r24, 0x80	; 128
    2764:	8c 93       	st	X, r24
	}
}
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <UART_vidSetMode>:

void UART_vidSetMode ( uint8 RxTxMode)
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	0f 92       	push	r0
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	89 83       	std	Y+1, r24	; 0x01
	// Clear current Tx Rx mode
	CLEAR_BIT(UCSRB ,RXEN);
    2780:	aa e2       	ldi	r26, 0x2A	; 42
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	ea e2       	ldi	r30, 0x2A	; 42
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	8f 7e       	andi	r24, 0xEF	; 239
    278c:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB , TXEN);
    278e:	aa e2       	ldi	r26, 0x2A	; 42
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	ea e2       	ldi	r30, 0x2A	; 42
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	87 7f       	andi	r24, 0xF7	; 247
    279a:	8c 93       	st	X, r24
	// Set new Tx Rx Mode
	UCSRB |= RxTxMode;
    279c:	aa e2       	ldi	r26, 0x2A	; 42
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	ea e2       	ldi	r30, 0x2A	; 42
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	90 81       	ld	r25, Z
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	89 2b       	or	r24, r25
    27aa:	8c 93       	st	X, r24
}
    27ac:	0f 90       	pop	r0
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <__vector_14>:

//----------------------------------------------------
// UDR empty interrupt
void __vector_14(void) __attribute__((signal,__INTR_ATTRS));
void __vector_14(void)
{
    27b4:	1f 92       	push	r1
    27b6:	0f 92       	push	r0
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	0f 92       	push	r0
    27bc:	11 24       	eor	r1, r1
    27be:	8f 93       	push	r24
    27c0:	9f 93       	push	r25
    27c2:	af 93       	push	r26
    27c4:	bf 93       	push	r27
    27c6:	ef 93       	push	r30
    27c8:	ff 93       	push	r31
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62

	// Transmit the UTxArray assigned by UART_vidSetTxArr (char * data)
	// character by character
	//UART_vidTrans((uint16) UTxArray[UTxArrayIndex]);
	UDR = UTxArray[UTxArrayIndex];
    27d2:	ac e2       	ldi	r26, 0x2C	; 44
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	80 91 39 03 	lds	r24, 0x0339
    27da:	88 2f       	mov	r24, r24
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	fc 01       	movw	r30, r24
    27e0:	e7 54       	subi	r30, 0x47	; 71
    27e2:	fc 4f       	sbci	r31, 0xFC	; 252
    27e4:	80 81       	ld	r24, Z
    27e6:	8c 93       	st	X, r24
	UTxArrayIndex++;
    27e8:	80 91 39 03 	lds	r24, 0x0339
    27ec:	8f 5f       	subi	r24, 0xFF	; 255
    27ee:	80 93 39 03 	sts	0x0339, r24
	// check if the transmitted characters reached the size ot the UTxArray (UTxArraySize)
	if ( UTxArraySize < UTxArrayIndex)
    27f2:	90 91 1d 04 	lds	r25, 0x041D
    27f6:	80 91 39 03 	lds	r24, 0x0339
    27fa:	98 17       	cp	r25, r24
    27fc:	58 f4       	brcc	.+22     	; 0x2814 <__vector_14+0x60>
	{
		// if condition is true -- disaple the UDR empty interrupt and set the transmission done flag (UTxFlag =1)
		CLEAR_BIT(UCSRB,UDRIE); // disable Interrupt
    27fe:	aa e2       	ldi	r26, 0x2A	; 42
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	ea e2       	ldi	r30, 0x2A	; 42
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	8f 7d       	andi	r24, 0xDF	; 223
    280a:	8c 93       	st	X, r24
		UTxFlag =0;
    280c:	10 92 3a 03 	sts	0x033A, r1
		UTxArrayIndex=0;
    2810:	10 92 39 03 	sts	0x0339, r1
	}

}
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	ff 91       	pop	r31
    281a:	ef 91       	pop	r30
    281c:	bf 91       	pop	r27
    281e:	af 91       	pop	r26
    2820:	9f 91       	pop	r25
    2822:	8f 91       	pop	r24
    2824:	0f 90       	pop	r0
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	0f 90       	pop	r0
    282a:	1f 90       	pop	r1
    282c:	18 95       	reti

0000282e <UART_vidEndReciption>:

void UART_vidEndReciption()
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
	// If true --> disable Receive complete Interrupt and set URxFlag to 1 to announce the the end of the reception
			CLEAR_BIT(UCSRB,RXCIE);
    2836:	aa e2       	ldi	r26, 0x2A	; 42
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	ea e2       	ldi	r30, 0x2A	; 42
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	8f 77       	andi	r24, 0x7F	; 127
    2842:	8c 93       	st	X, r24
			URxFlag =0;
    2844:	10 92 38 03 	sts	0x0338, r1
			URxArrayIndex =0;
    2848:	10 92 37 03 	sts	0x0337, r1

}
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <UART_vidSendChar>:


uint8 UART_vidSendChar( uint8 data )
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	00 d0       	rcall	.+0      	; 0x2858 <UART_vidSendChar+0x6>
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	89 83       	std	Y+1, r24	; 0x01

		// wait until UDR empty flag is one to load UDR register with pollData value
		if ( GET_BIT(UCSRA,UDRE) )
    285e:	eb e2       	ldi	r30, 0x2B	; 43
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	88 2f       	mov	r24, r24
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	80 72       	andi	r24, 0x20	; 32
    286a:	90 70       	andi	r25, 0x00	; 0
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	39 f0       	breq	.+14     	; 0x287e <UART_vidSendChar+0x2c>
		{
		UDR =data;
    2870:	ec e2       	ldi	r30, 0x2C	; 44
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	80 83       	st	Z, r24
		return 1;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	8a 83       	std	Y+2, r24	; 0x02
    287c:	01 c0       	rjmp	.+2      	; 0x2880 <UART_vidSendChar+0x2e>
		}
	return 0;
    287e:	1a 82       	std	Y+2, r1	; 0x02
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <UART_vidReceiveChar>:

uint8 UART_vidReceiveChar()
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	0f 92       	push	r0
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
	if (  (GET_BIT(UCSRA ,RXC)) )
    2896:	eb e2       	ldi	r30, 0x2B	; 43
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <UART_vidReceiveChar+0x1e>
	{
			return UDR ;
    28a0:	ec e2       	ldi	r30, 0x2C	; 44
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <UART_vidReceiveChar+0x20>
	}
	return 0;
    28aa:	19 82       	std	Y+1, r1	; 0x01
    28ac:	89 81       	ldd	r24, Y+1	; 0x01

}
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <__vector_13>:
//	///////// DEBUG /////////

///////// Recive Complete Interrupt
void __vector_13(void) __attribute__((signal,__INTR_ATTRS));
void __vector_13(void)
{
    28b6:	1f 92       	push	r1
    28b8:	0f 92       	push	r0
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	0f 92       	push	r0
    28be:	11 24       	eor	r1, r1
    28c0:	2f 93       	push	r18
    28c2:	8f 93       	push	r24
    28c4:	9f 93       	push	r25
    28c6:	af 93       	push	r26
    28c8:	bf 93       	push	r27
    28ca:	ef 93       	push	r30
    28cc:	ff 93       	push	r31
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
	// Receive the URxArray character by character
	URxArray[URxArrayIndex] =UDR;
    28d6:	80 91 37 03 	lds	r24, 0x0337
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	ec e2       	ldi	r30, 0x2C	; 44
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	20 81       	ld	r18, Z
    28e4:	fc 01       	movw	r30, r24
    28e6:	eb 5a       	subi	r30, 0xAB	; 171
    28e8:	fc 4f       	sbci	r31, 0xFC	; 252
    28ea:	20 83       	st	Z, r18
//	/////////// DEBUG////////
//	iDebug++ ;
//		///////// DEBUG /////////
	// Check if there is a UMatchCase with size >0 to compare the received stream with
	// and check if the received matching stream doesn't exceed the UMatchCase Array size.
	if ( (UMatchSize >0 ) && (URxArrayIndex < UMatchSize))
    28ec:	80 91 54 03 	lds	r24, 0x0354
    28f0:	88 23       	and	r24, r24
    28f2:	09 f1       	breq	.+66     	; 0x2936 <__vector_13+0x80>
    28f4:	90 91 37 03 	lds	r25, 0x0337
    28f8:	80 91 54 03 	lds	r24, 0x0354
    28fc:	98 17       	cp	r25, r24
    28fe:	d8 f4       	brcc	.+54     	; 0x2936 <__vector_13+0x80>
	{

		// If the received stream is not matching the UMatchCase array  then reset the Index of URxArray
		if (URxArray[URxArrayIndex] != UMatchCase[URxArrayIndex])
    2900:	80 91 37 03 	lds	r24, 0x0337
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	fc 01       	movw	r30, r24
    290a:	eb 5a       	subi	r30, 0xAB	; 171
    290c:	fc 4f       	sbci	r31, 0xFC	; 252
    290e:	20 81       	ld	r18, Z
    2910:	80 91 37 03 	lds	r24, 0x0337
    2914:	88 2f       	mov	r24, r24
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	fc 01       	movw	r30, r24
    291a:	e2 5e       	subi	r30, 0xE2	; 226
    291c:	fb 4f       	sbci	r31, 0xFB	; 251
    291e:	80 81       	ld	r24, Z
    2920:	28 17       	cp	r18, r24
    2922:	19 f0       	breq	.+6      	; 0x292a <__vector_13+0x74>
		{
			URxArrayIndex =0;
    2924:	10 92 37 03 	sts	0x0337, r1
    2928:	0b c0       	rjmp	.+22     	; 0x2940 <__vector_13+0x8a>
			// Else -- > go to the next character
			///////// DEBUG ///////////
//			DIO_vidSetPinDir(8+URxArrayIndex,1);
//			DIO_vidWritePin(8+URxArrayIndex,1);
//			/////////// DEBUG //////////
			URxArrayIndex++;
    292a:	80 91 37 03 	lds	r24, 0x0337
    292e:	8f 5f       	subi	r24, 0xFF	; 255
    2930:	80 93 37 03 	sts	0x0337, r24
    2934:	05 c0       	rjmp	.+10     	; 0x2940 <__vector_13+0x8a>

//		///////// DEBUG ///////////
//		DIO_vidSetPinDir(8+URxArrayIndex,1);
//		DIO_vidWritePin(8+URxArrayIndex,1);
//		/////////// DEBUG //////////
		URxArrayIndex++;
    2936:	80 91 37 03 	lds	r24, 0x0337
    293a:	8f 5f       	subi	r24, 0xFF	; 255
    293c:	80 93 37 03 	sts	0x0337, r24

	}
	
	// Check if the received stream size is equal to the URxArraySize
	if ( URxArraySize <= URxArrayIndex)
    2940:	90 91 53 03 	lds	r25, 0x0353
    2944:	80 91 37 03 	lds	r24, 0x0337
    2948:	89 17       	cp	r24, r25
    294a:	98 f0       	brcs	.+38     	; 0x2972 <__vector_13+0xbc>
	{
		// If true --> disable Receive complete Interrupt and set URxFlag to 1 to announce the the end of the reception
		URxArray[URxArrayIndex] ='\0';
    294c:	80 91 37 03 	lds	r24, 0x0337
    2950:	88 2f       	mov	r24, r24
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	fc 01       	movw	r30, r24
    2956:	eb 5a       	subi	r30, 0xAB	; 171
    2958:	fc 4f       	sbci	r31, 0xFC	; 252
    295a:	10 82       	st	Z, r1
		CLEAR_BIT(UCSRB,RXCIE);
    295c:	aa e2       	ldi	r26, 0x2A	; 42
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	ea e2       	ldi	r30, 0x2A	; 42
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	8f 77       	andi	r24, 0x7F	; 127
    2968:	8c 93       	st	X, r24
		URxFlag =0;
    296a:	10 92 38 03 	sts	0x0338, r1
		URxArrayIndex =0;
    296e:	10 92 37 03 	sts	0x0337, r1


	}


}
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	ff 91       	pop	r31
    2978:	ef 91       	pop	r30
    297a:	bf 91       	pop	r27
    297c:	af 91       	pop	r26
    297e:	9f 91       	pop	r25
    2980:	8f 91       	pop	r24
    2982:	2f 91       	pop	r18
    2984:	0f 90       	pop	r0
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	0f 90       	pop	r0
    298a:	1f 90       	pop	r1
    298c:	18 95       	reti

0000298e <main>:
uint8 Traffic_MainFlag =0;



int main()
{
    298e:	ef 92       	push	r14
    2990:	0f 93       	push	r16
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62

//	//////////
//	DIO_vidSetPortDir(0,0xff);
//	DIO_vidSetPortDir(3,0xff);
//
	SET_BIT(DDRA,0);
    299a:	aa e3       	ldi	r26, 0x3A	; 58
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	ea e3       	ldi	r30, 0x3A	; 58
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	81 60       	ori	r24, 0x01	; 1
    29a6:	8c 93       	st	X, r24
//	SET_BIT(DDRB,3);
//	SET_BIT(DDRB,2);
//	//SET_BIT(SREG,7);

	timer0_vidInit(presc8,ctc,125);
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	68 e0       	ldi	r22, 0x08	; 8
    29ac:	4d e7       	ldi	r20, 0x7D	; 125
    29ae:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <timer0_vidInit>
	timer0_vidIntMs();
    29b2:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <timer0_vidIntMs>
	///////GLOPAL TIMER /////
	

	//TIMER_vidSetISRCallback(Sch_UpdateTick );
	//timer0_vidInit(presc8,ctc,125);
	Timer0_vidSetCallBack(Sch_UpdateTick);
    29b6:	80 e8       	ldi	r24, 0x80	; 128
    29b8:	9f e0       	ldi	r25, 0x0F	; 15
    29ba:	0e 94 cd 11 	call	0x239a	; 0x239a <Timer0_vidSetCallBack>


	UART_vidInit(TxRxOn,UnormalMode,stop1size8,DataRegEmpInter,risingTXfallingRX,parityDisapled);
    29be:	88 e1       	ldi	r24, 0x18	; 24
    29c0:	60 e0       	ldi	r22, 0x00	; 0
    29c2:	46 e0       	ldi	r20, 0x06	; 6
    29c4:	20 e2       	ldi	r18, 0x20	; 32
    29c6:	00 e0       	ldi	r16, 0x00	; 0
    29c8:	ee 24       	eor	r14, r14
    29ca:	0e 94 63 12 	call	0x24c6	; 0x24c6 <UART_vidInit>
	//DIO_vidSetPinDir(1,HIGH);

	while (1)
	{

		Sch_Start();
    29ce:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <Sch_Start>
    29d2:	fd cf       	rjmp	.-6      	; 0x29ce <main+0x40>

000029d4 <__udivmodhi4>:
    29d4:	aa 1b       	sub	r26, r26
    29d6:	bb 1b       	sub	r27, r27
    29d8:	51 e1       	ldi	r21, 0x11	; 17
    29da:	07 c0       	rjmp	.+14     	; 0x29ea <__udivmodhi4_ep>

000029dc <__udivmodhi4_loop>:
    29dc:	aa 1f       	adc	r26, r26
    29de:	bb 1f       	adc	r27, r27
    29e0:	a6 17       	cp	r26, r22
    29e2:	b7 07       	cpc	r27, r23
    29e4:	10 f0       	brcs	.+4      	; 0x29ea <__udivmodhi4_ep>
    29e6:	a6 1b       	sub	r26, r22
    29e8:	b7 0b       	sbc	r27, r23

000029ea <__udivmodhi4_ep>:
    29ea:	88 1f       	adc	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	5a 95       	dec	r21
    29f0:	a9 f7       	brne	.-22     	; 0x29dc <__udivmodhi4_loop>
    29f2:	80 95       	com	r24
    29f4:	90 95       	com	r25
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	08 95       	ret

000029fc <__udivmodsi4>:
    29fc:	a1 e2       	ldi	r26, 0x21	; 33
    29fe:	1a 2e       	mov	r1, r26
    2a00:	aa 1b       	sub	r26, r26
    2a02:	bb 1b       	sub	r27, r27
    2a04:	fd 01       	movw	r30, r26
    2a06:	0d c0       	rjmp	.+26     	; 0x2a22 <__udivmodsi4_ep>

00002a08 <__udivmodsi4_loop>:
    2a08:	aa 1f       	adc	r26, r26
    2a0a:	bb 1f       	adc	r27, r27
    2a0c:	ee 1f       	adc	r30, r30
    2a0e:	ff 1f       	adc	r31, r31
    2a10:	a2 17       	cp	r26, r18
    2a12:	b3 07       	cpc	r27, r19
    2a14:	e4 07       	cpc	r30, r20
    2a16:	f5 07       	cpc	r31, r21
    2a18:	20 f0       	brcs	.+8      	; 0x2a22 <__udivmodsi4_ep>
    2a1a:	a2 1b       	sub	r26, r18
    2a1c:	b3 0b       	sbc	r27, r19
    2a1e:	e4 0b       	sbc	r30, r20
    2a20:	f5 0b       	sbc	r31, r21

00002a22 <__udivmodsi4_ep>:
    2a22:	66 1f       	adc	r22, r22
    2a24:	77 1f       	adc	r23, r23
    2a26:	88 1f       	adc	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	1a 94       	dec	r1
    2a2c:	69 f7       	brne	.-38     	; 0x2a08 <__udivmodsi4_loop>
    2a2e:	60 95       	com	r22
    2a30:	70 95       	com	r23
    2a32:	80 95       	com	r24
    2a34:	90 95       	com	r25
    2a36:	9b 01       	movw	r18, r22
    2a38:	ac 01       	movw	r20, r24
    2a3a:	bd 01       	movw	r22, r26
    2a3c:	cf 01       	movw	r24, r30
    2a3e:	08 95       	ret

00002a40 <memcpy>:
    2a40:	fb 01       	movw	r30, r22
    2a42:	dc 01       	movw	r26, r24
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <memcpy+0xa>
    2a46:	01 90       	ld	r0, Z+
    2a48:	0d 92       	st	X+, r0
    2a4a:	41 50       	subi	r20, 0x01	; 1
    2a4c:	50 40       	sbci	r21, 0x00	; 0
    2a4e:	d8 f7       	brcc	.-10     	; 0x2a46 <memcpy+0x6>
    2a50:	08 95       	ret

00002a52 <sprintf>:
    2a52:	ae e0       	ldi	r26, 0x0E	; 14
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	ef e2       	ldi	r30, 0x2F	; 47
    2a58:	f5 e1       	ldi	r31, 0x15	; 21
    2a5a:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__prologue_saves__+0x1c>
    2a5e:	0d 89       	ldd	r16, Y+21	; 0x15
    2a60:	1e 89       	ldd	r17, Y+22	; 0x16
    2a62:	86 e0       	ldi	r24, 0x06	; 6
    2a64:	8c 83       	std	Y+4, r24	; 0x04
    2a66:	1a 83       	std	Y+2, r17	; 0x02
    2a68:	09 83       	std	Y+1, r16	; 0x01
    2a6a:	8f ef       	ldi	r24, 0xFF	; 255
    2a6c:	9f e7       	ldi	r25, 0x7F	; 127
    2a6e:	9e 83       	std	Y+6, r25	; 0x06
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	9e 01       	movw	r18, r28
    2a74:	27 5e       	subi	r18, 0xE7	; 231
    2a76:	3f 4f       	sbci	r19, 0xFF	; 255
    2a78:	ce 01       	movw	r24, r28
    2a7a:	01 96       	adiw	r24, 0x01	; 1
    2a7c:	6f 89       	ldd	r22, Y+23	; 0x17
    2a7e:	78 8d       	ldd	r23, Y+24	; 0x18
    2a80:	a9 01       	movw	r20, r18
    2a82:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <vfprintf>
    2a86:	2f 81       	ldd	r18, Y+7	; 0x07
    2a88:	38 85       	ldd	r19, Y+8	; 0x08
    2a8a:	02 0f       	add	r16, r18
    2a8c:	13 1f       	adc	r17, r19
    2a8e:	f8 01       	movw	r30, r16
    2a90:	10 82       	st	Z, r1
    2a92:	2e 96       	adiw	r28, 0x0e	; 14
    2a94:	e4 e0       	ldi	r30, 0x04	; 4
    2a96:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__epilogue_restores__+0x1c>

00002a9a <vfprintf>:
    2a9a:	ab e0       	ldi	r26, 0x0B	; 11
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	e3 e5       	ldi	r30, 0x53	; 83
    2aa0:	f5 e1       	ldi	r31, 0x15	; 21
    2aa2:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__>
    2aa6:	3c 01       	movw	r6, r24
    2aa8:	2b 01       	movw	r4, r22
    2aaa:	5a 01       	movw	r10, r20
    2aac:	fc 01       	movw	r30, r24
    2aae:	17 82       	std	Z+7, r1	; 0x07
    2ab0:	16 82       	std	Z+6, r1	; 0x06
    2ab2:	83 81       	ldd	r24, Z+3	; 0x03
    2ab4:	81 fd       	sbrc	r24, 1
    2ab6:	03 c0       	rjmp	.+6      	; 0x2abe <vfprintf+0x24>
    2ab8:	6f ef       	ldi	r22, 0xFF	; 255
    2aba:	7f ef       	ldi	r23, 0xFF	; 255
    2abc:	c6 c1       	rjmp	.+908    	; 0x2e4a <vfprintf+0x3b0>
    2abe:	9a e0       	ldi	r25, 0x0A	; 10
    2ac0:	89 2e       	mov	r8, r25
    2ac2:	1e 01       	movw	r2, r28
    2ac4:	08 94       	sec
    2ac6:	21 1c       	adc	r2, r1
    2ac8:	31 1c       	adc	r3, r1
    2aca:	f3 01       	movw	r30, r6
    2acc:	23 81       	ldd	r18, Z+3	; 0x03
    2ace:	f2 01       	movw	r30, r4
    2ad0:	23 fd       	sbrc	r18, 3
    2ad2:	85 91       	lpm	r24, Z+
    2ad4:	23 ff       	sbrs	r18, 3
    2ad6:	81 91       	ld	r24, Z+
    2ad8:	2f 01       	movw	r4, r30
    2ada:	88 23       	and	r24, r24
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <vfprintf+0x46>
    2ade:	b2 c1       	rjmp	.+868    	; 0x2e44 <vfprintf+0x3aa>
    2ae0:	85 32       	cpi	r24, 0x25	; 37
    2ae2:	39 f4       	brne	.+14     	; 0x2af2 <vfprintf+0x58>
    2ae4:	23 fd       	sbrc	r18, 3
    2ae6:	85 91       	lpm	r24, Z+
    2ae8:	23 ff       	sbrs	r18, 3
    2aea:	81 91       	ld	r24, Z+
    2aec:	2f 01       	movw	r4, r30
    2aee:	85 32       	cpi	r24, 0x25	; 37
    2af0:	29 f4       	brne	.+10     	; 0x2afc <vfprintf+0x62>
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	b3 01       	movw	r22, r6
    2af6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <fputc>
    2afa:	e7 cf       	rjmp	.-50     	; 0x2aca <vfprintf+0x30>
    2afc:	98 2f       	mov	r25, r24
    2afe:	ff 24       	eor	r15, r15
    2b00:	ee 24       	eor	r14, r14
    2b02:	99 24       	eor	r9, r9
    2b04:	ff e1       	ldi	r31, 0x1F	; 31
    2b06:	ff 15       	cp	r31, r15
    2b08:	d0 f0       	brcs	.+52     	; 0x2b3e <vfprintf+0xa4>
    2b0a:	9b 32       	cpi	r25, 0x2B	; 43
    2b0c:	69 f0       	breq	.+26     	; 0x2b28 <vfprintf+0x8e>
    2b0e:	9c 32       	cpi	r25, 0x2C	; 44
    2b10:	28 f4       	brcc	.+10     	; 0x2b1c <vfprintf+0x82>
    2b12:	90 32       	cpi	r25, 0x20	; 32
    2b14:	59 f0       	breq	.+22     	; 0x2b2c <vfprintf+0x92>
    2b16:	93 32       	cpi	r25, 0x23	; 35
    2b18:	91 f4       	brne	.+36     	; 0x2b3e <vfprintf+0xa4>
    2b1a:	0e c0       	rjmp	.+28     	; 0x2b38 <vfprintf+0x9e>
    2b1c:	9d 32       	cpi	r25, 0x2D	; 45
    2b1e:	49 f0       	breq	.+18     	; 0x2b32 <vfprintf+0x98>
    2b20:	90 33       	cpi	r25, 0x30	; 48
    2b22:	69 f4       	brne	.+26     	; 0x2b3e <vfprintf+0xa4>
    2b24:	41 e0       	ldi	r20, 0x01	; 1
    2b26:	24 c0       	rjmp	.+72     	; 0x2b70 <vfprintf+0xd6>
    2b28:	52 e0       	ldi	r21, 0x02	; 2
    2b2a:	f5 2a       	or	r15, r21
    2b2c:	84 e0       	ldi	r24, 0x04	; 4
    2b2e:	f8 2a       	or	r15, r24
    2b30:	28 c0       	rjmp	.+80     	; 0x2b82 <vfprintf+0xe8>
    2b32:	98 e0       	ldi	r25, 0x08	; 8
    2b34:	f9 2a       	or	r15, r25
    2b36:	25 c0       	rjmp	.+74     	; 0x2b82 <vfprintf+0xe8>
    2b38:	e0 e1       	ldi	r30, 0x10	; 16
    2b3a:	fe 2a       	or	r15, r30
    2b3c:	22 c0       	rjmp	.+68     	; 0x2b82 <vfprintf+0xe8>
    2b3e:	f7 fc       	sbrc	r15, 7
    2b40:	29 c0       	rjmp	.+82     	; 0x2b94 <vfprintf+0xfa>
    2b42:	89 2f       	mov	r24, r25
    2b44:	80 53       	subi	r24, 0x30	; 48
    2b46:	8a 30       	cpi	r24, 0x0A	; 10
    2b48:	70 f4       	brcc	.+28     	; 0x2b66 <vfprintf+0xcc>
    2b4a:	f6 fe       	sbrs	r15, 6
    2b4c:	05 c0       	rjmp	.+10     	; 0x2b58 <vfprintf+0xbe>
    2b4e:	98 9c       	mul	r9, r8
    2b50:	90 2c       	mov	r9, r0
    2b52:	11 24       	eor	r1, r1
    2b54:	98 0e       	add	r9, r24
    2b56:	15 c0       	rjmp	.+42     	; 0x2b82 <vfprintf+0xe8>
    2b58:	e8 9c       	mul	r14, r8
    2b5a:	e0 2c       	mov	r14, r0
    2b5c:	11 24       	eor	r1, r1
    2b5e:	e8 0e       	add	r14, r24
    2b60:	f0 e2       	ldi	r31, 0x20	; 32
    2b62:	ff 2a       	or	r15, r31
    2b64:	0e c0       	rjmp	.+28     	; 0x2b82 <vfprintf+0xe8>
    2b66:	9e 32       	cpi	r25, 0x2E	; 46
    2b68:	29 f4       	brne	.+10     	; 0x2b74 <vfprintf+0xda>
    2b6a:	f6 fc       	sbrc	r15, 6
    2b6c:	6b c1       	rjmp	.+726    	; 0x2e44 <vfprintf+0x3aa>
    2b6e:	40 e4       	ldi	r20, 0x40	; 64
    2b70:	f4 2a       	or	r15, r20
    2b72:	07 c0       	rjmp	.+14     	; 0x2b82 <vfprintf+0xe8>
    2b74:	9c 36       	cpi	r25, 0x6C	; 108
    2b76:	19 f4       	brne	.+6      	; 0x2b7e <vfprintf+0xe4>
    2b78:	50 e8       	ldi	r21, 0x80	; 128
    2b7a:	f5 2a       	or	r15, r21
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <vfprintf+0xe8>
    2b7e:	98 36       	cpi	r25, 0x68	; 104
    2b80:	49 f4       	brne	.+18     	; 0x2b94 <vfprintf+0xfa>
    2b82:	f2 01       	movw	r30, r4
    2b84:	23 fd       	sbrc	r18, 3
    2b86:	95 91       	lpm	r25, Z+
    2b88:	23 ff       	sbrs	r18, 3
    2b8a:	91 91       	ld	r25, Z+
    2b8c:	2f 01       	movw	r4, r30
    2b8e:	99 23       	and	r25, r25
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <vfprintf+0xfa>
    2b92:	b8 cf       	rjmp	.-144    	; 0x2b04 <vfprintf+0x6a>
    2b94:	89 2f       	mov	r24, r25
    2b96:	85 54       	subi	r24, 0x45	; 69
    2b98:	83 30       	cpi	r24, 0x03	; 3
    2b9a:	18 f0       	brcs	.+6      	; 0x2ba2 <vfprintf+0x108>
    2b9c:	80 52       	subi	r24, 0x20	; 32
    2b9e:	83 30       	cpi	r24, 0x03	; 3
    2ba0:	38 f4       	brcc	.+14     	; 0x2bb0 <vfprintf+0x116>
    2ba2:	44 e0       	ldi	r20, 0x04	; 4
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	a4 0e       	add	r10, r20
    2ba8:	b5 1e       	adc	r11, r21
    2baa:	5f e3       	ldi	r21, 0x3F	; 63
    2bac:	59 83       	std	Y+1, r21	; 0x01
    2bae:	0f c0       	rjmp	.+30     	; 0x2bce <vfprintf+0x134>
    2bb0:	93 36       	cpi	r25, 0x63	; 99
    2bb2:	31 f0       	breq	.+12     	; 0x2bc0 <vfprintf+0x126>
    2bb4:	93 37       	cpi	r25, 0x73	; 115
    2bb6:	79 f0       	breq	.+30     	; 0x2bd6 <vfprintf+0x13c>
    2bb8:	93 35       	cpi	r25, 0x53	; 83
    2bba:	09 f0       	breq	.+2      	; 0x2bbe <vfprintf+0x124>
    2bbc:	56 c0       	rjmp	.+172    	; 0x2c6a <vfprintf+0x1d0>
    2bbe:	20 c0       	rjmp	.+64     	; 0x2c00 <vfprintf+0x166>
    2bc0:	f5 01       	movw	r30, r10
    2bc2:	80 81       	ld	r24, Z
    2bc4:	89 83       	std	Y+1, r24	; 0x01
    2bc6:	42 e0       	ldi	r20, 0x02	; 2
    2bc8:	50 e0       	ldi	r21, 0x00	; 0
    2bca:	a4 0e       	add	r10, r20
    2bcc:	b5 1e       	adc	r11, r21
    2bce:	61 01       	movw	r12, r2
    2bd0:	01 e0       	ldi	r16, 0x01	; 1
    2bd2:	10 e0       	ldi	r17, 0x00	; 0
    2bd4:	12 c0       	rjmp	.+36     	; 0x2bfa <vfprintf+0x160>
    2bd6:	f5 01       	movw	r30, r10
    2bd8:	c0 80       	ld	r12, Z
    2bda:	d1 80       	ldd	r13, Z+1	; 0x01
    2bdc:	f6 fc       	sbrc	r15, 6
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <vfprintf+0x14c>
    2be0:	6f ef       	ldi	r22, 0xFF	; 255
    2be2:	7f ef       	ldi	r23, 0xFF	; 255
    2be4:	02 c0       	rjmp	.+4      	; 0x2bea <vfprintf+0x150>
    2be6:	69 2d       	mov	r22, r9
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	42 e0       	ldi	r20, 0x02	; 2
    2bec:	50 e0       	ldi	r21, 0x00	; 0
    2bee:	a4 0e       	add	r10, r20
    2bf0:	b5 1e       	adc	r11, r21
    2bf2:	c6 01       	movw	r24, r12
    2bf4:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <strnlen>
    2bf8:	8c 01       	movw	r16, r24
    2bfa:	5f e7       	ldi	r21, 0x7F	; 127
    2bfc:	f5 22       	and	r15, r21
    2bfe:	14 c0       	rjmp	.+40     	; 0x2c28 <vfprintf+0x18e>
    2c00:	f5 01       	movw	r30, r10
    2c02:	c0 80       	ld	r12, Z
    2c04:	d1 80       	ldd	r13, Z+1	; 0x01
    2c06:	f6 fc       	sbrc	r15, 6
    2c08:	03 c0       	rjmp	.+6      	; 0x2c10 <vfprintf+0x176>
    2c0a:	6f ef       	ldi	r22, 0xFF	; 255
    2c0c:	7f ef       	ldi	r23, 0xFF	; 255
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <vfprintf+0x17a>
    2c10:	69 2d       	mov	r22, r9
    2c12:	70 e0       	ldi	r23, 0x00	; 0
    2c14:	42 e0       	ldi	r20, 0x02	; 2
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	a4 0e       	add	r10, r20
    2c1a:	b5 1e       	adc	r11, r21
    2c1c:	c6 01       	movw	r24, r12
    2c1e:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <strnlen_P>
    2c22:	8c 01       	movw	r16, r24
    2c24:	50 e8       	ldi	r21, 0x80	; 128
    2c26:	f5 2a       	or	r15, r21
    2c28:	f3 fe       	sbrs	r15, 3
    2c2a:	07 c0       	rjmp	.+14     	; 0x2c3a <vfprintf+0x1a0>
    2c2c:	1a c0       	rjmp	.+52     	; 0x2c62 <vfprintf+0x1c8>
    2c2e:	80 e2       	ldi	r24, 0x20	; 32
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	b3 01       	movw	r22, r6
    2c34:	0e 94 40 17 	call	0x2e80	; 0x2e80 <fputc>
    2c38:	ea 94       	dec	r14
    2c3a:	8e 2d       	mov	r24, r14
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	08 17       	cp	r16, r24
    2c40:	19 07       	cpc	r17, r25
    2c42:	a8 f3       	brcs	.-22     	; 0x2c2e <vfprintf+0x194>
    2c44:	0e c0       	rjmp	.+28     	; 0x2c62 <vfprintf+0x1c8>
    2c46:	f6 01       	movw	r30, r12
    2c48:	f7 fc       	sbrc	r15, 7
    2c4a:	85 91       	lpm	r24, Z+
    2c4c:	f7 fe       	sbrs	r15, 7
    2c4e:	81 91       	ld	r24, Z+
    2c50:	6f 01       	movw	r12, r30
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	b3 01       	movw	r22, r6
    2c56:	0e 94 40 17 	call	0x2e80	; 0x2e80 <fputc>
    2c5a:	e1 10       	cpse	r14, r1
    2c5c:	ea 94       	dec	r14
    2c5e:	01 50       	subi	r16, 0x01	; 1
    2c60:	10 40       	sbci	r17, 0x00	; 0
    2c62:	01 15       	cp	r16, r1
    2c64:	11 05       	cpc	r17, r1
    2c66:	79 f7       	brne	.-34     	; 0x2c46 <vfprintf+0x1ac>
    2c68:	ea c0       	rjmp	.+468    	; 0x2e3e <vfprintf+0x3a4>
    2c6a:	94 36       	cpi	r25, 0x64	; 100
    2c6c:	11 f0       	breq	.+4      	; 0x2c72 <vfprintf+0x1d8>
    2c6e:	99 36       	cpi	r25, 0x69	; 105
    2c70:	69 f5       	brne	.+90     	; 0x2ccc <vfprintf+0x232>
    2c72:	f7 fe       	sbrs	r15, 7
    2c74:	08 c0       	rjmp	.+16     	; 0x2c86 <vfprintf+0x1ec>
    2c76:	f5 01       	movw	r30, r10
    2c78:	20 81       	ld	r18, Z
    2c7a:	31 81       	ldd	r19, Z+1	; 0x01
    2c7c:	42 81       	ldd	r20, Z+2	; 0x02
    2c7e:	53 81       	ldd	r21, Z+3	; 0x03
    2c80:	84 e0       	ldi	r24, 0x04	; 4
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0a c0       	rjmp	.+20     	; 0x2c9a <vfprintf+0x200>
    2c86:	f5 01       	movw	r30, r10
    2c88:	80 81       	ld	r24, Z
    2c8a:	91 81       	ldd	r25, Z+1	; 0x01
    2c8c:	9c 01       	movw	r18, r24
    2c8e:	44 27       	eor	r20, r20
    2c90:	37 fd       	sbrc	r19, 7
    2c92:	40 95       	com	r20
    2c94:	54 2f       	mov	r21, r20
    2c96:	82 e0       	ldi	r24, 0x02	; 2
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	a8 0e       	add	r10, r24
    2c9c:	b9 1e       	adc	r11, r25
    2c9e:	9f e6       	ldi	r25, 0x6F	; 111
    2ca0:	f9 22       	and	r15, r25
    2ca2:	57 ff       	sbrs	r21, 7
    2ca4:	09 c0       	rjmp	.+18     	; 0x2cb8 <vfprintf+0x21e>
    2ca6:	50 95       	com	r21
    2ca8:	40 95       	com	r20
    2caa:	30 95       	com	r19
    2cac:	21 95       	neg	r18
    2cae:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb0:	4f 4f       	sbci	r20, 0xFF	; 255
    2cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb4:	e0 e8       	ldi	r30, 0x80	; 128
    2cb6:	fe 2a       	or	r15, r30
    2cb8:	ca 01       	movw	r24, r20
    2cba:	b9 01       	movw	r22, r18
    2cbc:	a1 01       	movw	r20, r2
    2cbe:	2a e0       	ldi	r18, 0x0A	; 10
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__ultoa_invert>
    2cc6:	d8 2e       	mov	r13, r24
    2cc8:	d2 18       	sub	r13, r2
    2cca:	40 c0       	rjmp	.+128    	; 0x2d4c <vfprintf+0x2b2>
    2ccc:	95 37       	cpi	r25, 0x75	; 117
    2cce:	29 f4       	brne	.+10     	; 0x2cda <vfprintf+0x240>
    2cd0:	1f 2d       	mov	r17, r15
    2cd2:	1f 7e       	andi	r17, 0xEF	; 239
    2cd4:	2a e0       	ldi	r18, 0x0A	; 10
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	1d c0       	rjmp	.+58     	; 0x2d14 <vfprintf+0x27a>
    2cda:	1f 2d       	mov	r17, r15
    2cdc:	19 7f       	andi	r17, 0xF9	; 249
    2cde:	9f 36       	cpi	r25, 0x6F	; 111
    2ce0:	61 f0       	breq	.+24     	; 0x2cfa <vfprintf+0x260>
    2ce2:	90 37       	cpi	r25, 0x70	; 112
    2ce4:	20 f4       	brcc	.+8      	; 0x2cee <vfprintf+0x254>
    2ce6:	98 35       	cpi	r25, 0x58	; 88
    2ce8:	09 f0       	breq	.+2      	; 0x2cec <vfprintf+0x252>
    2cea:	ac c0       	rjmp	.+344    	; 0x2e44 <vfprintf+0x3aa>
    2cec:	0f c0       	rjmp	.+30     	; 0x2d0c <vfprintf+0x272>
    2cee:	90 37       	cpi	r25, 0x70	; 112
    2cf0:	39 f0       	breq	.+14     	; 0x2d00 <vfprintf+0x266>
    2cf2:	98 37       	cpi	r25, 0x78	; 120
    2cf4:	09 f0       	breq	.+2      	; 0x2cf8 <vfprintf+0x25e>
    2cf6:	a6 c0       	rjmp	.+332    	; 0x2e44 <vfprintf+0x3aa>
    2cf8:	04 c0       	rjmp	.+8      	; 0x2d02 <vfprintf+0x268>
    2cfa:	28 e0       	ldi	r18, 0x08	; 8
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	0a c0       	rjmp	.+20     	; 0x2d14 <vfprintf+0x27a>
    2d00:	10 61       	ori	r17, 0x10	; 16
    2d02:	14 fd       	sbrc	r17, 4
    2d04:	14 60       	ori	r17, 0x04	; 4
    2d06:	20 e1       	ldi	r18, 0x10	; 16
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	04 c0       	rjmp	.+8      	; 0x2d14 <vfprintf+0x27a>
    2d0c:	14 fd       	sbrc	r17, 4
    2d0e:	16 60       	ori	r17, 0x06	; 6
    2d10:	20 e1       	ldi	r18, 0x10	; 16
    2d12:	32 e0       	ldi	r19, 0x02	; 2
    2d14:	17 ff       	sbrs	r17, 7
    2d16:	08 c0       	rjmp	.+16     	; 0x2d28 <vfprintf+0x28e>
    2d18:	f5 01       	movw	r30, r10
    2d1a:	60 81       	ld	r22, Z
    2d1c:	71 81       	ldd	r23, Z+1	; 0x01
    2d1e:	82 81       	ldd	r24, Z+2	; 0x02
    2d20:	93 81       	ldd	r25, Z+3	; 0x03
    2d22:	44 e0       	ldi	r20, 0x04	; 4
    2d24:	50 e0       	ldi	r21, 0x00	; 0
    2d26:	08 c0       	rjmp	.+16     	; 0x2d38 <vfprintf+0x29e>
    2d28:	f5 01       	movw	r30, r10
    2d2a:	80 81       	ld	r24, Z
    2d2c:	91 81       	ldd	r25, Z+1	; 0x01
    2d2e:	bc 01       	movw	r22, r24
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	42 e0       	ldi	r20, 0x02	; 2
    2d36:	50 e0       	ldi	r21, 0x00	; 0
    2d38:	a4 0e       	add	r10, r20
    2d3a:	b5 1e       	adc	r11, r21
    2d3c:	a1 01       	movw	r20, r2
    2d3e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__ultoa_invert>
    2d42:	d8 2e       	mov	r13, r24
    2d44:	d2 18       	sub	r13, r2
    2d46:	8f e7       	ldi	r24, 0x7F	; 127
    2d48:	f8 2e       	mov	r15, r24
    2d4a:	f1 22       	and	r15, r17
    2d4c:	f6 fe       	sbrs	r15, 6
    2d4e:	0b c0       	rjmp	.+22     	; 0x2d66 <vfprintf+0x2cc>
    2d50:	5e ef       	ldi	r21, 0xFE	; 254
    2d52:	f5 22       	and	r15, r21
    2d54:	d9 14       	cp	r13, r9
    2d56:	38 f4       	brcc	.+14     	; 0x2d66 <vfprintf+0x2cc>
    2d58:	f4 fe       	sbrs	r15, 4
    2d5a:	07 c0       	rjmp	.+14     	; 0x2d6a <vfprintf+0x2d0>
    2d5c:	f2 fc       	sbrc	r15, 2
    2d5e:	05 c0       	rjmp	.+10     	; 0x2d6a <vfprintf+0x2d0>
    2d60:	8f ee       	ldi	r24, 0xEF	; 239
    2d62:	f8 22       	and	r15, r24
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <vfprintf+0x2d0>
    2d66:	1d 2d       	mov	r17, r13
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <vfprintf+0x2d2>
    2d6a:	19 2d       	mov	r17, r9
    2d6c:	f4 fe       	sbrs	r15, 4
    2d6e:	0d c0       	rjmp	.+26     	; 0x2d8a <vfprintf+0x2f0>
    2d70:	fe 01       	movw	r30, r28
    2d72:	ed 0d       	add	r30, r13
    2d74:	f1 1d       	adc	r31, r1
    2d76:	80 81       	ld	r24, Z
    2d78:	80 33       	cpi	r24, 0x30	; 48
    2d7a:	19 f4       	brne	.+6      	; 0x2d82 <vfprintf+0x2e8>
    2d7c:	99 ee       	ldi	r25, 0xE9	; 233
    2d7e:	f9 22       	and	r15, r25
    2d80:	08 c0       	rjmp	.+16     	; 0x2d92 <vfprintf+0x2f8>
    2d82:	1f 5f       	subi	r17, 0xFF	; 255
    2d84:	f2 fe       	sbrs	r15, 2
    2d86:	05 c0       	rjmp	.+10     	; 0x2d92 <vfprintf+0x2f8>
    2d88:	03 c0       	rjmp	.+6      	; 0x2d90 <vfprintf+0x2f6>
    2d8a:	8f 2d       	mov	r24, r15
    2d8c:	86 78       	andi	r24, 0x86	; 134
    2d8e:	09 f0       	breq	.+2      	; 0x2d92 <vfprintf+0x2f8>
    2d90:	1f 5f       	subi	r17, 0xFF	; 255
    2d92:	0f 2d       	mov	r16, r15
    2d94:	f3 fc       	sbrc	r15, 3
    2d96:	14 c0       	rjmp	.+40     	; 0x2dc0 <vfprintf+0x326>
    2d98:	f0 fe       	sbrs	r15, 0
    2d9a:	0f c0       	rjmp	.+30     	; 0x2dba <vfprintf+0x320>
    2d9c:	1e 15       	cp	r17, r14
    2d9e:	10 f0       	brcs	.+4      	; 0x2da4 <vfprintf+0x30a>
    2da0:	9d 2c       	mov	r9, r13
    2da2:	0b c0       	rjmp	.+22     	; 0x2dba <vfprintf+0x320>
    2da4:	9d 2c       	mov	r9, r13
    2da6:	9e 0c       	add	r9, r14
    2da8:	91 1a       	sub	r9, r17
    2daa:	1e 2d       	mov	r17, r14
    2dac:	06 c0       	rjmp	.+12     	; 0x2dba <vfprintf+0x320>
    2dae:	80 e2       	ldi	r24, 0x20	; 32
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	b3 01       	movw	r22, r6
    2db4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <fputc>
    2db8:	1f 5f       	subi	r17, 0xFF	; 255
    2dba:	1e 15       	cp	r17, r14
    2dbc:	c0 f3       	brcs	.-16     	; 0x2dae <vfprintf+0x314>
    2dbe:	04 c0       	rjmp	.+8      	; 0x2dc8 <vfprintf+0x32e>
    2dc0:	1e 15       	cp	r17, r14
    2dc2:	10 f4       	brcc	.+4      	; 0x2dc8 <vfprintf+0x32e>
    2dc4:	e1 1a       	sub	r14, r17
    2dc6:	01 c0       	rjmp	.+2      	; 0x2dca <vfprintf+0x330>
    2dc8:	ee 24       	eor	r14, r14
    2dca:	04 ff       	sbrs	r16, 4
    2dcc:	0f c0       	rjmp	.+30     	; 0x2dec <vfprintf+0x352>
    2dce:	80 e3       	ldi	r24, 0x30	; 48
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	b3 01       	movw	r22, r6
    2dd4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <fputc>
    2dd8:	02 ff       	sbrs	r16, 2
    2dda:	1d c0       	rjmp	.+58     	; 0x2e16 <vfprintf+0x37c>
    2ddc:	01 fd       	sbrc	r16, 1
    2dde:	03 c0       	rjmp	.+6      	; 0x2de6 <vfprintf+0x34c>
    2de0:	88 e7       	ldi	r24, 0x78	; 120
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	0e c0       	rjmp	.+28     	; 0x2e02 <vfprintf+0x368>
    2de6:	88 e5       	ldi	r24, 0x58	; 88
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	0b c0       	rjmp	.+22     	; 0x2e02 <vfprintf+0x368>
    2dec:	80 2f       	mov	r24, r16
    2dee:	86 78       	andi	r24, 0x86	; 134
    2df0:	91 f0       	breq	.+36     	; 0x2e16 <vfprintf+0x37c>
    2df2:	01 ff       	sbrs	r16, 1
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <vfprintf+0x360>
    2df6:	8b e2       	ldi	r24, 0x2B	; 43
    2df8:	01 c0       	rjmp	.+2      	; 0x2dfc <vfprintf+0x362>
    2dfa:	80 e2       	ldi	r24, 0x20	; 32
    2dfc:	f7 fc       	sbrc	r15, 7
    2dfe:	8d e2       	ldi	r24, 0x2D	; 45
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	b3 01       	movw	r22, r6
    2e04:	0e 94 40 17 	call	0x2e80	; 0x2e80 <fputc>
    2e08:	06 c0       	rjmp	.+12     	; 0x2e16 <vfprintf+0x37c>
    2e0a:	80 e3       	ldi	r24, 0x30	; 48
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	b3 01       	movw	r22, r6
    2e10:	0e 94 40 17 	call	0x2e80	; 0x2e80 <fputc>
    2e14:	9a 94       	dec	r9
    2e16:	d9 14       	cp	r13, r9
    2e18:	c0 f3       	brcs	.-16     	; 0x2e0a <vfprintf+0x370>
    2e1a:	da 94       	dec	r13
    2e1c:	f1 01       	movw	r30, r2
    2e1e:	ed 0d       	add	r30, r13
    2e20:	f1 1d       	adc	r31, r1
    2e22:	80 81       	ld	r24, Z
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	b3 01       	movw	r22, r6
    2e28:	0e 94 40 17 	call	0x2e80	; 0x2e80 <fputc>
    2e2c:	dd 20       	and	r13, r13
    2e2e:	a9 f7       	brne	.-22     	; 0x2e1a <vfprintf+0x380>
    2e30:	06 c0       	rjmp	.+12     	; 0x2e3e <vfprintf+0x3a4>
    2e32:	80 e2       	ldi	r24, 0x20	; 32
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	b3 01       	movw	r22, r6
    2e38:	0e 94 40 17 	call	0x2e80	; 0x2e80 <fputc>
    2e3c:	ea 94       	dec	r14
    2e3e:	ee 20       	and	r14, r14
    2e40:	c1 f7       	brne	.-16     	; 0x2e32 <vfprintf+0x398>
    2e42:	43 ce       	rjmp	.-890    	; 0x2aca <vfprintf+0x30>
    2e44:	f3 01       	movw	r30, r6
    2e46:	66 81       	ldd	r22, Z+6	; 0x06
    2e48:	77 81       	ldd	r23, Z+7	; 0x07
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	2b 96       	adiw	r28, 0x0b	; 11
    2e4e:	e2 e1       	ldi	r30, 0x12	; 18
    2e50:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__>

00002e54 <strnlen_P>:
    2e54:	fc 01       	movw	r30, r24
    2e56:	05 90       	lpm	r0, Z+
    2e58:	61 50       	subi	r22, 0x01	; 1
    2e5a:	70 40       	sbci	r23, 0x00	; 0
    2e5c:	01 10       	cpse	r0, r1
    2e5e:	d8 f7       	brcc	.-10     	; 0x2e56 <strnlen_P+0x2>
    2e60:	80 95       	com	r24
    2e62:	90 95       	com	r25
    2e64:	8e 0f       	add	r24, r30
    2e66:	9f 1f       	adc	r25, r31
    2e68:	08 95       	ret

00002e6a <strnlen>:
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	61 50       	subi	r22, 0x01	; 1
    2e6e:	70 40       	sbci	r23, 0x00	; 0
    2e70:	01 90       	ld	r0, Z+
    2e72:	01 10       	cpse	r0, r1
    2e74:	d8 f7       	brcc	.-10     	; 0x2e6c <strnlen+0x2>
    2e76:	80 95       	com	r24
    2e78:	90 95       	com	r25
    2e7a:	8e 0f       	add	r24, r30
    2e7c:	9f 1f       	adc	r25, r31
    2e7e:	08 95       	ret

00002e80 <fputc>:
    2e80:	0f 93       	push	r16
    2e82:	1f 93       	push	r17
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
    2e88:	8c 01       	movw	r16, r24
    2e8a:	eb 01       	movw	r28, r22
    2e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8e:	81 ff       	sbrs	r24, 1
    2e90:	1b c0       	rjmp	.+54     	; 0x2ec8 <fputc+0x48>
    2e92:	82 ff       	sbrs	r24, 2
    2e94:	0d c0       	rjmp	.+26     	; 0x2eb0 <fputc+0x30>
    2e96:	2e 81       	ldd	r18, Y+6	; 0x06
    2e98:	3f 81       	ldd	r19, Y+7	; 0x07
    2e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9e:	28 17       	cp	r18, r24
    2ea0:	39 07       	cpc	r19, r25
    2ea2:	64 f4       	brge	.+24     	; 0x2ebc <fputc+0x3c>
    2ea4:	e8 81       	ld	r30, Y
    2ea6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ea8:	01 93       	st	Z+, r16
    2eaa:	f9 83       	std	Y+1, r31	; 0x01
    2eac:	e8 83       	st	Y, r30
    2eae:	06 c0       	rjmp	.+12     	; 0x2ebc <fputc+0x3c>
    2eb0:	e8 85       	ldd	r30, Y+8	; 0x08
    2eb2:	f9 85       	ldd	r31, Y+9	; 0x09
    2eb4:	80 2f       	mov	r24, r16
    2eb6:	09 95       	icall
    2eb8:	89 2b       	or	r24, r25
    2eba:	31 f4       	brne	.+12     	; 0x2ec8 <fputc+0x48>
    2ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    2ec0:	01 96       	adiw	r24, 0x01	; 1
    2ec2:	9f 83       	std	Y+7, r25	; 0x07
    2ec4:	8e 83       	std	Y+6, r24	; 0x06
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <fputc+0x4c>
    2ec8:	0f ef       	ldi	r16, 0xFF	; 255
    2eca:	1f ef       	ldi	r17, 0xFF	; 255
    2ecc:	c8 01       	movw	r24, r16
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	08 95       	ret

00002ed8 <__ultoa_invert>:
    2ed8:	fa 01       	movw	r30, r20
    2eda:	aa 27       	eor	r26, r26
    2edc:	28 30       	cpi	r18, 0x08	; 8
    2ede:	51 f1       	breq	.+84     	; 0x2f34 <__ultoa_invert+0x5c>
    2ee0:	20 31       	cpi	r18, 0x10	; 16
    2ee2:	81 f1       	breq	.+96     	; 0x2f44 <__ultoa_invert+0x6c>
    2ee4:	e8 94       	clt
    2ee6:	6f 93       	push	r22
    2ee8:	6e 7f       	andi	r22, 0xFE	; 254
    2eea:	6e 5f       	subi	r22, 0xFE	; 254
    2eec:	7f 4f       	sbci	r23, 0xFF	; 255
    2eee:	8f 4f       	sbci	r24, 0xFF	; 255
    2ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef2:	af 4f       	sbci	r26, 0xFF	; 255
    2ef4:	b1 e0       	ldi	r27, 0x01	; 1
    2ef6:	3e d0       	rcall	.+124    	; 0x2f74 <__ultoa_invert+0x9c>
    2ef8:	b4 e0       	ldi	r27, 0x04	; 4
    2efa:	3c d0       	rcall	.+120    	; 0x2f74 <__ultoa_invert+0x9c>
    2efc:	67 0f       	add	r22, r23
    2efe:	78 1f       	adc	r23, r24
    2f00:	89 1f       	adc	r24, r25
    2f02:	9a 1f       	adc	r25, r26
    2f04:	a1 1d       	adc	r26, r1
    2f06:	68 0f       	add	r22, r24
    2f08:	79 1f       	adc	r23, r25
    2f0a:	8a 1f       	adc	r24, r26
    2f0c:	91 1d       	adc	r25, r1
    2f0e:	a1 1d       	adc	r26, r1
    2f10:	6a 0f       	add	r22, r26
    2f12:	71 1d       	adc	r23, r1
    2f14:	81 1d       	adc	r24, r1
    2f16:	91 1d       	adc	r25, r1
    2f18:	a1 1d       	adc	r26, r1
    2f1a:	20 d0       	rcall	.+64     	; 0x2f5c <__ultoa_invert+0x84>
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <__ultoa_invert+0x48>
    2f1e:	68 94       	set
    2f20:	3f 91       	pop	r19
    2f22:	2a e0       	ldi	r18, 0x0A	; 10
    2f24:	26 9f       	mul	r18, r22
    2f26:	11 24       	eor	r1, r1
    2f28:	30 19       	sub	r19, r0
    2f2a:	30 5d       	subi	r19, 0xD0	; 208
    2f2c:	31 93       	st	Z+, r19
    2f2e:	de f6       	brtc	.-74     	; 0x2ee6 <__ultoa_invert+0xe>
    2f30:	cf 01       	movw	r24, r30
    2f32:	08 95       	ret
    2f34:	46 2f       	mov	r20, r22
    2f36:	47 70       	andi	r20, 0x07	; 7
    2f38:	40 5d       	subi	r20, 0xD0	; 208
    2f3a:	41 93       	st	Z+, r20
    2f3c:	b3 e0       	ldi	r27, 0x03	; 3
    2f3e:	0f d0       	rcall	.+30     	; 0x2f5e <__ultoa_invert+0x86>
    2f40:	c9 f7       	brne	.-14     	; 0x2f34 <__ultoa_invert+0x5c>
    2f42:	f6 cf       	rjmp	.-20     	; 0x2f30 <__ultoa_invert+0x58>
    2f44:	46 2f       	mov	r20, r22
    2f46:	4f 70       	andi	r20, 0x0F	; 15
    2f48:	40 5d       	subi	r20, 0xD0	; 208
    2f4a:	4a 33       	cpi	r20, 0x3A	; 58
    2f4c:	18 f0       	brcs	.+6      	; 0x2f54 <__ultoa_invert+0x7c>
    2f4e:	49 5d       	subi	r20, 0xD9	; 217
    2f50:	31 fd       	sbrc	r19, 1
    2f52:	40 52       	subi	r20, 0x20	; 32
    2f54:	41 93       	st	Z+, r20
    2f56:	02 d0       	rcall	.+4      	; 0x2f5c <__ultoa_invert+0x84>
    2f58:	a9 f7       	brne	.-22     	; 0x2f44 <__ultoa_invert+0x6c>
    2f5a:	ea cf       	rjmp	.-44     	; 0x2f30 <__ultoa_invert+0x58>
    2f5c:	b4 e0       	ldi	r27, 0x04	; 4
    2f5e:	a6 95       	lsr	r26
    2f60:	97 95       	ror	r25
    2f62:	87 95       	ror	r24
    2f64:	77 95       	ror	r23
    2f66:	67 95       	ror	r22
    2f68:	ba 95       	dec	r27
    2f6a:	c9 f7       	brne	.-14     	; 0x2f5e <__ultoa_invert+0x86>
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	61 05       	cpc	r22, r1
    2f70:	71 05       	cpc	r23, r1
    2f72:	08 95       	ret
    2f74:	9b 01       	movw	r18, r22
    2f76:	ac 01       	movw	r20, r24
    2f78:	0a 2e       	mov	r0, r26
    2f7a:	06 94       	lsr	r0
    2f7c:	57 95       	ror	r21
    2f7e:	47 95       	ror	r20
    2f80:	37 95       	ror	r19
    2f82:	27 95       	ror	r18
    2f84:	ba 95       	dec	r27
    2f86:	c9 f7       	brne	.-14     	; 0x2f7a <__ultoa_invert+0xa2>
    2f88:	62 0f       	add	r22, r18
    2f8a:	73 1f       	adc	r23, r19
    2f8c:	84 1f       	adc	r24, r20
    2f8e:	95 1f       	adc	r25, r21
    2f90:	a0 1d       	adc	r26, r0
    2f92:	08 95       	ret

00002f94 <__prologue_saves__>:
    2f94:	2f 92       	push	r2
    2f96:	3f 92       	push	r3
    2f98:	4f 92       	push	r4
    2f9a:	5f 92       	push	r5
    2f9c:	6f 92       	push	r6
    2f9e:	7f 92       	push	r7
    2fa0:	8f 92       	push	r8
    2fa2:	9f 92       	push	r9
    2fa4:	af 92       	push	r10
    2fa6:	bf 92       	push	r11
    2fa8:	cf 92       	push	r12
    2faa:	df 92       	push	r13
    2fac:	ef 92       	push	r14
    2fae:	ff 92       	push	r15
    2fb0:	0f 93       	push	r16
    2fb2:	1f 93       	push	r17
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	ca 1b       	sub	r28, r26
    2fbe:	db 0b       	sbc	r29, r27
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	09 94       	ijmp

00002fcc <__epilogue_restores__>:
    2fcc:	2a 88       	ldd	r2, Y+18	; 0x12
    2fce:	39 88       	ldd	r3, Y+17	; 0x11
    2fd0:	48 88       	ldd	r4, Y+16	; 0x10
    2fd2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fd4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fd6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fd8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fda:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fdc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fde:	b9 84       	ldd	r11, Y+9	; 0x09
    2fe0:	c8 84       	ldd	r12, Y+8	; 0x08
    2fe2:	df 80       	ldd	r13, Y+7	; 0x07
    2fe4:	ee 80       	ldd	r14, Y+6	; 0x06
    2fe6:	fd 80       	ldd	r15, Y+5	; 0x05
    2fe8:	0c 81       	ldd	r16, Y+4	; 0x04
    2fea:	1b 81       	ldd	r17, Y+3	; 0x03
    2fec:	aa 81       	ldd	r26, Y+2	; 0x02
    2fee:	b9 81       	ldd	r27, Y+1	; 0x01
    2ff0:	ce 0f       	add	r28, r30
    2ff2:	d1 1d       	adc	r29, r1
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	ed 01       	movw	r28, r26
    3000:	08 95       	ret

00003002 <_exit>:
    3002:	f8 94       	cli

00003004 <__stop_program>:
    3004:	ff cf       	rjmp	.-2      	; 0x3004 <__stop_program>
